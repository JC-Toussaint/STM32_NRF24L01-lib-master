
Nucleo_F411RE_NRF24L01_Transmitter_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003640  08003640  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003648  08003648  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  0800365c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  0800365c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001845  00000000  00000000  000298ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a0  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002bad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c66  00000000  00000000  0002c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007500  00000000  00000000  0004200e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086bf1  00000000  00000000  0004950e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d00ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002680  00000000  00000000  000d017c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003524 	.word	0x08003524

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003524 	.word	0x08003524

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 f8ae 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f80a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8d2 	bl	800069c <MX_GPIO_Init>
  MX_SPI3_Init();
 80004f8:	f000 f870 	bl	80005dc <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80004fc:	f000 f8a4 	bl	8000648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  runRadio();
 8000500:	f000 faa4 	bl	8000a4c <runRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x1c>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fffc 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000578:	2310      	movs	r3, #16
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 800057c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000582:	2308      	movs	r3, #8
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000586:	2304      	movs	r3, #4
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fbdc 	bl	8001d4c <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f917 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fe36 	bl	800222c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f901 	bl	80007cc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_SPI3_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	; (8000644 <MX_SPI3_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_SPI3_Init+0x64>)
 80005e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_SPI3_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_SPI3_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI3_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_SPI3_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_SPI3_Init+0x64>)
 8000608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800060c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI3_Init+0x64>)
 8000610:	2208      	movs	r2, #8
 8000612:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_SPI3_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI3_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_SPI3_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI3_Init+0x64>)
 8000628:	220a      	movs	r2, #10
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_SPI3_Init+0x64>)
 800062e:	f001 ffef 	bl	8002610 <HAL_SPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f8c8 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000028 	.word	0x20000028
 8000644:	40003c00 	.word	0x40003c00

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART2_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000680:	f002 fa78 	bl	8002b74 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f89f 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000080 	.word	0x20000080
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a3f      	ldr	r2, [pc, #252]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a38      	ldr	r2, [pc, #224]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <MX_GPIO_Init+0x11c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_GPIO_Init+0x11c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a2a      	ldr	r2, [pc, #168]	; (80007b8 <MX_GPIO_Init+0x11c>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_GPIO_Init+0x11c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2103      	movs	r1, #3
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <MX_GPIO_Init+0x120>)
 8000728:	f001 fab8 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2120      	movs	r1, #32
 8000730:	4823      	ldr	r0, [pc, #140]	; (80007c0 <MX_GPIO_Init+0x124>)
 8000732:	f001 fab3 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0x128>)
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <MX_GPIO_Init+0x120>)
 800074c:	f001 f924 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000750:	2303      	movs	r3, #3
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4815      	ldr	r0, [pc, #84]	; (80007bc <MX_GPIO_Init+0x120>)
 8000768:	f001 f916 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 800076c:	2304      	movs	r3, #4
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_GPIO_Init+0x12c>)
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480f      	ldr	r0, [pc, #60]	; (80007bc <MX_GPIO_Init+0x120>)
 8000780:	f001 f90a 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000784:	2320      	movs	r3, #32
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_GPIO_Init+0x124>)
 800079c:	f001 f8fc 	bl	8001998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2008      	movs	r0, #8
 80007a6:	f001 f8c0 	bl	800192a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007aa:	2008      	movs	r0, #8
 80007ac:	f001 f8d9 	bl	8001962 <HAL_NVIC_EnableIRQ>

}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020000 	.word	0x40020000
 80007c4:	10210000 	.word	0x10210000
 80007c8:	10110000 	.word	0x10110000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <nRF24_CE_L+0x14>)
 80007e6:	f001 fa59 	bl	8001c9c <HAL_GPIO_WritePin>
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40020800 	.word	0x40020800

080007f4 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <nRF24_CE_H+0x14>)
 80007fe:	f001 fa4d 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40020800 	.word	0x40020800

0800080c <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 ff8b 	bl	8001730 <HAL_Delay>
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart2;

void UART_SendChar(char b) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
 800082e:	1df9      	adds	r1, r7, #7
 8000830:	23c8      	movs	r3, #200	; 0xc8
 8000832:	2201      	movs	r2, #1
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <UART_SendChar+0x20>)
 8000836:	f002 f9ea 	bl	8002c0e <HAL_UART_Transmit>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000080 	.word	0x20000080

08000848 <UART_SendStr>:

void UART_SendStr(char *string) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fcc1 	bl	80001d8 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	23c8      	movs	r3, #200	; 0xc8
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <UART_SendStr+0x24>)
 8000860:	f002 f9d5 	bl	8002c0e <HAL_UART_Transmit>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000080 	.word	0x20000080

08000870 <Toggle_LED>:

void Toggle_LED() {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000874:	2120      	movs	r1, #32
 8000876:	4802      	ldr	r0, [pc, #8]	; (8000880 <Toggle_LED+0x10>)
 8000878:	f001 fa29 	bl	8001cce <HAL_GPIO_TogglePin>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40020000 	.word	0x40020000

08000884 <UART_SendBufHex>:
	LL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	460b      	mov	r3, r1
 800088e:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	e018      	b.n	80008c8 <UART_SendBufHex+0x44>
		ch = *buf++;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <UART_SendBufHex+0x54>)
 80008aa:	5c9b      	ldrb	r3, [r3, r2]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffb9 	bl	8000824 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 80008b2:	7b7b      	ldrb	r3, [r7, #13]
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <UART_SendBufHex+0x54>)
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ffb1 	bl	8000824 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	3301      	adds	r3, #1
 80008c6:	81fb      	strh	r3, [r7, #14]
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	887b      	ldrh	r3, [r7, #2]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3e2      	bcc.n	8000896 <UART_SendBufHex+0x12>
	}
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	0800353c 	.word	0x0800353c

080008dc <UART_SendHex8>:
void UART_SendHex8(uint16_t num) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <UART_SendHex8+0x38>)
 80008f2:	5cd3      	ldrb	r3, [r2, r3]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff95 	bl	8000824 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <UART_SendHex8+0x38>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff8d 	bl	8000824 <UART_SendChar>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	0800353c 	.word	0x0800353c

08000918 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	da05      	bge.n	8000936 <UART_SendInt+0x1e>
		UART_SendChar('-');
 800092a:	202d      	movs	r0, #45	; 0x2d
 800092c:	f7ff ff7a 	bl	8000824 <UART_SendChar>
		num *= -1;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	425b      	negs	r3, r3
 8000934:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <UART_SendInt+0x90>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1099      	asrs	r1, r3, #2
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1ac9      	subs	r1, r1, r3
 8000944:	460b      	mov	r3, r1
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	440b      	add	r3, r1
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	1ad1      	subs	r1, r2, r3
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	1c59      	adds	r1, r3, #1
 8000954:	6179      	str	r1, [r7, #20]
 8000956:	3230      	adds	r2, #48	; 0x30
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	f107 0118 	add.w	r1, r7, #24
 800095e:	440b      	add	r3, r1
 8000960:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <UART_SendInt+0x90>)
 8000968:	fb82 1203 	smull	r1, r2, r2, r3
 800096c:	1092      	asrs	r2, r2, #2
 800096e:	17db      	asrs	r3, r3, #31
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	dcdd      	bgt.n	8000936 <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3b01      	subs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <UART_SendInt+0x80>
 8000982:	f107 0208 	add.w	r2, r7, #8
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff49 	bl	8000824 <UART_SendChar>
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3b01      	subs	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	2b00      	cmp	r3, #0
 800099c:	daf1      	bge.n	8000982 <UART_SendInt+0x6a>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	66666667 	.word	0x66666667

080009ac <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <nRF24_TransmitPacket+0x94>)
 80009ba:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 80009bc:	f7ff ff0e 	bl	80007dc <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	4619      	mov	r1, r3
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 fdc4 	bl	8001552 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 80009ca:	f7ff ff13 	bl	80007f4 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 80009ce:	f000 fd7a 	bl	80014c6 <nRF24_GetStatus>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d105      	bne.n	80009ec <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	60ba      	str	r2, [r7, #8]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1f1      	bne.n	80009ce <nRF24_TransmitPacket+0x22>
 80009ea:	e000      	b.n	80009ee <nRF24_TransmitPacket+0x42>
			break;
 80009ec:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80009ee:	f7ff fef5 	bl	80007dc <nRF24_CE_L>

	if (!wait) {
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80009f8:	2302      	movs	r3, #2
 80009fa:	e01d      	b.n	8000a38 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <nRF24_TransmitPacket+0x98>)
 80009fe:	f7ff ff23 	bl	8000848 <UART_SendStr>
	UART_SendHex8(status);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff68 	bl	80008dc <UART_SendHex8>
	UART_SendStr("] ");
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <nRF24_TransmitPacket+0x9c>)
 8000a0e:	f7ff ff1b 	bl	8000848 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000a12:	f000 fd89 	bl	8001528 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000a20:	2303      	movs	r3, #3
 8000a22:	e009      	b.n	8000a38 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e002      	b.n	8000a38 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000a32:	f000 fd69 	bl	8001508 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	000fffff 	.word	0x000fffff
 8000a44:	08003550 	.word	0x08003550
 8000a48:	08003554 	.word	0x08003554

08000a4c <runRadio>:

#endif // DEMO_TX_



int runRadio(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32F411RE Transmitter is online.\r\n");
 8000a52:	4878      	ldr	r0, [pc, #480]	; (8000c34 <runRadio+0x1e8>)
 8000a54:	f7ff fef8 	bl	8000848 <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 8000a58:	f7ff fec0 	bl	80007dc <nRF24_CE_L>
	HAL_Delay(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a60:	f000 fe66 	bl	8001730 <HAL_Delay>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8000a64:	4874      	ldr	r0, [pc, #464]	; (8000c38 <runRadio+0x1ec>)
 8000a66:	f7ff feef 	bl	8000848 <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	if (!nRF24_Check()) {
 8000a6a:	f000 fb75 	bl	8001158 <nRF24_Check>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d108      	bne.n	8000a86 <runRadio+0x3a>
		UART_SendStr("FAIL\r\n");
 8000a74:	4871      	ldr	r0, [pc, #452]	; (8000c3c <runRadio+0x1f0>)
 8000a76:	f7ff fee7 	bl	8000848 <UART_SendStr>
		while (1) {
			Toggle_LED();
 8000a7a:	f7ff fef9 	bl	8000870 <Toggle_LED>
			Delay_ms(50);
 8000a7e:	2032      	movs	r0, #50	; 0x32
 8000a80:	f7ff fec4 	bl	800080c <Delay_ms>
			Toggle_LED();
 8000a84:	e7f9      	b.n	8000a7a <runRadio+0x2e>
		}
	}
// #pragma clang diagnostic pop
	UART_SendStr("OK\r\n");
 8000a86:	486e      	ldr	r0, [pc, #440]	; (8000c40 <runRadio+0x1f4>)
 8000a88:	f7ff fede 	bl	8000848 <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8000a8c:	f000 fb17 	bl	80010be <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8000a90:	2028      	movs	r0, #40	; 0x28
 8000a92:	f000 fc3c 	bl	800130e <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f000 fcdd 	bl	8001456 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000a9c:	200c      	movs	r0, #12
 8000a9e:	f000 fc15 	bl	80012cc <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f000 fc5c 	bl	8001360 <nRF24_SetAddrWidth>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR[] = { 'E', 'S', 'B' };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 8000aa8:	4966      	ldr	r1, [pc, #408]	; (8000c44 <runRadio+0x1f8>)
 8000aaa:	2006      	movs	r0, #6
 8000aac:	f000 fc68 	bl	8001380 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8000ab0:	4964      	ldr	r1, [pc, #400]	; (8000c44 <runRadio+0x1f8>)
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 fc64 	bl	8001380 <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000ab8:	2006      	movs	r0, #6
 8000aba:	f000 fcb1 	bl	8001420 <nRF24_SetTXPower>

    // Configure auto retransmit: 10 retransmissions with pause of 2500s in between
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8000abe:	210a      	movs	r1, #10
 8000ac0:	2009      	movs	r0, #9
 8000ac2:	f000 fc32 	bl	800132a <nRF24_SetAutoRetr>

    // Enable Auto-ACK for pipe#0 (for ACK packets)
    nRF24_EnableAA(nRF24_PIPE0);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fce0 	bl	800148c <nRF24_EnableAA>

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 fb90 	bl	80011f2 <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000ad2:	f000 fd29 	bl	8001528 <nRF24_ClearIRQFlags>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fbac 	bl	8001234 <nRF24_SetDynamicPayloadLength>
	nRF24_SetPayloadWithAck(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fbd3 	bl	8001288 <nRF24_SetPayloadWithAck>


	// Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f000 fb66 	bl	80011b4 <nRF24_SetPowerMode>


    // Some variables
    uint32_t packets_lost = 0; // global counter of lost packets
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
    uint8_t otx_plos_cnt; // lost packet count
	uint8_t otx_arc_cnt; // retransmit count


    // The main loop
    j = 0;
 8000aec:	4b56      	ldr	r3, [pc, #344]	; (8000c48 <runRadio+0x1fc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    while (1) {
// #pragma clang diagnostic pop

		payload_length = (uint8_t)(2 + (j + j /10)% 7);
 8000af2:	4b55      	ldr	r3, [pc, #340]	; (8000c48 <runRadio+0x1fc>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a55      	ldr	r2, [pc, #340]	; (8000c4c <runRadio+0x200>)
 8000af8:	fba2 2303 	umull	r2, r3, r2, r3
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	4b52      	ldr	r3, [pc, #328]	; (8000c48 <runRadio+0x1fc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	441a      	add	r2, r3
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <runRadio+0x204>)
 8000b06:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0a:	1ad1      	subs	r1, r2, r3
 8000b0c:	0849      	lsrs	r1, r1, #1
 8000b0e:	440b      	add	r3, r1
 8000b10:	0899      	lsrs	r1, r3, #2
 8000b12:	460b      	mov	r3, r1
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	1a5b      	subs	r3, r3, r1
 8000b18:	1ad1      	subs	r1, r2, r3
 8000b1a:	b2cb      	uxtb	r3, r1
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b4c      	ldr	r3, [pc, #304]	; (8000c54 <runRadio+0x208>)
 8000b22:	701a      	strb	r2, [r3, #0]

		// Prepare data packet
    	for (i = 0; i < payload_length; i++) {
 8000b24:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <runRadio+0x20c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e015      	b.n	8000b58 <runRadio+0x10c>
    		nRF24_payload[i] = (uint8_t) j++;
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <runRadio+0x1fc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1c5a      	adds	r2, r3, #1
 8000b32:	4945      	ldr	r1, [pc, #276]	; (8000c48 <runRadio+0x1fc>)
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	4a48      	ldr	r2, [pc, #288]	; (8000c58 <runRadio+0x20c>)
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	b2d9      	uxtb	r1, r3
 8000b3c:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <runRadio+0x210>)
 8000b3e:	5499      	strb	r1, [r3, r2]
    		if (j > 0x000000FF) j = 0;
 8000b40:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <runRadio+0x1fc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2bff      	cmp	r3, #255	; 0xff
 8000b46:	d902      	bls.n	8000b4e <runRadio+0x102>
 8000b48:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <runRadio+0x1fc>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
    	for (i = 0; i < payload_length; i++) {
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <runRadio+0x20c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a40      	ldr	r2, [pc, #256]	; (8000c58 <runRadio+0x20c>)
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <runRadio+0x208>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <runRadio+0x20c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8e2      	bhi.n	8000b2c <runRadio+0xe0>
    	}

    	// Print a payload
    	UART_SendStr("PAYLOAD:>");
 8000b66:	483e      	ldr	r0, [pc, #248]	; (8000c60 <runRadio+0x214>)
 8000b68:	f7ff fe6e 	bl	8000848 <UART_SendStr>
    	UART_SendBufHex((char *)nRF24_payload, payload_length);
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <runRadio+0x208>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	4839      	ldr	r0, [pc, #228]	; (8000c5c <runRadio+0x210>)
 8000b76:	f7ff fe85 	bl	8000884 <UART_SendBufHex>
    	UART_SendStr("< ... TX: ");
 8000b7a:	483a      	ldr	r0, [pc, #232]	; (8000c64 <runRadio+0x218>)
 8000b7c:	f7ff fe64 	bl	8000848 <UART_SendStr>

    	// Transmit a packet
    	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 8000b80:	4b34      	ldr	r3, [pc, #208]	; (8000c54 <runRadio+0x208>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4835      	ldr	r0, [pc, #212]	; (8000c5c <runRadio+0x210>)
 8000b88:	f7ff ff10 	bl	80009ac <nRF24_TransmitPacket>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b35      	ldr	r3, [pc, #212]	; (8000c68 <runRadio+0x21c>)
 8000b92:	701a      	strb	r2, [r3, #0]
		otx = nRF24_GetRetransmitCounters();
 8000b94:	f000 fc9f 	bl	80014d6 <nRF24_GetRetransmitCounters>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	70fb      	strb	r3, [r7, #3]
		nRF24_ReadPayloadDpl(nRF24_payload, &payload_length );
 8000b9c:	492d      	ldr	r1, [pc, #180]	; (8000c54 <runRadio+0x208>)
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <runRadio+0x210>)
 8000ba0:	f000 fd44 	bl	800162c <nRF24_ReadPayloadDpl>
		otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	70bb      	strb	r3, [r7, #2]
		otx_arc_cnt  = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	f003 030f 	and.w	r3, r3, #15
 8000bb0:	707b      	strb	r3, [r7, #1]
    	switch (tx_res) {
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <runRadio+0x21c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d007      	beq.n	8000bca <runRadio+0x17e>
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d009      	beq.n	8000bd2 <runRadio+0x186>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d111      	bne.n	8000be6 <runRadio+0x19a>
			case nRF24_TX_SUCCESS:
				UART_SendStr("OK");
 8000bc2:	482a      	ldr	r0, [pc, #168]	; (8000c6c <runRadio+0x220>)
 8000bc4:	f7ff fe40 	bl	8000848 <UART_SendStr>
				break;
 8000bc8:	e011      	b.n	8000bee <runRadio+0x1a2>
			case nRF24_TX_TIMEOUT:
				UART_SendStr("TIMEOUT");
 8000bca:	4829      	ldr	r0, [pc, #164]	; (8000c70 <runRadio+0x224>)
 8000bcc:	f7ff fe3c 	bl	8000848 <UART_SendStr>
				break;
 8000bd0:	e00d      	b.n	8000bee <runRadio+0x1a2>
			case nRF24_TX_MAXRT:
				UART_SendStr("MAX RETRANSMIT");
 8000bd2:	4828      	ldr	r0, [pc, #160]	; (8000c74 <runRadio+0x228>)
 8000bd4:	f7ff fe38 	bl	8000848 <UART_SendStr>
				packets_lost += otx_plos_cnt;
 8000bd8:	78bb      	ldrb	r3, [r7, #2]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
				nRF24_ResetPLOS();
 8000be0:	f000 fc81 	bl	80014e6 <nRF24_ResetPLOS>
				break;
 8000be4:	e003      	b.n	8000bee <runRadio+0x1a2>
			default:
				UART_SendStr("ERROR");
 8000be6:	4824      	ldr	r0, [pc, #144]	; (8000c78 <runRadio+0x22c>)
 8000be8:	f7ff fe2e 	bl	8000848 <UART_SendStr>
				break;
 8000bec:	bf00      	nop
		}
		UART_SendStr("   ACK_PAYLOAD=>");
 8000bee:	4823      	ldr	r0, [pc, #140]	; (8000c7c <runRadio+0x230>)
 8000bf0:	f7ff fe2a 	bl	8000848 <UART_SendStr>
    	UART_SendBufHex((char *) nRF24_payload, payload_length);
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <runRadio+0x208>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4817      	ldr	r0, [pc, #92]	; (8000c5c <runRadio+0x210>)
 8000bfe:	f7ff fe41 	bl	8000884 <UART_SendBufHex>
    	UART_SendStr("<   ARC=");
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <runRadio+0x234>)
 8000c04:	f7ff fe20 	bl	8000848 <UART_SendStr>
		UART_SendInt(otx_arc_cnt);
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fe84 	bl	8000918 <UART_SendInt>
		UART_SendStr(" LOST=");
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <runRadio+0x238>)
 8000c12:	f7ff fe19 	bl	8000848 <UART_SendStr>
		UART_SendInt(packets_lost);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fe7d 	bl	8000918 <UART_SendInt>
		UART_SendStr("\r\n");
 8000c1e:	481a      	ldr	r0, [pc, #104]	; (8000c88 <runRadio+0x23c>)
 8000c20:	f7ff fe12 	bl	8000848 <UART_SendStr>

    	// Wait ~0.5s
    	Delay_ms(500);
 8000c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c28:	f7ff fdf0 	bl	800080c <Delay_ms>
		Toggle_LED();
 8000c2c:	f7ff fe20 	bl	8000870 <Toggle_LED>
		payload_length = (uint8_t)(2 + (j + j /10)% 7);
 8000c30:	e75f      	b.n	8000af2 <runRadio+0xa6>
 8000c32:	bf00      	nop
 8000c34:	08003558 	.word	0x08003558
 8000c38:	08003580 	.word	0x08003580
 8000c3c:	08003594 	.word	0x08003594
 8000c40:	0800359c 	.word	0x0800359c
 8000c44:	08003614 	.word	0x08003614
 8000c48:	200000c4 	.word	0x200000c4
 8000c4c:	cccccccd 	.word	0xcccccccd
 8000c50:	24924925 	.word	0x24924925
 8000c54:	200000c1 	.word	0x200000c1
 8000c58:	200000d0 	.word	0x200000d0
 8000c5c:	200000d4 	.word	0x200000d4
 8000c60:	080035a4 	.word	0x080035a4
 8000c64:	080035b0 	.word	0x080035b0
 8000c68:	200000c0 	.word	0x200000c0
 8000c6c:	080035bc 	.word	0x080035bc
 8000c70:	080035c0 	.word	0x080035c0
 8000c74:	080035c8 	.word	0x080035c8
 8000c78:	080035d8 	.word	0x080035d8
 8000c7c:	080035e0 	.word	0x080035e0
 8000c80:	080035f4 	.word	0x080035f4
 8000c84:	08003600 	.word	0x08003600
 8000c88:	08003608 	.word	0x08003608

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fe22 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <HAL_SPI_MspInit+0xc4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d14b      	bne.n	8000d96 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_SPI_MspInit+0xc8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <HAL_SPI_MspInit+0xcc>)
 8000d70:	f000 fe12 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d86:	2306      	movs	r3, #6
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_SPI_MspInit+0xd0>)
 8000d92:	f000 fe01 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40003c00 	.word	0x40003c00
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40020800 	.word	0x40020800

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x8c>)
 8000e26:	f000 fdb7 	bl	8001998 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 fc2c 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ea0:	2004      	movs	r0, #4
 8000ea2:	f000 ff2f 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <SystemInit+0x28>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x28>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <SystemInit+0x28>)
 8000ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd3 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 fae1 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff faed 	bl	80004e8 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f14:	08003650 	.word	0x08003650
  ldr  r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f24:	200000f8 	.word	0x200000f8

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2102      	movs	r1, #2
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <nRF24_CSN_L+0x14>)
 8000f36:	f000 feb1 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40020800 	.word	0x40020800

08000f44 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <nRF24_CSN_H+0x14>)
 8000f4e:	f000 fea5 	bl	8001c9c <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020800 	.word	0x40020800

08000f5c <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 8000f66:	f107 020f 	add.w	r2, r7, #15
 8000f6a:	1df9      	adds	r1, r7, #7
 8000f6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2301      	movs	r3, #1
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <nRF24_LL_RW+0x34>)
 8000f76:	f001 fbaf 	bl	80026d8 <HAL_SPI_TransmitReceive>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <nRF24_LL_RW+0x28>
        Error_Handler();
 8000f80:	f7ff fc24 	bl	80007cc <Error_Handler>
    return result;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000028 	.word	0x20000028

08000f94 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000f9e:	f7ff ffc5 	bl	8000f2c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 031f 	and.w	r3, r3, #31
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffd6 	bl	8000f5c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000fb0:	20ff      	movs	r0, #255	; 0xff
 8000fb2:	f7ff ffd3 	bl	8000f5c <nRF24_LL_RW>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000fba:	f7ff ffc3 	bl	8000f44 <nRF24_CSN_H>

	return value;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000fd8:	f7ff ffa8 	bl	8000f2c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b1f      	cmp	r3, #31
 8000fe0:	d810      	bhi.n	8001004 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffb1 	bl	8000f5c <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffad 	bl	8000f5c <nRF24_LL_RW>
 8001002:	e013      	b.n	800102c <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ffa8 	bl	8000f5c <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2be1      	cmp	r3, #225	; 0xe1
 8001010:	d00c      	beq.n	800102c <nRF24_WriteReg+0x64>
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2be2      	cmp	r3, #226	; 0xe2
 8001016:	d009      	beq.n	800102c <nRF24_WriteReg+0x64>
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2be3      	cmp	r3, #227	; 0xe3
 800101c:	d006      	beq.n	800102c <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2bff      	cmp	r3, #255	; 0xff
 8001022:	d003      	beq.n	800102c <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff98 	bl	8000f5c <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 800102c:	f7ff ff8a 	bl	8000f44 <nRF24_CSN_H>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001048:	f7ff ff70 	bl	8000f2c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff84 	bl	8000f5c <nRF24_LL_RW>
	while (count--) {
 8001054:	e007      	b.n	8001066 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8001056:	683c      	ldr	r4, [r7, #0]
 8001058:	1c63      	adds	r3, r4, #1
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	20ff      	movs	r0, #255	; 0xff
 800105e:	f7ff ff7d 	bl	8000f5c <nRF24_LL_RW>
 8001062:	4603      	mov	r3, r0
 8001064:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	71ba      	strb	r2, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1f2      	bne.n	8001056 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8001070:	f7ff ff68 	bl	8000f44 <nRF24_CSN_H>
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bd90      	pop	{r4, r7, pc}

0800107c <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800108c:	f7ff ff4e 	bl	8000f2c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff62 	bl	8000f5c <nRF24_LL_RW>
	while (count--) {
 8001098:	e006      	b.n	80010a8 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff5a 	bl	8000f5c <nRF24_LL_RW>
	while (count--) {
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	71ba      	strb	r2, [r7, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f3      	bne.n	800109a <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80010b2:	f7ff ff47 	bl	8000f44 <nRF24_CSN_H>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 80010c2:	2108      	movs	r1, #8
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff7f 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 80010ca:	213f      	movs	r1, #63	; 0x3f
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff ff7b 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 80010d2:	2103      	movs	r1, #3
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff ff77 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 80010da:	2103      	movs	r1, #3
 80010dc:	2003      	movs	r0, #3
 80010de:	f7ff ff73 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 80010e2:	2103      	movs	r1, #3
 80010e4:	2004      	movs	r0, #4
 80010e6:	f7ff ff6f 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 80010ea:	2102      	movs	r1, #2
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff ff6b 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 80010f2:	210e      	movs	r1, #14
 80010f4:	2006      	movs	r0, #6
 80010f6:	f7ff ff67 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80010fa:	2100      	movs	r1, #0
 80010fc:	2007      	movs	r0, #7
 80010fe:	f7ff ff63 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8001102:	2100      	movs	r1, #0
 8001104:	2011      	movs	r0, #17
 8001106:	f7ff ff5f 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800110a:	2100      	movs	r1, #0
 800110c:	2012      	movs	r0, #18
 800110e:	f7ff ff5b 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8001112:	2100      	movs	r1, #0
 8001114:	2013      	movs	r0, #19
 8001116:	f7ff ff57 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800111a:	2100      	movs	r1, #0
 800111c:	2014      	movs	r0, #20
 800111e:	f7ff ff53 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8001122:	2100      	movs	r1, #0
 8001124:	2015      	movs	r0, #21
 8001126:	f7ff ff4f 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800112a:	2100      	movs	r1, #0
 800112c:	2016      	movs	r0, #22
 800112e:	f7ff ff4b 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8001132:	2100      	movs	r1, #0
 8001134:	201c      	movs	r0, #28
 8001136:	f7ff ff47 	bl	8000fc8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800113a:	2100      	movs	r1, #0
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff ff43 	bl	8000fc8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8001142:	f000 f9e9 	bl	8001518 <nRF24_FlushRX>
	nRF24_FlushTX();
 8001146:	f000 f9df 	bl	8001508 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 800114a:	f000 f9ed 	bl	8001528 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800114e:	f7ff fef9 	bl	8000f44 <nRF24_CSN_H>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <nRF24_Check+0x58>)
 8001160:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8001162:	2205      	movs	r2, #5
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	2030      	movs	r0, #48	; 0x30
 8001168:	f7ff ff88 	bl	800107c <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800116c:	463b      	mov	r3, r7
 800116e:	2205      	movs	r2, #5
 8001170:	4619      	mov	r1, r3
 8001172:	2010      	movs	r0, #16
 8001174:	f7ff ff60 	bl	8001038 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e010      	b.n	80011a0 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	4413      	add	r3, r2
 8001186:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1c59      	adds	r1, r3, #1
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d001      	beq.n	800119a <nRF24_Check+0x42>
 8001196:	2300      	movs	r3, #0
 8001198:	e006      	b.n	80011a8 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3301      	adds	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d9eb      	bls.n	800117e <nRF24_Check+0x26>
	}

	return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800360c 	.word	0x0800360c

080011b4 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fee8 	bl	8000f94 <nRF24_ReadReg>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d104      	bne.n	80011d8 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e003      	b.n	80011e0 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f023 0302 	bic.w	r3, r3, #2
 80011de:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff feef 	bl	8000fc8 <nRF24_WriteReg>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fec9 	bl	8000f94 <nRF24_ReadReg>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	b25a      	sxtb	r2, r3
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4313      	orrs	r3, r2
 800121e:	b25b      	sxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	4619      	mov	r1, r3
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fece 	bl	8000fc8 <nRF24_WriteReg>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800123e:	201d      	movs	r0, #29
 8001240:	f7ff fea8 	bl	8000f94 <nRF24_ReadReg>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	201d      	movs	r0, #29
 800125a:	f7ff feb5 	bl	8000fc8 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 800125e:	211f      	movs	r1, #31
 8001260:	201c      	movs	r0, #28
 8001262:	f7ff feb1 	bl	8000fc8 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8001266:	e00b      	b.n	8001280 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	201d      	movs	r0, #29
 8001274:	f7ff fea8 	bl	8000fc8 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8001278:	2100      	movs	r1, #0
 800127a:	201c      	movs	r0, #28
 800127c:	f7ff fea4 	bl	8000fc8 <nRF24_WriteReg>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8001292:	201d      	movs	r0, #29
 8001294:	f7ff fe7e 	bl	8000f94 <nRF24_ReadReg>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d008      	beq.n	80012b4 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	201d      	movs	r0, #29
 80012ae:	f7ff fe8b 	bl	8000fc8 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 80012b2:	e007      	b.n	80012c4 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 0302 	bic.w	r3, r3, #2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	201d      	movs	r0, #29
 80012c0:	f7ff fe82 	bl	8000fc8 <nRF24_WriteReg>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fe5c 	bl	8000f94 <nRF24_ReadReg>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f023 030c 	bic.w	r3, r3, #12
 80012e6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	4619      	mov	r1, r3
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fe61 	bl	8000fc8 <nRF24_WriteReg>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4619      	mov	r1, r3
 800131c:	2005      	movs	r0, #5
 800131e:	f7ff fe53 	bl	8000fc8 <nRF24_WriteReg>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	460a      	mov	r2, r1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	4613      	mov	r3, r2
 8001338:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	b25a      	sxtb	r2, r3
 8001340:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	2004      	movs	r0, #4
 8001354:	f7ff fe38 	bl	8000fc8 <nRF24_WriteReg>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	3b02      	subs	r3, #2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4619      	mov	r1, r3
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff fe28 	bl	8000fc8 <nRF24_WriteReg>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d83e      	bhi.n	8001410 <nRF24_SetAddr+0x90>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <nRF24_SetAddr+0x18>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013fd 	.word	0x080013fd
 80013a4:	080013fd 	.word	0x080013fd
 80013a8:	080013fd 	.word	0x080013fd
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	080013b5 	.word	0x080013b5
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80013b4:	2003      	movs	r0, #3
 80013b6:	f7ff fded 	bl	8000f94 <nRF24_ReadReg>
 80013ba:	4603      	mov	r3, r0
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4413      	add	r3, r2
 80013c6:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80013c8:	f7ff fdb0 	bl	8000f2c <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <nRF24_SetAddr+0x9c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fdbf 	bl	8000f5c <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	603a      	str	r2, [r7, #0]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fdb8 	bl	8000f5c <nRF24_LL_RW>
			} while (addr_width--);
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	73fa      	strb	r2, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f3      	bne.n	80013de <nRF24_SetAddr+0x5e>
			nRF24_CSN_H();
 80013f6:	f7ff fda5 	bl	8000f44 <nRF24_CSN_H>
			break;
 80013fa:	e00a      	b.n	8001412 <nRF24_SetAddr+0x92>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <nRF24_SetAddr+0x9c>)
 8001400:	5cd2      	ldrb	r2, [r2, r3]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f7ff fddd 	bl	8000fc8 <nRF24_WriteReg>
			break;
 800140e:	e000      	b.n	8001412 <nRF24_SetAddr+0x92>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001410:	bf00      	nop
	}
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08003638 	.word	0x08003638

08001420 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800142a:	2006      	movs	r0, #6
 800142c:	f7ff fdb2 	bl	8000f94 <nRF24_ReadReg>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f023 0306 	bic.w	r3, r3, #6
 800143a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4313      	orrs	r3, r2
 8001442:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	4619      	mov	r1, r3
 8001448:	2006      	movs	r0, #6
 800144a:	f7ff fdbd 	bl	8000fc8 <nRF24_WriteReg>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001460:	2006      	movs	r0, #6
 8001462:	f7ff fd97 	bl	8000f94 <nRF24_ReadReg>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001470:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4313      	orrs	r3, r2
 8001478:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	4619      	mov	r1, r3
 800147e:	2006      	movs	r0, #6
 8001480:	f7ff fda2 	bl	8000fc8 <nRF24_WriteReg>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fd7c 	bl	8000f94 <nRF24_ReadReg>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2201      	movs	r2, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4619      	mov	r1, r3
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fd85 	bl	8000fc8 <nRF24_WriteReg>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f7ff fd62 	bl	8000f94 <nRF24_ReadReg>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 80014da:	2008      	movs	r0, #8
 80014dc:	f7ff fd5a 	bl	8000f94 <nRF24_ReadReg>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 80014ec:	2005      	movs	r0, #5
 80014ee:	f7ff fd51 	bl	8000f94 <nRF24_ReadReg>
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	4619      	mov	r1, r3
 80014fa:	2005      	movs	r0, #5
 80014fc:	f7ff fd64 	bl	8000fc8 <nRF24_WriteReg>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800150c:	21ff      	movs	r1, #255	; 0xff
 800150e:	20e1      	movs	r0, #225	; 0xe1
 8001510:	f7ff fd5a 	bl	8000fc8 <nRF24_WriteReg>
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800151c:	21ff      	movs	r1, #255	; 0xff
 800151e:	20e2      	movs	r0, #226	; 0xe2
 8001520:	f7ff fd52 	bl	8000fc8 <nRF24_WriteReg>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800152e:	2007      	movs	r0, #7
 8001530:	f7ff fd30 	bl	8000f94 <nRF24_ReadReg>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800153e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4619      	mov	r1, r3
 8001544:	2007      	movs	r0, #7
 8001546:	f7ff fd3f 	bl	8000fc8 <nRF24_WriteReg>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	461a      	mov	r2, r3
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	20a0      	movs	r0, #160	; 0xa0
 8001566:	f7ff fd89 	bl	800107c <nRF24_WriteMBReg>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8001578:	f7ff fcd8 	bl	8000f2c <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800157c:	2060      	movs	r0, #96	; 0x60
 800157e:	f7ff fced 	bl	8000f5c <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001582:	20ff      	movs	r0, #255	; 0xff
 8001584:	f7ff fcea 	bl	8000f5c <nRF24_LL_RW>
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 800158c:	f7ff fcda 	bl	8000f44 <nRF24_CSN_H>

	return value;
 8001590:	79fb      	ldrb	r3, [r7, #7]

}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80015aa:	2007      	movs	r0, #7
 80015ac:	f7ff fcf2 	bl	8000f94 <nRF24_ReadReg>
 80015b0:	4603      	mov	r3, r0
 80015b2:	105b      	asrs	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d829      	bhi.n	8001616 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00f      	beq.n	80015e8 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 80015c8:	f7ff ffd3 	bl	8001572 <nRF24_GetRxDplPayloadWidth>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d90f      	bls.n	80015fc <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 80015e2:	f7ff ff99 	bl	8001518 <nRF24_FlushRX>
 80015e6:	e009      	b.n	80015fc <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <nRF24_ReadPayloadGeneric+0x8c>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fcd0 	bl	8000f94 <nRF24_ReadReg>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	2061      	movs	r0, #97	; 0x61
 800160e:	f7ff fd13 	bl	8001038 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	e003      	b.n	800161e <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800161c:	23ff      	movs	r3, #255	; 0xff
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	08003630 	.word	0x08003630

0800162c <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8001636:	2201      	movs	r2, #1
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffae 	bl	800159c <nRF24_ReadPayloadGeneric>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_Init+0x40>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_Init+0x40>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x40>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 f94d 	bl	8001914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	2000      	movs	r0, #0
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fb04 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f965 	bl	800197e <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 f92d 	bl	800192a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008
 8001714:	200000f4 	.word	0x200000f4

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200000f4 	.word	0x200000f4

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_Delay+0x40>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffde 	bl	8001718 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000008 	.word	0x20000008

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e0:	d301      	bcc.n	80018e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e2:	2301      	movs	r3, #1
 80018e4:	e00f      	b.n	8001906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <SysTick_Config+0x40>)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ee:	210f      	movs	r1, #15
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	f7ff ff8e 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SysTick_Config+0x40>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SysTick_Config+0x40>)
 8001900:	2207      	movs	r2, #7
 8001902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	e000e010 	.word	0xe000e010

08001914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ff29 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800193c:	f7ff ff3e 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	68b9      	ldr	r1, [r7, #8]
 8001946:	6978      	ldr	r0, [r7, #20]
 8001948:	f7ff ff8e 	bl	8001868 <NVIC_EncodePriority>
 800194c:	4602      	mov	r2, r0
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff5d 	bl	8001814 <__NVIC_SetPriority>
}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffa2 	bl	80018d0 <SysTick_Config>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e159      	b.n	8001c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f040 8148 	bne.w	8001c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d00b      	beq.n	80019f2 <HAL_GPIO_Init+0x5a>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e6:	2b11      	cmp	r3, #17
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d130      	bne.n	8001a54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 0201 	and.w	r2, r3, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0xfc>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b12      	cmp	r3, #18
 8001a92:	d123      	bne.n	8001adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a2 	beq.w	8001c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_GPIO_Init+0x2e4>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_GPIO_Init+0x2e4>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_GPIO_Init+0x2e4>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	220f      	movs	r2, #15
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_GPIO_Init+0x2ec>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x202>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x1fe>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_GPIO_Init+0x2f4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x1fa>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_GPIO_Init+0x2f8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x1f6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_GPIO_Init+0x2fc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x1f2>
 8001b86:	2304      	movs	r3, #4
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4934      	ldr	r1, [pc, #208]	; (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bde:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_GPIO_Init+0x300>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f aea2 	bls.w	80019b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	3724      	adds	r7, #36	; 0x24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	40020400 	.word	0x40020400
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d104      	bne.n	8001cf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cf0:	e002      	b.n	8001cf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f806 	bl	8001d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013c00 	.word	0x40013c00

08001d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e25b      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d075      	beq.n	8001e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	4ba3      	ldr	r3, [pc, #652]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4ba0      	ldr	r3, [pc, #640]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b9d      	ldr	r3, [pc, #628]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b99      	ldr	r3, [pc, #612]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e236      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x74>
 8001db2:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a90      	ldr	r2, [pc, #576]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x98>
 8001dca:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a8a      	ldr	r2, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001de4:	4b84      	ldr	r3, [pc, #528]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a83      	ldr	r2, [pc, #524]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc88 	bl	8001718 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc84 	bl	8001718 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1fb      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xc0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc74 	bl	8001718 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc70 	bl	8001718 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1e7      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0xe8>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	4b65      	ldr	r3, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1bb      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4952      	ldr	r1, [pc, #328]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCC_OscConfig+0x2b0>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fc29 	bl	8001718 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc25 	bl	8001718 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e19c      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4940      	ldr	r1, [pc, #256]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_OscConfig+0x2b0>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc08 	bl	8001718 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fc04 	bl	8001718 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e17b      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d030      	beq.n	8001f98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_OscConfig+0x2b4>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbe8 	bl	8001718 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbe4 	bl	8001718 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e15b      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x200>
 8001f6a:	e015      	b.n	8001f98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x2b4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fbd1 	bl	8001718 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fbcd 	bl	8001718 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e144      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80a0 	beq.w	80020e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x2b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_RCC_OscConfig+0x2b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_RCC_OscConfig+0x2b8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fb93 	bl	8001718 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e011      	b.n	800201a <HAL_RCC_OscConfig+0x2ce>
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470000 	.word	0x42470000
 8002000:	42470e80 	.word	0x42470e80
 8002004:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7ff fb86 	bl	8001718 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0fd      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_OscConfig+0x4d4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x2f0>
 800202e:	4b7d      	ldr	r3, [pc, #500]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a7c      	ldr	r2, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	e01c      	b.n	8002076 <HAL_RCC_OscConfig+0x32a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0x312>
 8002044:	4b77      	ldr	r3, [pc, #476]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a76      	ldr	r2, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	4b74      	ldr	r3, [pc, #464]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a73      	ldr	r2, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	e00b      	b.n	8002076 <HAL_RCC_OscConfig+0x32a>
 800205e:	4b71      	ldr	r3, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a70      	ldr	r2, [pc, #448]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
 800206a:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a6d      	ldr	r2, [pc, #436]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d015      	beq.n	80020aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff fb4b 	bl	8001718 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff fb47 	bl	8001718 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0bc      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	4b61      	ldr	r3, [pc, #388]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ee      	beq.n	8002086 <HAL_RCC_OscConfig+0x33a>
 80020a8:	e014      	b.n	80020d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fb35 	bl	8001718 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff fb31 	bl	8001718 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0a6      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ee      	bne.n	80020b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8092 	beq.w	8002214 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d05c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d141      	bne.n	8002188 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <HAL_RCC_OscConfig+0x4dc>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff fb05 	bl	8001718 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff fb01 	bl	8001718 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e078      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	019b      	lsls	r3, r3, #6
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	061b      	lsls	r3, r3, #24
 8002154:	4933      	ldr	r1, [pc, #204]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0x4dc>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fada 	bl	8001718 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fad6 	bl	8001718 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e04d      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x41c>
 8002186:	e045      	b.n	8002214 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x4dc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fac3 	bl	8001718 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fabf 	bl	8001718 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e036      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x44a>
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e029      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d11c      	bne.n	8002210 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ea:	4013      	ands	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10d      	bne.n	8002210 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40007000 	.word	0x40007000
 8002224:	40023800 	.word	0x40023800
 8002228:	42470060 	.word	0x42470060

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0cc      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b68      	ldr	r3, [pc, #416]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d90c      	bls.n	8002268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b8      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800228a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	494d      	ldr	r1, [pc, #308]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d044      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d119      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e07f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e06f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3b      	ldr	r3, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e067      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7ff f9fc 	bl	8001718 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7ff f9f8 	bl	8001718 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04f      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e032      	b.n	80023da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4916      	ldr	r1, [pc, #88]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023b2:	f000 f821 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b6:	4601      	mov	r1, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	5cd3      	ldrb	r3, [r2, r3]
 80023c6:	fa21 f303 	lsr.w	r3, r1, r3
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff f95c 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08003618 	.word	0x08003618
 80023f0:	20000000 	.word	0x20000000
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240e:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d007      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x32>
 800241a:	2b08      	cmp	r3, #8
 800241c:	d008      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x38>
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 80b4 	bne.w	800258c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002426:	60bb      	str	r3, [r7, #8]
       break;
 8002428:	e0b3      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242a:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800242c:	60bb      	str	r3, [r7, #8]
      break;
 800242e:	e0b0      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002430:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002438:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04a      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	f04f 0400 	mov.w	r4, #0
 8002450:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	ea03 0501 	and.w	r5, r3, r1
 800245c:	ea04 0602 	and.w	r6, r4, r2
 8002460:	4629      	mov	r1, r5
 8002462:	4632      	mov	r2, r6
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	f04f 0400 	mov.w	r4, #0
 800246c:	0154      	lsls	r4, r2, #5
 800246e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002472:	014b      	lsls	r3, r1, #5
 8002474:	4619      	mov	r1, r3
 8002476:	4622      	mov	r2, r4
 8002478:	1b49      	subs	r1, r1, r5
 800247a:	eb62 0206 	sbc.w	r2, r2, r6
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	f04f 0400 	mov.w	r4, #0
 8002486:	0194      	lsls	r4, r2, #6
 8002488:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800248c:	018b      	lsls	r3, r1, #6
 800248e:	1a5b      	subs	r3, r3, r1
 8002490:	eb64 0402 	sbc.w	r4, r4, r2
 8002494:	f04f 0100 	mov.w	r1, #0
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	00e2      	lsls	r2, r4, #3
 800249e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024a2:	00d9      	lsls	r1, r3, #3
 80024a4:	460b      	mov	r3, r1
 80024a6:	4614      	mov	r4, r2
 80024a8:	195b      	adds	r3, r3, r5
 80024aa:	eb44 0406 	adc.w	r4, r4, r6
 80024ae:	f04f 0100 	mov.w	r1, #0
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	0262      	lsls	r2, r4, #9
 80024b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80024bc:	0259      	lsls	r1, r3, #9
 80024be:	460b      	mov	r3, r1
 80024c0:	4614      	mov	r4, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	4621      	mov	r1, r4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f04f 0400 	mov.w	r4, #0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4623      	mov	r3, r4
 80024d0:	f7fd fe8a 	bl	80001e8 <__aeabi_uldivmod>
 80024d4:	4603      	mov	r3, r0
 80024d6:	460c      	mov	r4, r1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e049      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	f04f 0400 	mov.w	r4, #0
 80024e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	ea03 0501 	and.w	r5, r3, r1
 80024f2:	ea04 0602 	and.w	r6, r4, r2
 80024f6:	4629      	mov	r1, r5
 80024f8:	4632      	mov	r2, r6
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	0154      	lsls	r4, r2, #5
 8002504:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002508:	014b      	lsls	r3, r1, #5
 800250a:	4619      	mov	r1, r3
 800250c:	4622      	mov	r2, r4
 800250e:	1b49      	subs	r1, r1, r5
 8002510:	eb62 0206 	sbc.w	r2, r2, r6
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	f04f 0400 	mov.w	r4, #0
 800251c:	0194      	lsls	r4, r2, #6
 800251e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002522:	018b      	lsls	r3, r1, #6
 8002524:	1a5b      	subs	r3, r3, r1
 8002526:	eb64 0402 	sbc.w	r4, r4, r2
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	00e2      	lsls	r2, r4, #3
 8002534:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002538:	00d9      	lsls	r1, r3, #3
 800253a:	460b      	mov	r3, r1
 800253c:	4614      	mov	r4, r2
 800253e:	195b      	adds	r3, r3, r5
 8002540:	eb44 0406 	adc.w	r4, r4, r6
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	02a2      	lsls	r2, r4, #10
 800254e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002552:	0299      	lsls	r1, r3, #10
 8002554:	460b      	mov	r3, r1
 8002556:	4614      	mov	r4, r2
 8002558:	4618      	mov	r0, r3
 800255a:	4621      	mov	r1, r4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f04f 0400 	mov.w	r4, #0
 8002562:	461a      	mov	r2, r3
 8002564:	4623      	mov	r3, r4
 8002566:	f7fd fe3f 	bl	80001e8 <__aeabi_uldivmod>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	60bb      	str	r3, [r7, #8]
      break;
 800258a:	e002      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800258e:	60bb      	str	r3, [r7, #8]
      break;
 8002590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002592:	68bb      	ldr	r3, [r7, #8]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	00f42400 	.word	0x00f42400
 80025a4:	007a1200 	.word	0x007a1200

080025a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08003628 	.word	0x08003628

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffdc 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025f0:	4601      	mov	r1, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0b5b      	lsrs	r3, r3, #13
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	08003628 	.word	0x08003628

08002610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e056      	b.n	80026d0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe fb4d 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2202      	movs	r2, #2
 8002646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002658:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	ea42 0103 	orr.w	r1, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	0c1b      	lsrs	r3, r3, #16
 80026a0:	f003 0104 	and.w	r1, r3, #4
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x26>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e18a      	b.n	8002a14 <HAL_SPI_TransmitReceive+0x33c>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002706:	f7ff f807 	bl	8001718 <HAL_GetTick>
 800270a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002724:	2b01      	cmp	r3, #1
 8002726:	d00f      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x70>
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272e:	d107      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x68>
 8002738:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800273c:	2b04      	cmp	r3, #4
 800273e:	d003      	beq.n	8002748 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002740:	2302      	movs	r3, #2
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002746:	e15b      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_SPI_TransmitReceive+0x82>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_SPI_TransmitReceive+0x82>
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002760:	e14e      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b04      	cmp	r3, #4
 800276c:	d003      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2205      	movs	r2, #5
 8002772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	887a      	ldrh	r2, [r7, #2]
 800279e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d007      	beq.n	80027ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d2:	d178      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x10a>
 80027dc:	8b7b      	ldrh	r3, [r7, #26]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d166      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	1c9a      	adds	r2, r3, #2
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002806:	e053      	b.n	80028b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d11b      	bne.n	800284e <HAL_SPI_TransmitReceive+0x176>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_SPI_TransmitReceive+0x176>
 8002820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d113      	bne.n	800284e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	1c9a      	adds	r2, r3, #2
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d119      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x1b8>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d014      	beq.n	8002890 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	b292      	uxth	r2, r2
 8002872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800288c:	2301      	movs	r3, #1
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002890:	f7fe ff42 	bl	8001718 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800289c:	429a      	cmp	r2, r3
 800289e:	d807      	bhi.n	80028b0 <HAL_SPI_TransmitReceive+0x1d8>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a6:	d003      	beq.n	80028b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028ae:	e0a7      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1a6      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x130>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1a1      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x130>
 80028c4:	e07c      	b.n	80029c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x1fc>
 80028ce:	8b7b      	ldrh	r3, [r7, #26]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d16b      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028fa:	e057      	b.n	80029ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d11c      	bne.n	8002944 <HAL_SPI_TransmitReceive+0x26c>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x26c>
 8002914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d114      	bne.n	8002944 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d119      	bne.n	8002986 <HAL_SPI_TransmitReceive+0x2ae>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d014      	beq.n	8002986 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002982:	2301      	movs	r3, #1
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002986:	f7fe fec7 	bl	8001718 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002992:	429a      	cmp	r2, r3
 8002994:	d803      	bhi.n	800299e <HAL_SPI_TransmitReceive+0x2c6>
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_TransmitReceive+0x2cc>
 800299e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d103      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029aa:	e029      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1a2      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x224>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d19d      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f893 	bl	8002af0 <SPI_EndRxTxTransaction>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029dc:	e010      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	e000      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3730      	adds	r7, #48	; 0x30
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2c:	e04c      	b.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d048      	beq.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a36:	f7fe fe6f 	bl	8001718 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d902      	bls.n	8002a4c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13d      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a64:	d111      	bne.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6e:	d004      	beq.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d107      	bne.n	8002a8a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d10f      	bne.n	8002ab4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e00f      	b.n	8002ae8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d1a3      	bne.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <SPI_EndRxTxTransaction+0x7c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <SPI_EndRxTxTransaction+0x80>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0d5b      	lsrs	r3, r3, #21
 8002b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d112      	bne.n	8002b42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f7ff ff78 	bl	8002a1c <SPI_WaitFlagStateUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d0f2      	beq.n	8002b42 <SPI_EndRxTxTransaction+0x52>
 8002b5c:	e000      	b.n	8002b60 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b5e:	bf00      	nop
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	165e9f81 	.word	0x165e9f81

08002b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e03f      	b.n	8002c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe f908 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2224      	movs	r2, #36	; 0x24
 8002ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f90b 	bl	8002dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b088      	sub	sp, #32
 8002c12:	af02      	add	r7, sp, #8
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	f040 8083 	bne.w	8002d36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x2e>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07b      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Transmit+0x40>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e074      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fd58 	bl	8001718 <HAL_GetTick>
 8002c68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	88fa      	ldrh	r2, [r7, #6]
 8002c74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c7e:	e042      	b.n	8002d06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c96:	d122      	bne.n	8002cde <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f84c 	bl	8002d40 <UART_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e042      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e017      	b.n	8002d06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	e013      	b.n	8002d06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f829 	bl	8002d40 <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e01f      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	60ba      	str	r2, [r7, #8]
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1b7      	bne.n	8002c80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2200      	movs	r2, #0
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f810 	bl	8002d40 <UART_WaitOnFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e006      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d50:	e02c      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d028      	beq.n	8002dac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d60:	f7fe fcda 	bl	8001718 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d21d      	bcs.n	8002dac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e00f      	b.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d0c3      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e16:	f023 030c 	bic.w	r3, r3, #12
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e42:	f040 818b 	bne.w	800315c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4ac1      	ldr	r2, [pc, #772]	; (8003150 <UART_SetConfig+0x37c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d005      	beq.n	8002e5c <UART_SetConfig+0x88>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4abf      	ldr	r2, [pc, #764]	; (8003154 <UART_SetConfig+0x380>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	f040 80bd 	bne.w	8002fd6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7ff fbc4 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8002e60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	461d      	mov	r5, r3
 8002e66:	f04f 0600 	mov.w	r6, #0
 8002e6a:	46a8      	mov	r8, r5
 8002e6c:	46b1      	mov	r9, r6
 8002e6e:	eb18 0308 	adds.w	r3, r8, r8
 8002e72:	eb49 0409 	adc.w	r4, r9, r9
 8002e76:	4698      	mov	r8, r3
 8002e78:	46a1      	mov	r9, r4
 8002e7a:	eb18 0805 	adds.w	r8, r8, r5
 8002e7e:	eb49 0906 	adc.w	r9, r9, r6
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e96:	4688      	mov	r8, r1
 8002e98:	4691      	mov	r9, r2
 8002e9a:	eb18 0005 	adds.w	r0, r8, r5
 8002e9e:	eb49 0106 	adc.w	r1, r9, r6
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	f04f 0600 	mov.w	r6, #0
 8002eac:	196b      	adds	r3, r5, r5
 8002eae:	eb46 0406 	adc.w	r4, r6, r6
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	f7fd f997 	bl	80001e8 <__aeabi_uldivmod>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4ba5      	ldr	r3, [pc, #660]	; (8003158 <UART_SetConfig+0x384>)
 8002ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	461d      	mov	r5, r3
 8002ed0:	f04f 0600 	mov.w	r6, #0
 8002ed4:	46a9      	mov	r9, r5
 8002ed6:	46b2      	mov	sl, r6
 8002ed8:	eb19 0309 	adds.w	r3, r9, r9
 8002edc:	eb4a 040a 	adc.w	r4, sl, sl
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	46a2      	mov	sl, r4
 8002ee4:	eb19 0905 	adds.w	r9, r9, r5
 8002ee8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002efc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f00:	4689      	mov	r9, r1
 8002f02:	4692      	mov	sl, r2
 8002f04:	eb19 0005 	adds.w	r0, r9, r5
 8002f08:	eb4a 0106 	adc.w	r1, sl, r6
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	461d      	mov	r5, r3
 8002f12:	f04f 0600 	mov.w	r6, #0
 8002f16:	196b      	adds	r3, r5, r5
 8002f18:	eb46 0406 	adc.w	r4, r6, r6
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	f7fd f962 	bl	80001e8 <__aeabi_uldivmod>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b8b      	ldr	r3, [pc, #556]	; (8003158 <UART_SetConfig+0x384>)
 8002f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2164      	movs	r1, #100	; 0x64
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a86      	ldr	r2, [pc, #536]	; (8003158 <UART_SetConfig+0x384>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f4c:	4498      	add	r8, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	461d      	mov	r5, r3
 8002f52:	f04f 0600 	mov.w	r6, #0
 8002f56:	46a9      	mov	r9, r5
 8002f58:	46b2      	mov	sl, r6
 8002f5a:	eb19 0309 	adds.w	r3, r9, r9
 8002f5e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f62:	4699      	mov	r9, r3
 8002f64:	46a2      	mov	sl, r4
 8002f66:	eb19 0905 	adds.w	r9, r9, r5
 8002f6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f82:	4689      	mov	r9, r1
 8002f84:	4692      	mov	sl, r2
 8002f86:	eb19 0005 	adds.w	r0, r9, r5
 8002f8a:	eb4a 0106 	adc.w	r1, sl, r6
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	461d      	mov	r5, r3
 8002f94:	f04f 0600 	mov.w	r6, #0
 8002f98:	196b      	adds	r3, r5, r5
 8002f9a:	eb46 0406 	adc.w	r4, r6, r6
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	f7fd f921 	bl	80001e8 <__aeabi_uldivmod>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	461a      	mov	r2, r3
 8002fac:	4b6a      	ldr	r3, [pc, #424]	; (8003158 <UART_SetConfig+0x384>)
 8002fae:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2164      	movs	r1, #100	; 0x64
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	3332      	adds	r3, #50	; 0x32
 8002fc0:	4a65      	ldr	r2, [pc, #404]	; (8003158 <UART_SetConfig+0x384>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	f003 0207 	and.w	r2, r3, #7
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4442      	add	r2, r8
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e26f      	b.n	80034b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fd6:	f7ff faf3 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8002fda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	461d      	mov	r5, r3
 8002fe0:	f04f 0600 	mov.w	r6, #0
 8002fe4:	46a8      	mov	r8, r5
 8002fe6:	46b1      	mov	r9, r6
 8002fe8:	eb18 0308 	adds.w	r3, r8, r8
 8002fec:	eb49 0409 	adc.w	r4, r9, r9
 8002ff0:	4698      	mov	r8, r3
 8002ff2:	46a1      	mov	r9, r4
 8002ff4:	eb18 0805 	adds.w	r8, r8, r5
 8002ff8:	eb49 0906 	adc.w	r9, r9, r6
 8002ffc:	f04f 0100 	mov.w	r1, #0
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003008:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800300c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003010:	4688      	mov	r8, r1
 8003012:	4691      	mov	r9, r2
 8003014:	eb18 0005 	adds.w	r0, r8, r5
 8003018:	eb49 0106 	adc.w	r1, r9, r6
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	461d      	mov	r5, r3
 8003022:	f04f 0600 	mov.w	r6, #0
 8003026:	196b      	adds	r3, r5, r5
 8003028:	eb46 0406 	adc.w	r4, r6, r6
 800302c:	461a      	mov	r2, r3
 800302e:	4623      	mov	r3, r4
 8003030:	f7fd f8da 	bl	80001e8 <__aeabi_uldivmod>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	461a      	mov	r2, r3
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <UART_SetConfig+0x384>)
 800303c:	fba3 2302 	umull	r2, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	461d      	mov	r5, r3
 800304a:	f04f 0600 	mov.w	r6, #0
 800304e:	46a9      	mov	r9, r5
 8003050:	46b2      	mov	sl, r6
 8003052:	eb19 0309 	adds.w	r3, r9, r9
 8003056:	eb4a 040a 	adc.w	r4, sl, sl
 800305a:	4699      	mov	r9, r3
 800305c:	46a2      	mov	sl, r4
 800305e:	eb19 0905 	adds.w	r9, r9, r5
 8003062:	eb4a 0a06 	adc.w	sl, sl, r6
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003072:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003076:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800307a:	4689      	mov	r9, r1
 800307c:	4692      	mov	sl, r2
 800307e:	eb19 0005 	adds.w	r0, r9, r5
 8003082:	eb4a 0106 	adc.w	r1, sl, r6
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	461d      	mov	r5, r3
 800308c:	f04f 0600 	mov.w	r6, #0
 8003090:	196b      	adds	r3, r5, r5
 8003092:	eb46 0406 	adc.w	r4, r6, r6
 8003096:	461a      	mov	r2, r3
 8003098:	4623      	mov	r3, r4
 800309a:	f7fd f8a5 	bl	80001e8 <__aeabi_uldivmod>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <UART_SetConfig+0x384>)
 80030a6:	fba3 1302 	umull	r1, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2164      	movs	r1, #100	; 0x64
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <UART_SetConfig+0x384>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c6:	4498      	add	r8, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	461d      	mov	r5, r3
 80030cc:	f04f 0600 	mov.w	r6, #0
 80030d0:	46a9      	mov	r9, r5
 80030d2:	46b2      	mov	sl, r6
 80030d4:	eb19 0309 	adds.w	r3, r9, r9
 80030d8:	eb4a 040a 	adc.w	r4, sl, sl
 80030dc:	4699      	mov	r9, r3
 80030de:	46a2      	mov	sl, r4
 80030e0:	eb19 0905 	adds.w	r9, r9, r5
 80030e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80030e8:	f04f 0100 	mov.w	r1, #0
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030fc:	4689      	mov	r9, r1
 80030fe:	4692      	mov	sl, r2
 8003100:	eb19 0005 	adds.w	r0, r9, r5
 8003104:	eb4a 0106 	adc.w	r1, sl, r6
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	461d      	mov	r5, r3
 800310e:	f04f 0600 	mov.w	r6, #0
 8003112:	196b      	adds	r3, r5, r5
 8003114:	eb46 0406 	adc.w	r4, r6, r6
 8003118:	461a      	mov	r2, r3
 800311a:	4623      	mov	r3, r4
 800311c:	f7fd f864 	bl	80001e8 <__aeabi_uldivmod>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	461a      	mov	r2, r3
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <UART_SetConfig+0x384>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	2164      	movs	r1, #100	; 0x64
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3332      	adds	r3, #50	; 0x32
 800313a:	4a07      	ldr	r2, [pc, #28]	; (8003158 <UART_SetConfig+0x384>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0207 	and.w	r2, r3, #7
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4442      	add	r2, r8
 800314c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800314e:	e1b2      	b.n	80034b6 <UART_SetConfig+0x6e2>
 8003150:	40011000 	.word	0x40011000
 8003154:	40011400 	.word	0x40011400
 8003158:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4ad7      	ldr	r2, [pc, #860]	; (80034c0 <UART_SetConfig+0x6ec>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d005      	beq.n	8003172 <UART_SetConfig+0x39e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4ad6      	ldr	r2, [pc, #856]	; (80034c4 <UART_SetConfig+0x6f0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 80d1 	bne.w	8003314 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003172:	f7ff fa39 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8003176:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	469a      	mov	sl, r3
 800317c:	f04f 0b00 	mov.w	fp, #0
 8003180:	46d0      	mov	r8, sl
 8003182:	46d9      	mov	r9, fp
 8003184:	eb18 0308 	adds.w	r3, r8, r8
 8003188:	eb49 0409 	adc.w	r4, r9, r9
 800318c:	4698      	mov	r8, r3
 800318e:	46a1      	mov	r9, r4
 8003190:	eb18 080a 	adds.w	r8, r8, sl
 8003194:	eb49 090b 	adc.w	r9, r9, fp
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031ac:	4688      	mov	r8, r1
 80031ae:	4691      	mov	r9, r2
 80031b0:	eb1a 0508 	adds.w	r5, sl, r8
 80031b4:	eb4b 0609 	adc.w	r6, fp, r9
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4619      	mov	r1, r3
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	0094      	lsls	r4, r2, #2
 80031cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	461a      	mov	r2, r3
 80031d4:	4623      	mov	r3, r4
 80031d6:	4628      	mov	r0, r5
 80031d8:	4631      	mov	r1, r6
 80031da:	f7fd f805 	bl	80001e8 <__aeabi_uldivmod>
 80031de:	4603      	mov	r3, r0
 80031e0:	460c      	mov	r4, r1
 80031e2:	461a      	mov	r2, r3
 80031e4:	4bb8      	ldr	r3, [pc, #736]	; (80034c8 <UART_SetConfig+0x6f4>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	469b      	mov	fp, r3
 80031f4:	f04f 0c00 	mov.w	ip, #0
 80031f8:	46d9      	mov	r9, fp
 80031fa:	46e2      	mov	sl, ip
 80031fc:	eb19 0309 	adds.w	r3, r9, r9
 8003200:	eb4a 040a 	adc.w	r4, sl, sl
 8003204:	4699      	mov	r9, r3
 8003206:	46a2      	mov	sl, r4
 8003208:	eb19 090b 	adds.w	r9, r9, fp
 800320c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003224:	4689      	mov	r9, r1
 8003226:	4692      	mov	sl, r2
 8003228:	eb1b 0509 	adds.w	r5, fp, r9
 800322c:	eb4c 060a 	adc.w	r6, ip, sl
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4619      	mov	r1, r3
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	f04f 0400 	mov.w	r4, #0
 8003242:	0094      	lsls	r4, r2, #2
 8003244:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003248:	008b      	lsls	r3, r1, #2
 800324a:	461a      	mov	r2, r3
 800324c:	4623      	mov	r3, r4
 800324e:	4628      	mov	r0, r5
 8003250:	4631      	mov	r1, r6
 8003252:	f7fc ffc9 	bl	80001e8 <__aeabi_uldivmod>
 8003256:	4603      	mov	r3, r0
 8003258:	460c      	mov	r4, r1
 800325a:	461a      	mov	r2, r3
 800325c:	4b9a      	ldr	r3, [pc, #616]	; (80034c8 <UART_SetConfig+0x6f4>)
 800325e:	fba3 1302 	umull	r1, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a95      	ldr	r2, [pc, #596]	; (80034c8 <UART_SetConfig+0x6f4>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	4498      	add	r8, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	469b      	mov	fp, r3
 8003282:	f04f 0c00 	mov.w	ip, #0
 8003286:	46d9      	mov	r9, fp
 8003288:	46e2      	mov	sl, ip
 800328a:	eb19 0309 	adds.w	r3, r9, r9
 800328e:	eb4a 040a 	adc.w	r4, sl, sl
 8003292:	4699      	mov	r9, r3
 8003294:	46a2      	mov	sl, r4
 8003296:	eb19 090b 	adds.w	r9, r9, fp
 800329a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b2:	4689      	mov	r9, r1
 80032b4:	4692      	mov	sl, r2
 80032b6:	eb1b 0509 	adds.w	r5, fp, r9
 80032ba:	eb4c 060a 	adc.w	r6, ip, sl
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4619      	mov	r1, r3
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	0094      	lsls	r4, r2, #2
 80032d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032d6:	008b      	lsls	r3, r1, #2
 80032d8:	461a      	mov	r2, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	4628      	mov	r0, r5
 80032de:	4631      	mov	r1, r6
 80032e0:	f7fc ff82 	bl	80001e8 <__aeabi_uldivmod>
 80032e4:	4603      	mov	r3, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b77      	ldr	r3, [pc, #476]	; (80034c8 <UART_SetConfig+0x6f4>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <UART_SetConfig+0x6f4>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4442      	add	r2, r8
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	e0d0      	b.n	80034b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7ff f954 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003318:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	469a      	mov	sl, r3
 800331e:	f04f 0b00 	mov.w	fp, #0
 8003322:	46d0      	mov	r8, sl
 8003324:	46d9      	mov	r9, fp
 8003326:	eb18 0308 	adds.w	r3, r8, r8
 800332a:	eb49 0409 	adc.w	r4, r9, r9
 800332e:	4698      	mov	r8, r3
 8003330:	46a1      	mov	r9, r4
 8003332:	eb18 080a 	adds.w	r8, r8, sl
 8003336:	eb49 090b 	adc.w	r9, r9, fp
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003346:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800334a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800334e:	4688      	mov	r8, r1
 8003350:	4691      	mov	r9, r2
 8003352:	eb1a 0508 	adds.w	r5, sl, r8
 8003356:	eb4b 0609 	adc.w	r6, fp, r9
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	0094      	lsls	r4, r2, #2
 800336e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003372:	008b      	lsls	r3, r1, #2
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	4628      	mov	r0, r5
 800337a:	4631      	mov	r1, r6
 800337c:	f7fc ff34 	bl	80001e8 <__aeabi_uldivmod>
 8003380:	4603      	mov	r3, r0
 8003382:	460c      	mov	r4, r1
 8003384:	461a      	mov	r2, r3
 8003386:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <UART_SetConfig+0x6f4>)
 8003388:	fba3 2302 	umull	r2, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	469b      	mov	fp, r3
 8003396:	f04f 0c00 	mov.w	ip, #0
 800339a:	46d9      	mov	r9, fp
 800339c:	46e2      	mov	sl, ip
 800339e:	eb19 0309 	adds.w	r3, r9, r9
 80033a2:	eb4a 040a 	adc.w	r4, sl, sl
 80033a6:	4699      	mov	r9, r3
 80033a8:	46a2      	mov	sl, r4
 80033aa:	eb19 090b 	adds.w	r9, r9, fp
 80033ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033b2:	f04f 0100 	mov.w	r1, #0
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c6:	4689      	mov	r9, r1
 80033c8:	4692      	mov	sl, r2
 80033ca:	eb1b 0509 	adds.w	r5, fp, r9
 80033ce:	eb4c 060a 	adc.w	r6, ip, sl
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	f04f 0400 	mov.w	r4, #0
 80033e4:	0094      	lsls	r4, r2, #2
 80033e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033ea:	008b      	lsls	r3, r1, #2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	4631      	mov	r1, r6
 80033f4:	f7fc fef8 	bl	80001e8 <__aeabi_uldivmod>
 80033f8:	4603      	mov	r3, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <UART_SetConfig+0x6f4>)
 8003400:	fba3 1302 	umull	r1, r3, r3, r2
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	2164      	movs	r1, #100	; 0x64
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	3332      	adds	r3, #50	; 0x32
 8003412:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <UART_SetConfig+0x6f4>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800341e:	4498      	add	r8, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	469b      	mov	fp, r3
 8003424:	f04f 0c00 	mov.w	ip, #0
 8003428:	46d9      	mov	r9, fp
 800342a:	46e2      	mov	sl, ip
 800342c:	eb19 0309 	adds.w	r3, r9, r9
 8003430:	eb4a 040a 	adc.w	r4, sl, sl
 8003434:	4699      	mov	r9, r3
 8003436:	46a2      	mov	sl, r4
 8003438:	eb19 090b 	adds.w	r9, r9, fp
 800343c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800344c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003450:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003454:	4689      	mov	r9, r1
 8003456:	4692      	mov	sl, r2
 8003458:	eb1b 0509 	adds.w	r5, fp, r9
 800345c:	eb4c 060a 	adc.w	r6, ip, sl
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4619      	mov	r1, r3
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	f04f 0400 	mov.w	r4, #0
 8003472:	0094      	lsls	r4, r2, #2
 8003474:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003478:	008b      	lsls	r3, r1, #2
 800347a:	461a      	mov	r2, r3
 800347c:	4623      	mov	r3, r4
 800347e:	4628      	mov	r0, r5
 8003480:	4631      	mov	r1, r6
 8003482:	f7fc feb1 	bl	80001e8 <__aeabi_uldivmod>
 8003486:	4603      	mov	r3, r0
 8003488:	460c      	mov	r4, r1
 800348a:	461a      	mov	r2, r3
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <UART_SetConfig+0x6f4>)
 800348e:	fba3 1302 	umull	r1, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2164      	movs	r1, #100	; 0x64
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	3332      	adds	r3, #50	; 0x32
 80034a0:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <UART_SetConfig+0x6f4>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4442      	add	r2, r8
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	e7ff      	b.n	80034b6 <UART_SetConfig+0x6e2>
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c0:	40011000 	.word	0x40011000
 80034c4:	40011400 	.word	0x40011400
 80034c8:	51eb851f 	.word	0x51eb851f

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	4e0d      	ldr	r6, [pc, #52]	; (8003504 <__libc_init_array+0x38>)
 80034d0:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d2:	1ba4      	subs	r4, r4, r6
 80034d4:	10a4      	asrs	r4, r4, #2
 80034d6:	2500      	movs	r5, #0
 80034d8:	42a5      	cmp	r5, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	4e0b      	ldr	r6, [pc, #44]	; (800350c <__libc_init_array+0x40>)
 80034de:	4c0c      	ldr	r4, [pc, #48]	; (8003510 <__libc_init_array+0x44>)
 80034e0:	f000 f820 	bl	8003524 <_init>
 80034e4:	1ba4      	subs	r4, r4, r6
 80034e6:	10a4      	asrs	r4, r4, #2
 80034e8:	2500      	movs	r5, #0
 80034ea:	42a5      	cmp	r5, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034f4:	4798      	blx	r3
 80034f6:	3501      	adds	r5, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034fe:	4798      	blx	r3
 8003500:	3501      	adds	r5, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08003648 	.word	0x08003648
 8003508:	08003648 	.word	0x08003648
 800350c:	08003648 	.word	0x08003648
 8003510:	0800364c 	.word	0x0800364c

08003514 <memset>:
 8003514:	4402      	add	r2, r0
 8003516:	4603      	mov	r3, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
