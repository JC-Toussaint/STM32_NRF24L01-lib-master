
Nucleo_L476RG_NRF24L01_VL53L0X_Transmitter_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800c310  0800c310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6a4  0800c6a4  0002032c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6a4  0800c6a4  0001c6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6ac  0800c6ac  0002032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b0  0800c6b0  0001c6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000032c  20000000  0800c6b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  2000032c  0800c9e0  0002032c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800c9e0  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cce  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  0003802a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bca  00000000  00000000  0003d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001673a  00000000  00000000  00065e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f533e  00000000  00000000  0007c564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001718a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc0  00000000  00000000  001718f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000032c 	.word	0x2000032c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2f8 	.word	0x0800c2f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000330 	.word	0x20000330
 80001cc:	0800c2f8 	.word	0x0800c2f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_write>:
	return slidingsum[ch]/NBSAMPLES;
}

// UART2 is connected to st-link
int _write(int file, char *ptr, int len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b29a      	uxth	r2, r3
 8000594:	230a      	movs	r3, #10
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <_write+0x24>)
 800059a:	f004 fc03 	bl	8004da4 <HAL_UART_Transmit>
	return len;
 800059e:	687b      	ldr	r3, [r7, #4]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000400 	.word	0x20000400

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f001 f9fa 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f820 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f91e 	bl	80007f8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80005bc:	f000 f8ae 	bl	800071c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f8ea 	bl	8000798 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005c4:	f000 f86a 	bl	800069c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start ...\r\n");
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x40>)
 80005ca:	f00a fd41 	bl	800b050 <puts>
  VL53L0X_Start(&sensor1);
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <main+0x44>)
 80005d0:	f000 f9ba 	bl	8000948 <VL53L0X_Start>

  if (HAL_SPIEx_FlushRxFifo(&hspi3) != HAL_OK){
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <main+0x48>)
 80005d6:	f004 fb75 	bl	8004cc4 <HAL_SPIEx_FlushRxFifo>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <main+0x38>
	  Error_Handler();
 80005e0:	f000 f9ec 	bl	80009bc <Error_Handler>
  }
  runRadio();
 80005e4:	f000 fb2e 	bl	8000c44 <runRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x3c>
 80005ea:	bf00      	nop
 80005ec:	0800c310 	.word	0x0800c310
 80005f0:	20000484 	.word	0x20000484
 80005f4:	2000039c 	.word	0x2000039c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00a fc94 	bl	800af34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f002 fc25 	bl	8002e6c <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 f9c8 	bl	80009bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fc5c 	bl	8002f18 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000666:	f000 f9a9 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f824 	bl	80036d0 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f995 	bl	80009bc <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	; 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C1_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C1_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C1_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C1_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C1_Init+0x74>)
 80006d8:	f001 fcc8 	bl	800206c <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f000 f96b 	bl	80009bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C1_Init+0x74>)
 80006ea:	f002 fb19 	bl	8002d20 <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f962 	bl	80009bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C1_Init+0x74>)
 80006fc:	f002 fb5b 	bl	8002db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 f959 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000348 	.word	0x20000348
 8000714:	40005400 	.word	0x40005400
 8000718:	00702991 	.word	0x00702991

0800071c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_SPI3_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_SPI3_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_SPI3_Init+0x74>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_SPI3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI3_Init+0x74>)
 8000736:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI3_Init+0x74>)
 800074a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI3_Init+0x74>)
 8000752:	2218      	movs	r2, #24
 8000754:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SPI3_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI3_Init+0x74>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SPI3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI3_Init+0x74>)
 8000776:	2208      	movs	r2, #8
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_SPI3_Init+0x74>)
 800077c:	f003 fe88 	bl	8004490 <HAL_SPI_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f919 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000039c 	.word	0x2000039c
 8000794:	40003c00 	.word	0x40003c00

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007dc:	f004 fa94 	bl	8004d08 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f8e9 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000400 	.word	0x20000400
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <MX_GPIO_Init+0x108>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a3b      	ldr	r2, [pc, #236]	; (8000900 <MX_GPIO_Init+0x108>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_GPIO_Init+0x108>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_GPIO_Init+0x108>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a35      	ldr	r2, [pc, #212]	; (8000900 <MX_GPIO_Init+0x108>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <MX_GPIO_Init+0x108>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x108>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_GPIO_Init+0x108>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x108>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0x108>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a29      	ldr	r2, [pc, #164]	; (8000900 <MX_GPIO_Init+0x108>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0x108>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin|VL_XSHUT_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f240 1103 	movw	r1, #259	; 0x103
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <MX_GPIO_Init+0x10c>)
 8000876:	f001 fbc7 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f001 fbc1 	bl	8002008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <MX_GPIO_Init+0x10c>)
 800089e:	f001 fa09 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin VL_XSHUT_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin|VL_XSHUT_Pin;
 80008a2:	f240 1303 	movw	r3, #259	; 0x103
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_GPIO_Init+0x10c>)
 80008bc:	f001 f9fa 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_GPIO_Init+0x10c>)
 80008d6:	f001 f9ed 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008da:	2320      	movs	r3, #32
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f001 f9de 	bl	8001cb4 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800

08000908 <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b0c2      	sub	sp, #264	; 0x108
 800090c:	af00      	add	r7, sp, #0
 800090e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000916:	6018      	str	r0, [r3, #0]
 8000918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800091c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000920:	6019      	str	r1, [r3, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	char msg[256];
	sprintf(msg,"%s,%d", file,line);
 8000922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800092a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800092e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000932:	f107 0008 	add.w	r0, r7, #8
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	4902      	ldr	r1, [pc, #8]	; (8000944 <_Error_Handler+0x3c>)
 800093c:	f00a fb90 	bl	800b060 <siprintf>
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8000940:	e7fe      	b.n	8000940 <_Error_Handler+0x38>
 8000942:	bf00      	nop
 8000944:	0800c31c 	.word	0x0800c31c

08000948 <VL53L0X_Start>:
	{
	}
	/* USER CODE END Error_Handler_Debug */
}

void VL53L0X_Start(VL53L0X_Dev_t *lidar){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	lidar->I2cDevAddr=0x29; // ADDRESS_DEFAULT;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2229      	movs	r2, #41	; 0x29
 8000954:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	lidar->comms_type=1;    // VL53L0X_COMMS_I2C
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	lidar->comms_speed_khz=100;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2264      	movs	r2, #100	; 0x64
 8000964:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_RESET); //shut down the VL53L0X sensor.
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <VL53L0X_Start+0x68>)
 8000970:	f001 fb4a 	bl	8002008 <HAL_GPIO_WritePin>
	HAL_Delay(100); //100
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f001 f893 	bl	8001aa0 <HAL_Delay>

	HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET); //start up the sensor.
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <VL53L0X_Start+0x68>)
 8000982:	f001 fb41 	bl	8002008 <HAL_GPIO_WritePin>
	HAL_Delay(100);  //24
 8000986:	2064      	movs	r0, #100	; 0x64
 8000988:	f001 f88a 	bl	8001aa0 <HAL_Delay>

	if(!VL53L0X_InitSensor(lidar, VL53L0x_DEFAULT_DEVICE_ADDRESS)) //attempt to initialise it with the necessary settings for normal operation. Returns 0 if fail, 1 if success.
 800098c:	2152      	movs	r1, #82	; 0x52
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f00a f91e 	bl	800abd0 <VL53L0X_InitSensor>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <VL53L0X_Start+0x5a>
	{
		printf("Failed to initialize\r\n");
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <VL53L0X_Start+0x6c>)
 800099c:	f00a fb58 	bl	800b050 <puts>
	}
	else
	{
		printf("Successfully initialized\r\n");
	}
}
 80009a0:	e002      	b.n	80009a8 <VL53L0X_Start+0x60>
		printf("Successfully initialized\r\n");
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <VL53L0X_Start+0x70>)
 80009a4:	f00a fb54 	bl	800b050 <puts>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000800 	.word	0x48000800
 80009b4:	0800c324 	.word	0x0800c324
 80009b8:	0800c33c 	.word	0x0800c33c

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <nRF24_CE_L+0x18>)
 80009d2:	f001 fb19 	bl	8002008 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f001 f862 	bl	8001aa0 <HAL_Delay>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	48000800 	.word	0x48000800

080009e4 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2101      	movs	r1, #1
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <nRF24_CE_H+0x18>)
 80009ee:	f001 fb0b 	bl	8002008 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f001 f854 	bl	8001aa0 <HAL_Delay>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	48000800 	.word	0x48000800

08000a00 <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f001 f849 	bl	8001aa0 <HAL_Delay>
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart2;

void UART_SendChar(char b) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
 8000a22:	1df9      	adds	r1, r7, #7
 8000a24:	23c8      	movs	r3, #200	; 0xc8
 8000a26:	2201      	movs	r2, #1
 8000a28:	4803      	ldr	r0, [pc, #12]	; (8000a38 <UART_SendChar+0x20>)
 8000a2a:	f004 f9bb 	bl	8004da4 <HAL_UART_Transmit>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000400 	.word	0x20000400

08000a3c <UART_SendStr>:

void UART_SendStr(char *string) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fbc3 	bl	80001d0 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	23c8      	movs	r3, #200	; 0xc8
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <UART_SendStr+0x24>)
 8000a54:	f004 f9a6 	bl	8004da4 <HAL_UART_Transmit>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000400 	.word	0x20000400

08000a64 <Toggle_LED>:

void Toggle_LED() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000a68:	2120      	movs	r1, #32
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 fae3 	bl	8002038 <HAL_GPIO_TogglePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <UART_SendBufHex>:
	LL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	e018      	b.n	8000abc <UART_SendBufHex+0x44>
		ch = *buf++;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8000a94:	7b7b      	ldrb	r3, [r7, #13]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <UART_SendBufHex+0x58>)
 8000a9e:	5c9b      	ldrb	r3, [r3, r2]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffb9 	bl	8000a18 <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8000aa6:	7b7b      	ldrb	r3, [r7, #13]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <UART_SendBufHex+0x58>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffb1 	bl	8000a18 <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	81fb      	strh	r3, [r7, #14]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d3e2      	bcc.n	8000a8a <UART_SendBufHex+0x12>
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	0800c358 	.word	0x0800c358

08000ad4 <UART_SendHex8>:
void UART_SendHex8(uint16_t num) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	091b      	lsrs	r3, r3, #4
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f003 030f 	and.w	r3, r3, #15
 8000ae8:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <UART_SendHex8+0x38>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff93 	bl	8000a18 <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f003 030f 	and.w	r3, r3, #15
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <UART_SendHex8+0x38>)
 8000afa:	5cd3      	ldrb	r3, [r2, r3]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff8b 	bl	8000a18 <UART_SendChar>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	0800c358 	.word	0x0800c358

08000b10 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da05      	bge.n	8000b2e <UART_SendInt+0x1e>
		UART_SendChar('-');
 8000b22:	202d      	movs	r0, #45	; 0x2d
 8000b24:	f7ff ff78 	bl	8000a18 <UART_SendChar>
		num *= -1;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <UART_SendInt+0x90>)
 8000b32:	fb83 1302 	smull	r1, r3, r3, r2
 8000b36:	1099      	asrs	r1, r3, #2
 8000b38:	17d3      	asrs	r3, r2, #31
 8000b3a:	1ac9      	subs	r1, r1, r3
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	1ad1      	subs	r1, r2, r3
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	1c59      	adds	r1, r3, #1
 8000b4c:	6179      	str	r1, [r7, #20]
 8000b4e:	3230      	adds	r2, #48	; 0x30
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	3318      	adds	r3, #24
 8000b54:	443b      	add	r3, r7
 8000b56:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <UART_SendInt+0x90>)
 8000b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b62:	1092      	asrs	r2, r2, #2
 8000b64:	17db      	asrs	r3, r3, #31
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	dcde      	bgt.n	8000b2e <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e00a      	b.n	8000b8e <UART_SendInt+0x7e>
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff48 	bl	8000a18 <UART_SendChar>
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	daf1      	bge.n	8000b78 <UART_SendInt+0x68>
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	66666667 	.word	0x66666667

08000ba4 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <nRF24_TransmitPacket+0x94>)
 8000bb2:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000bb4:	f7ff ff08 	bl	80009c8 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 fe76 	bl	80018ae <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000bc2:	f7ff ff0f 	bl	80009e4 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000bc6:	f000 fe2c 	bl	8001822 <nRF24_GetStatus>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f1      	bne.n	8000bc6 <nRF24_TransmitPacket+0x22>
 8000be2:	e000      	b.n	8000be6 <nRF24_TransmitPacket+0x42>
			break;
 8000be4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000be6:	f7ff feef 	bl	80009c8 <nRF24_CE_L>

	if (!wait) {
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e01d      	b.n	8000c30 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <nRF24_TransmitPacket+0x98>)
 8000bf6:	f7ff ff21 	bl	8000a3c <UART_SendStr>
	UART_SendHex8(status);
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff68 	bl	8000ad4 <UART_SendHex8>
	UART_SendStr("] ");
 8000c04:	480e      	ldr	r0, [pc, #56]	; (8000c40 <nRF24_TransmitPacket+0x9c>)
 8000c06:	f7ff ff19 	bl	8000a3c <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000c0a:	f000 fe3b 	bl	8001884 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e009      	b.n	8000c30 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e002      	b.n	8000c30 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000c2a:	f000 fe1b 	bl	8001864 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	000fffff 	.word	0x000fffff
 8000c3c:	0800c36c 	.word	0x0800c36c
 8000c40:	0800c370 	.word	0x0800c370

08000c44 <runRadio>:

#endif // DEMO_TX_



int runRadio(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32F411RE Transmitter is online.\r\n");
 8000c4a:	4872      	ldr	r0, [pc, #456]	; (8000e14 <runRadio+0x1d0>)
 8000c4c:	f7ff fef6 	bl	8000a3c <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 8000c50:	f7ff feba 	bl	80009c8 <nRF24_CE_L>
    Delay_ms(100);
 8000c54:	2064      	movs	r0, #100	; 0x64
 8000c56:	f7ff fed3 	bl	8000a00 <Delay_ms>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8000c5a:	486f      	ldr	r0, [pc, #444]	; (8000e18 <runRadio+0x1d4>)
 8000c5c:	f7ff feee 	bl	8000a3c <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	while (!nRF24_Check()) { // try indefinitely
 8000c60:	e007      	b.n	8000c72 <runRadio+0x2e>
		UART_SendStr("FAIL\r\n");
 8000c62:	486e      	ldr	r0, [pc, #440]	; (8000e1c <runRadio+0x1d8>)
 8000c64:	f7ff feea 	bl	8000a3c <UART_SendStr>
		Toggle_LED();
 8000c68:	f7ff fefc 	bl	8000a64 <Toggle_LED>
		Delay_ms(50);
 8000c6c:	2032      	movs	r0, #50	; 0x32
 8000c6e:	f7ff fec7 	bl	8000a00 <Delay_ms>
	while (!nRF24_Check()) { // try indefinitely
 8000c72:	f000 fc25 	bl	80014c0 <nRF24_Check>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f2      	beq.n	8000c62 <runRadio+0x1e>
	}
	
// #pragma clang diagnostic pop
	UART_SendStr("OK\r\n");
 8000c7c:	4868      	ldr	r0, [pc, #416]	; (8000e20 <runRadio+0x1dc>)
 8000c7e:	f7ff fedd 	bl	8000a3c <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8000c82:	f000 fbd0 	bl	8001426 <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8000c86:	2028      	movs	r0, #40	; 0x28
 8000c88:	f000 fcf5 	bl	8001676 <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8000c8c:	2008      	movs	r0, #8
 8000c8e:	f000 fd90 	bl	80017b2 <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000c92:	200c      	movs	r0, #12
 8000c94:	f000 fcce 	bl	8001634 <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd15 	bl	80016c8 <nRF24_SetAddrWidth>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR[] = { 'E', 'S', 'B' };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 8000c9e:	4961      	ldr	r1, [pc, #388]	; (8000e24 <runRadio+0x1e0>)
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 fd21 	bl	80016e8 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8000ca6:	495f      	ldr	r1, [pc, #380]	; (8000e24 <runRadio+0x1e0>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 fd1d 	bl	80016e8 <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f000 fd64 	bl	800177c <nRF24_SetTXPower>

    // Configure auto retransmit: 10 retransmissions with pause of 2500s in between
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	2009      	movs	r0, #9
 8000cb8:	f000 fceb 	bl	8001692 <nRF24_SetAutoRetr>

    // Enable Auto-ACK for pipe#0 (for ACK packets)
    nRF24_EnableAA(nRF24_PIPE0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 fd93 	bl	80017e8 <nRF24_EnableAA>

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fc49 	bl	800155a <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000cc8:	f000 fddc 	bl	8001884 <nRF24_ClearIRQFlags>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f000 fc65 	bl	800159c <nRF24_SetDynamicPayloadLength>
	nRF24_SetPayloadWithAck(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f000 fc8c 	bl	80015f0 <nRF24_SetPayloadWithAck>


	// Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f000 fc1f 	bl	800151c <nRF24_SetPowerMode>


    // Some variables
    uint32_t packets_lost = 0; // global counter of lost packets
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
    uint8_t otx_plos_cnt; // lost packet count
	uint8_t otx_arc_cnt; // retransmit count


    // The main loop
    j = 0;
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <runRadio+0x1e4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    while (1) {
// #pragma clang diagnostic pop

		payload_length = 4;
 8000ce8:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <runRadio+0x1e8>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	701a      	strb	r2, [r3, #0]

		uint32_t distance=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
		int status=VL53L0X_GetDistance(&sensor1, &distance);
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	484d      	ldr	r0, [pc, #308]	; (8000e30 <runRadio+0x1ec>)
 8000cfa:	f004 fd7f 	bl	80057fc <VL53L0X_GetDistance>
 8000cfe:	6138      	str	r0, [r7, #16]
        printf("transmit distance : %lu\n", distance);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4619      	mov	r1, r3
 8000d04:	484b      	ldr	r0, [pc, #300]	; (8000e34 <runRadio+0x1f0>)
 8000d06:	f00a f91d 	bl	800af44 <iprintf>

        FloatHex fh;
        fh.u32 = distance;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	607b      	str	r3, [r7, #4]

		// Prepare data packet
    	for (i = 0; i < payload_length; i++) {
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <runRadio+0x1f4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	e00e      	b.n	8000d34 <runRadio+0xf0>
    		nRF24_payload[i] = (uint8_t) fh.u8[i];
 8000d16:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <runRadio+0x1f4>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <runRadio+0x1f4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3218      	adds	r2, #24
 8000d20:	443a      	add	r2, r7
 8000d22:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8000d26:	4a45      	ldr	r2, [pc, #276]	; (8000e3c <runRadio+0x1f8>)
 8000d28:	54d1      	strb	r1, [r2, r3]
    	for (i = 0; i < payload_length; i++) {
 8000d2a:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <runRadio+0x1f4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a41      	ldr	r2, [pc, #260]	; (8000e38 <runRadio+0x1f4>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <runRadio+0x1e8>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <runRadio+0x1f4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d8e9      	bhi.n	8000d16 <runRadio+0xd2>
    	}

    	// Print a payload
    	UART_SendStr("PAYLOAD:>");
 8000d42:	483f      	ldr	r0, [pc, #252]	; (8000e40 <runRadio+0x1fc>)
 8000d44:	f7ff fe7a 	bl	8000a3c <UART_SendStr>
    	UART_SendBufHex((char *)nRF24_payload, payload_length);
 8000d48:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <runRadio+0x1e8>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	483a      	ldr	r0, [pc, #232]	; (8000e3c <runRadio+0x1f8>)
 8000d52:	f7ff fe91 	bl	8000a78 <UART_SendBufHex>
    	UART_SendStr("< ... TX: ");
 8000d56:	483b      	ldr	r0, [pc, #236]	; (8000e44 <runRadio+0x200>)
 8000d58:	f7ff fe70 	bl	8000a3c <UART_SendStr>

    	// Transmit a packet
    	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 8000d5c:	4b33      	ldr	r3, [pc, #204]	; (8000e2c <runRadio+0x1e8>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4836      	ldr	r0, [pc, #216]	; (8000e3c <runRadio+0x1f8>)
 8000d64:	f7ff ff1e 	bl	8000ba4 <nRF24_TransmitPacket>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <runRadio+0x204>)
 8000d6e:	701a      	strb	r2, [r3, #0]
		otx = nRF24_GetRetransmitCounters();
 8000d70:	f000 fd5f 	bl	8001832 <nRF24_GetRetransmitCounters>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
		nRF24_ReadPayloadDpl(nRF24_payload, &payload_length );
 8000d78:	492c      	ldr	r1, [pc, #176]	; (8000e2c <runRadio+0x1e8>)
 8000d7a:	4830      	ldr	r0, [pc, #192]	; (8000e3c <runRadio+0x1f8>)
 8000d7c:	f000 fe04 	bl	8001988 <nRF24_ReadPayloadDpl>
		otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	091b      	lsrs	r3, r3, #4
 8000d84:	73bb      	strb	r3, [r7, #14]
		otx_arc_cnt  = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	737b      	strb	r3, [r7, #13]
    	switch (tx_res) {
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <runRadio+0x204>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d00e      	beq.n	8000db4 <runRadio+0x170>
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	dc16      	bgt.n	8000dc8 <runRadio+0x184>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d002      	beq.n	8000da4 <runRadio+0x160>
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d004      	beq.n	8000dac <runRadio+0x168>
 8000da2:	e011      	b.n	8000dc8 <runRadio+0x184>
			case nRF24_TX_SUCCESS:
				UART_SendStr("OK");
 8000da4:	4829      	ldr	r0, [pc, #164]	; (8000e4c <runRadio+0x208>)
 8000da6:	f7ff fe49 	bl	8000a3c <UART_SendStr>
				break;
 8000daa:	e011      	b.n	8000dd0 <runRadio+0x18c>
			case nRF24_TX_TIMEOUT:
				UART_SendStr("TIMEOUT");
 8000dac:	4828      	ldr	r0, [pc, #160]	; (8000e50 <runRadio+0x20c>)
 8000dae:	f7ff fe45 	bl	8000a3c <UART_SendStr>
				break;
 8000db2:	e00d      	b.n	8000dd0 <runRadio+0x18c>
			case nRF24_TX_MAXRT:
				UART_SendStr("MAX RETRANSMIT");
 8000db4:	4827      	ldr	r0, [pc, #156]	; (8000e54 <runRadio+0x210>)
 8000db6:	f7ff fe41 	bl	8000a3c <UART_SendStr>
				packets_lost += otx_plos_cnt;
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]
				nRF24_ResetPLOS();
 8000dc2:	f000 fd3e 	bl	8001842 <nRF24_ResetPLOS>
				break;
 8000dc6:	e003      	b.n	8000dd0 <runRadio+0x18c>
			default:
				UART_SendStr("ERROR");
 8000dc8:	4823      	ldr	r0, [pc, #140]	; (8000e58 <runRadio+0x214>)
 8000dca:	f7ff fe37 	bl	8000a3c <UART_SendStr>
				break;
 8000dce:	bf00      	nop
		}
		UART_SendStr("   ACK_PAYLOAD=>");
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <runRadio+0x218>)
 8000dd2:	f7ff fe33 	bl	8000a3c <UART_SendStr>
    	UART_SendBufHex((char *) nRF24_payload, payload_length);
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <runRadio+0x1e8>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4817      	ldr	r0, [pc, #92]	; (8000e3c <runRadio+0x1f8>)
 8000de0:	f7ff fe4a 	bl	8000a78 <UART_SendBufHex>
    	UART_SendStr("<   ARC=");
 8000de4:	481e      	ldr	r0, [pc, #120]	; (8000e60 <runRadio+0x21c>)
 8000de6:	f7ff fe29 	bl	8000a3c <UART_SendStr>
		UART_SendInt(otx_arc_cnt);
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe8f 	bl	8000b10 <UART_SendInt>
		UART_SendStr(" LOST=");
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <runRadio+0x220>)
 8000df4:	f7ff fe22 	bl	8000a3c <UART_SendStr>
		UART_SendInt(packets_lost);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe88 	bl	8000b10 <UART_SendInt>
		UART_SendStr("\r\n");
 8000e00:	4819      	ldr	r0, [pc, #100]	; (8000e68 <runRadio+0x224>)
 8000e02:	f7ff fe1b 	bl	8000a3c <UART_SendStr>

    	// Wait ~0.5s
    	Delay_ms(500);
 8000e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0a:	f7ff fdf9 	bl	8000a00 <Delay_ms>
		Toggle_LED();
 8000e0e:	f7ff fe29 	bl	8000a64 <Toggle_LED>
    while (1) {
 8000e12:	e769      	b.n	8000ce8 <runRadio+0xa4>
 8000e14:	0800c374 	.word	0x0800c374
 8000e18:	0800c39c 	.word	0x0800c39c
 8000e1c:	0800c3b0 	.word	0x0800c3b0
 8000e20:	0800c3b8 	.word	0x0800c3b8
 8000e24:	0800c5b0 	.word	0x0800c5b0
 8000e28:	20000608 	.word	0x20000608
 8000e2c:	2000060c 	.word	0x2000060c
 8000e30:	20000484 	.word	0x20000484
 8000e34:	0800c3c0 	.word	0x0800c3c0
 8000e38:	20000604 	.word	0x20000604
 8000e3c:	200005e4 	.word	0x200005e4
 8000e40:	0800c3dc 	.word	0x0800c3dc
 8000e44:	0800c3e8 	.word	0x0800c3e8
 8000e48:	2000060d 	.word	0x2000060d
 8000e4c:	0800c3f4 	.word	0x0800c3f4
 8000e50:	0800c3f8 	.word	0x0800c3f8
 8000e54:	0800c400 	.word	0x0800c400
 8000e58:	0800c410 	.word	0x0800c410
 8000e5c:	0800c418 	.word	0x0800c418
 8000e60:	0800c42c 	.word	0x0800c42c
 8000e64:	0800c438 	.word	0x0800c438
 8000e68:	0800c440 	.word	0x0800c440

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ac      	sub	sp, #176	; 0xb0
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2288      	movs	r2, #136	; 0x88
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00a f82d 	bl	800af34 <memset>
  if(hi2c->Instance==I2C1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_I2C_MspInit+0xb0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13b      	bne.n	8000f5c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ee4:	2340      	movs	r3, #64	; 0x40
 8000ee6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f002 fe11 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000efc:	f7ff fd5e 	bl	80009bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f32:	2304      	movs	r3, #4
 8000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_I2C_MspInit+0xb8>)
 8000f40:	f000 feb8 	bl	8001cb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_I2C_MspInit+0xb4>)
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37b0      	adds	r7, #176	; 0xb0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40005400 	.word	0x40005400
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_SPI_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_SPI_MspInit+0x80>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_SPI_MspInit+0x84>)
 8000fe0:	f000 fe68 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000800 	.word	0x48000800

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ac      	sub	sp, #176	; 0xb0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2288      	movs	r2, #136	; 0x88
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f009 ff8b 	bl	800af34 <memset>
  if(huart->Instance==USART2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_UART_MspInit+0xb0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d13b      	bne.n	80010a0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001028:	2302      	movs	r3, #2
 800102a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800102c:	2300      	movs	r3, #0
 800102e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fd6f 	bl	8003b18 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001040:	f7ff fcbc 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001044:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_UART_MspInit+0xb4>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_UART_MspInit+0xb4>)
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	6593      	str	r3, [r2, #88]	; 0x58
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_UART_MspInit+0xb4>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <HAL_UART_MspInit+0xb4>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_UART_MspInit+0xb4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_UART_MspInit+0xb4>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001074:	230c      	movs	r3, #12
 8001076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108c:	2307      	movs	r3, #7
 800108e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f000 fe0a 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	37b0      	adds	r7, #176	; 0xb0
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 fcb0 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e00a      	b.n	800112c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001116:	f3af 8000 	nop.w
 800111a:	4601      	mov	r1, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <_read+0x12>
	}

return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:
	}
	return len;
}

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f009 fe74 	bl	800aec4 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20018000 	.word	0x20018000
 8001208:	00000400 	.word	0x00000400
 800120c:	20000610 	.word	0x20000610
 8001210:	20000628 	.word	0x20000628

08001214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff ffea 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	; (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <LoopForever+0xe>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	; (8001284 <LoopForever+0x16>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f009 fe33 	bl	800aed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126a:	f7ff f99f 	bl	80005ac <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001270:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	2000032c 	.word	0x2000032c
  ldr r2, =_sidata
 800127c:	0800c6b4 	.word	0x0800c6b4
  ldr r2, =_sbss
 8001280:	2000032c 	.word	0x2000032c
  ldr r4, =_ebss
 8001284:	20000628 	.word	0x20000628

08001288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_2_IRQHandler>
	...

0800128c <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2102      	movs	r1, #2
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <nRF24_CSN_L+0x18>)
 8001296:	f000 feb7 	bl	8002008 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 fc00 	bl	8001aa0 <HAL_Delay>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800

080012a8 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2102      	movs	r1, #2
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <nRF24_CSN_H+0x18>)
 80012b2:	f000 fea9 	bl	8002008 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f000 fbf2 	bl	8001aa0 <HAL_Delay>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	48000800 	.word	0x48000800

080012c4 <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 80012ce:	f107 020f 	add.w	r2, r7, #15
 80012d2:	1df9      	adds	r1, r7, #7
 80012d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <nRF24_LL_RW+0x34>)
 80012de:	f003 f97a 	bl	80045d6 <HAL_SPI_TransmitReceive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <nRF24_LL_RW+0x28>
        Error_Handler();
 80012e8:	f7ff fb68 	bl	80009bc <Error_Handler>
    return result;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000039c 	.word	0x2000039c

080012fc <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8001306:	f7ff ffc1 	bl	800128c <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd6 	bl	80012c4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8001318:	20ff      	movs	r0, #255	; 0xff
 800131a:	f7ff ffd3 	bl	80012c4 <nRF24_LL_RW>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8001322:	f7ff ffc1 	bl	80012a8 <nRF24_CSN_H>

	return value;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	460a      	mov	r2, r1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8001340:	f7ff ffa4 	bl	800128c <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b1f      	cmp	r3, #31
 8001348:	d810      	bhi.n	800136c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f043 0320 	orr.w	r3, r3, #32
 8001358:	b25b      	sxtb	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffb1 	bl	80012c4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ffad 	bl	80012c4 <nRF24_LL_RW>
 800136a:	e013      	b.n	8001394 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffa8 	bl	80012c4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2be1      	cmp	r3, #225	; 0xe1
 8001378:	d00c      	beq.n	8001394 <nRF24_WriteReg+0x64>
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2be2      	cmp	r3, #226	; 0xe2
 800137e:	d009      	beq.n	8001394 <nRF24_WriteReg+0x64>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2be3      	cmp	r3, #227	; 0xe3
 8001384:	d006      	beq.n	8001394 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d003      	beq.n	8001394 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff98 	bl	80012c4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8001394:	f7ff ff88 	bl	80012a8 <nRF24_CSN_H>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80013b0:	f7ff ff6c 	bl	800128c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff84 	bl	80012c4 <nRF24_LL_RW>
	while (count--) {
 80013bc:	e007      	b.n	80013ce <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80013be:	683c      	ldr	r4, [r7, #0]
 80013c0:	1c63      	adds	r3, r4, #1
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	20ff      	movs	r0, #255	; 0xff
 80013c6:	f7ff ff7d 	bl	80012c4 <nRF24_LL_RW>
 80013ca:	4603      	mov	r3, r0
 80013cc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	71ba      	strb	r2, [r7, #6]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f2      	bne.n	80013be <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80013d8:	f7ff ff66 	bl	80012a8 <nRF24_CSN_H>
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80013f4:	f7ff ff4a 	bl	800128c <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff62 	bl	80012c4 <nRF24_LL_RW>
	while (count--) {
 8001400:	e006      	b.n	8001410 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	603a      	str	r2, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff5a 	bl	80012c4 <nRF24_LL_RW>
	while (count--) {
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	71ba      	strb	r2, [r7, #6]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f3      	bne.n	8001402 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800141a:	f7ff ff45 	bl	80012a8 <nRF24_CSN_H>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800142a:	2108      	movs	r1, #8
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff ff7f 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8001432:	213f      	movs	r1, #63	; 0x3f
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ff7b 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800143a:	2103      	movs	r1, #3
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff ff77 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8001442:	2103      	movs	r1, #3
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff ff73 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800144a:	2103      	movs	r1, #3
 800144c:	2004      	movs	r0, #4
 800144e:	f7ff ff6f 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8001452:	2102      	movs	r1, #2
 8001454:	2005      	movs	r0, #5
 8001456:	f7ff ff6b 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800145a:	210e      	movs	r1, #14
 800145c:	2006      	movs	r0, #6
 800145e:	f7ff ff67 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8001462:	2100      	movs	r1, #0
 8001464:	2007      	movs	r0, #7
 8001466:	f7ff ff63 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800146a:	2100      	movs	r1, #0
 800146c:	2011      	movs	r0, #17
 800146e:	f7ff ff5f 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8001472:	2100      	movs	r1, #0
 8001474:	2012      	movs	r0, #18
 8001476:	f7ff ff5b 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800147a:	2100      	movs	r1, #0
 800147c:	2013      	movs	r0, #19
 800147e:	f7ff ff57 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8001482:	2100      	movs	r1, #0
 8001484:	2014      	movs	r0, #20
 8001486:	f7ff ff53 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800148a:	2100      	movs	r1, #0
 800148c:	2015      	movs	r0, #21
 800148e:	f7ff ff4f 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8001492:	2100      	movs	r1, #0
 8001494:	2016      	movs	r0, #22
 8001496:	f7ff ff4b 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800149a:	2100      	movs	r1, #0
 800149c:	201c      	movs	r0, #28
 800149e:	f7ff ff47 	bl	8001330 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80014a2:	2100      	movs	r1, #0
 80014a4:	201d      	movs	r0, #29
 80014a6:	f7ff ff43 	bl	8001330 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80014aa:	f000 f9e3 	bl	8001874 <nRF24_FlushRX>
	nRF24_FlushTX();
 80014ae:	f000 f9d9 	bl	8001864 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80014b2:	f000 f9e7 	bl	8001884 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80014b6:	f7ff fef7 	bl	80012a8 <nRF24_CSN_H>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <nRF24_Check+0x58>)
 80014c8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80014ca:	2205      	movs	r2, #5
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	2030      	movs	r0, #48	; 0x30
 80014d0:	f7ff ff88 	bl	80013e4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80014d4:	463b      	mov	r3, r7
 80014d6:	2205      	movs	r2, #5
 80014d8:	4619      	mov	r1, r3
 80014da:	2010      	movs	r0, #16
 80014dc:	f7ff ff60 	bl	80013a0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e00f      	b.n	8001506 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	3310      	adds	r3, #16
 80014ea:	443b      	add	r3, r7
 80014ec:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <nRF24_Check+0x40>
 80014fc:	2300      	movs	r3, #0
 80014fe:	e006      	b.n	800150e <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d9ec      	bls.n	80014e6 <nRF24_Check+0x26>
	}

	return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	0800c444 	.word	0x0800c444

0800151c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fee8 	bl	80012fc <nRF24_ReadReg>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d104      	bne.n	8001540 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e003      	b.n	8001548 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	4619      	mov	r1, r3
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff feef 	bl	8001330 <nRF24_WriteReg>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fec9 	bl	80012fc <nRF24_ReadReg>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	b25a      	sxtb	r2, r3
 8001580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001584:	4313      	orrs	r3, r2
 8001586:	b25b      	sxtb	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	4619      	mov	r1, r3
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fece 	bl	8001330 <nRF24_WriteReg>
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80015a6:	201d      	movs	r0, #29
 80015a8:	f7ff fea8 	bl	80012fc <nRF24_ReadReg>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	201d      	movs	r0, #29
 80015c2:	f7ff feb5 	bl	8001330 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 80015c6:	211f      	movs	r1, #31
 80015c8:	201c      	movs	r0, #28
 80015ca:	f7ff feb1 	bl	8001330 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 80015ce:	e00b      	b.n	80015e8 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	201d      	movs	r0, #29
 80015dc:	f7ff fea8 	bl	8001330 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 80015e0:	2100      	movs	r1, #0
 80015e2:	201c      	movs	r0, #28
 80015e4:	f7ff fea4 	bl	8001330 <nRF24_WriteReg>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80015fa:	201d      	movs	r0, #29
 80015fc:	f7ff fe7e 	bl	80012fc <nRF24_ReadReg>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	201d      	movs	r0, #29
 8001616:	f7ff fe8b 	bl	8001330 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 800161a:	e007      	b.n	800162c <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f023 0302 	bic.w	r3, r3, #2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4619      	mov	r1, r3
 8001626:	201d      	movs	r0, #29
 8001628:	f7ff fe82 	bl	8001330 <nRF24_WriteReg>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fe5c 	bl	80012fc <nRF24_ReadReg>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	f023 030c 	bic.w	r3, r3, #12
 800164e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	b25a      	sxtb	r2, r3
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4313      	orrs	r3, r2
 8001660:	b25b      	sxtb	r3, r3
 8001662:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4619      	mov	r1, r3
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fe61 	bl	8001330 <nRF24_WriteReg>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4619      	mov	r1, r3
 8001684:	2005      	movs	r0, #5
 8001686:	f7ff fe53 	bl	8001330 <nRF24_WriteReg>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	460a      	mov	r2, r1
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	4613      	mov	r3, r2
 80016a0:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	2004      	movs	r0, #4
 80016bc:	f7ff fe38 	bl	8001330 <nRF24_WriteReg>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3b02      	subs	r3, #2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	2003      	movs	r0, #3
 80016dc:	f7ff fe28 	bl	8001330 <nRF24_WriteReg>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d00a      	beq.n	8001710 <nRF24_SetAddr+0x28>
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	dc36      	bgt.n	800176c <nRF24_SetAddr+0x84>
 80016fe:	2b01      	cmp	r3, #1
 8001700:	dc02      	bgt.n	8001708 <nRF24_SetAddr+0x20>
 8001702:	2b00      	cmp	r3, #0
 8001704:	da04      	bge.n	8001710 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8001706:	e031      	b.n	800176c <nRF24_SetAddr+0x84>
 8001708:	3b02      	subs	r3, #2
	switch (pipe) {
 800170a:	2b03      	cmp	r3, #3
 800170c:	d82e      	bhi.n	800176c <nRF24_SetAddr+0x84>
 800170e:	e023      	b.n	8001758 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8001710:	2003      	movs	r0, #3
 8001712:	f7ff fdf3 	bl	80012fc <nRF24_ReadReg>
 8001716:	4603      	mov	r3, r0
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001724:	f7ff fdb2 	bl	800128c <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <nRF24_SetAddr+0x90>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fdc5 	bl	80012c4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	603a      	str	r2, [r7, #0]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fdbe 	bl	80012c4 <nRF24_LL_RW>
			} while (addr_width--);
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	1e5a      	subs	r2, r3, #1
 800174c:	73fa      	strb	r2, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f3      	bne.n	800173a <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8001752:	f7ff fda9 	bl	80012a8 <nRF24_CSN_H>
			break;
 8001756:	e00a      	b.n	800176e <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <nRF24_SetAddr+0x90>)
 800175c:	5cd2      	ldrb	r2, [r2, r3]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f7ff fde3 	bl	8001330 <nRF24_WriteReg>
			break;
 800176a:	e000      	b.n	800176e <nRF24_SetAddr+0x86>
			break;
 800176c:	bf00      	nop
	}
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0800c604 	.word	0x0800c604

0800177c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8001786:	2006      	movs	r0, #6
 8001788:	f7ff fdb8 	bl	80012fc <nRF24_ReadReg>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f023 0306 	bic.w	r3, r3, #6
 8001796:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4313      	orrs	r3, r2
 800179e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2006      	movs	r0, #6
 80017a6:	f7ff fdc3 	bl	8001330 <nRF24_WriteReg>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80017bc:	2006      	movs	r0, #6
 80017be:	f7ff fd9d 	bl	80012fc <nRF24_ReadReg>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80017cc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4619      	mov	r1, r3
 80017da:	2006      	movs	r0, #6
 80017dc:	f7ff fda8 	bl	8001330 <nRF24_WriteReg>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fd82 	bl	80012fc <nRF24_ReadReg>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2201      	movs	r2, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	b25a      	sxtb	r2, r3
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4313      	orrs	r3, r2
 800180c:	b25b      	sxtb	r3, r3
 800180e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	4619      	mov	r1, r3
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fd8b 	bl	8001330 <nRF24_WriteReg>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8001822:	b580      	push	{r7, lr}
 8001824:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8001826:	2007      	movs	r0, #7
 8001828:	f7ff fd68 	bl	80012fc <nRF24_ReadReg>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}

08001832 <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 8001836:	2008      	movs	r0, #8
 8001838:	f7ff fd60 	bl	80012fc <nRF24_ReadReg>
 800183c:	4603      	mov	r3, r0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}

08001842 <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8001848:	2005      	movs	r0, #5
 800184a:	f7ff fd57 	bl	80012fc <nRF24_ReadReg>
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4619      	mov	r1, r3
 8001856:	2005      	movs	r0, #5
 8001858:	f7ff fd6a 	bl	8001330 <nRF24_WriteReg>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8001868:	21ff      	movs	r1, #255	; 0xff
 800186a:	20e1      	movs	r0, #225	; 0xe1
 800186c:	f7ff fd60 	bl	8001330 <nRF24_WriteReg>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8001878:	21ff      	movs	r1, #255	; 0xff
 800187a:	20e2      	movs	r0, #226	; 0xe2
 800187c:	f7ff fd58 	bl	8001330 <nRF24_WriteReg>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800188a:	2007      	movs	r0, #7
 800188c:	f7ff fd36 	bl	80012fc <nRF24_ReadReg>
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800189a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4619      	mov	r1, r3
 80018a0:	2007      	movs	r0, #7
 80018a2:	f7ff fd45 	bl	8001330 <nRF24_WriteReg>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	460b      	mov	r3, r1
 80018b8:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	461a      	mov	r2, r3
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	20a0      	movs	r0, #160	; 0xa0
 80018c2:	f7ff fd8f 	bl	80013e4 <nRF24_WriteMBReg>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80018d4:	f7ff fcda 	bl	800128c <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80018d8:	2060      	movs	r0, #96	; 0x60
 80018da:	f7ff fcf3 	bl	80012c4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80018de:	20ff      	movs	r0, #255	; 0xff
 80018e0:	f7ff fcf0 	bl	80012c4 <nRF24_LL_RW>
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80018e8:	f7ff fcde 	bl	80012a8 <nRF24_CSN_H>

	return value;
 80018ec:	79fb      	ldrb	r3, [r7, #7]

}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8001906:	2007      	movs	r0, #7
 8001908:	f7ff fcf8 	bl	80012fc <nRF24_ReadReg>
 800190c:	4603      	mov	r3, r0
 800190e:	105b      	asrs	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d829      	bhi.n	8001972 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00f      	beq.n	8001944 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8001924:	f7ff ffd3 	bl	80018ce <nRF24_GetRxDplPayloadWidth>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b20      	cmp	r3, #32
 8001936:	d90f      	bls.n	8001958 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 800193e:	f7ff ff99 	bl	8001874 <nRF24_FlushRX>
 8001942:	e009      	b.n	8001958 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <nRF24_ReadPayloadGeneric+0x8c>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fcd6 	bl	80012fc <nRF24_ReadReg>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	68f9      	ldr	r1, [r7, #12]
 8001968:	2061      	movs	r0, #97	; 0x61
 800196a:	f7ff fd19 	bl	80013a0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	e003      	b.n	800197a <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8001978:	23ff      	movs	r3, #255	; 0xff
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	0800c5fc 	.word	0x0800c5fc

08001988 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8001992:	2201      	movs	r2, #1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffae 	bl	80018f8 <nRF24_ReadPayloadGeneric>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_Init+0x3c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_Init+0x3c>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f944 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f80f 	bl	80019e8 <HAL_InitTick>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	e001      	b.n	80019da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d6:	f7ff fa49 	bl	8000e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019da:	79fb      	ldrb	r3, [r7, #7]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40022000 	.word	0x40022000

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d023      	beq.n	8001a44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_InitTick+0x70>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f941 	bl	8001c9a <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d809      	bhi.n	8001a38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f919 	bl	8001c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_InitTick+0x74>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e001      	b.n	8001a48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000614 	.word	0x20000614

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000614 	.word	0x20000614

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff47 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff5c 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffb0 	bl	8001c08 <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e17f      	b.n	8001fc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8171 	beq.w	8001fbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d005      	beq.n	8001cf4 <HAL_GPIO_Init+0x40>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0201 	and.w	r2, r3, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d118      	bne.n	8001d94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	6939      	ldr	r1, [r7, #16]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80ac 	beq.w	8001fbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea8:	d025      	beq.n	8001ef6 <HAL_GPIO_Init+0x242>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x338>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d01f      	beq.n	8001ef2 <HAL_GPIO_Init+0x23e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_GPIO_Init+0x33c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x23a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x340>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x236>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x344>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x232>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_GPIO_Init+0x348>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x22e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4a      	ldr	r2, [pc, #296]	; (8002000 <HAL_GPIO_Init+0x34c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x22a>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e00a      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e008      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x244>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f08:	4937      	ldr	r1, [pc, #220]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f40:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f64:	4a27      	ldr	r2, [pc, #156]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f ae78 	bne.w	8001cc4 <HAL_GPIO_Init+0x10>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	48001000 	.word	0x48001000
 8001ffc:	48001400 	.word	0x48001400
 8002000:	48001800 	.word	0x48001800
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
 8002014:	4613      	mov	r3, r2
 8002016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002018:	787b      	ldrb	r3, [r7, #1]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e002      	b.n	800202c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4013      	ands	r3, r2
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43d9      	mvns	r1, r3
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	400b      	ands	r3, r1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e081      	b.n	8002182 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ff0e 	bl	8000eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2224      	movs	r2, #36	; 0x24
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	e006      	b.n	80020f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d104      	bne.n	8002106 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002104:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69d9      	ldr	r1, [r3, #28]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	460b      	mov	r3, r1
 800219a:	817b      	strh	r3, [r7, #10]
 800219c:	4613      	mov	r3, r2
 800219e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	f040 80da 	bne.w	8002362 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x30>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0d3      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021c4:	f7ff fc60 	bl	8001a88 <HAL_GetTick>
 80021c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2319      	movs	r3, #25
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fb4e 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0be      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2210      	movs	r2, #16
 80021f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2bff      	cmp	r3, #255	; 0xff
 8002216:	d90e      	bls.n	8002236 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	b2da      	uxtb	r2, r3
 8002224:	8979      	ldrh	r1, [r7, #10]
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_I2C_Master_Transmit+0x1e0>)
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fd44 	bl	8002cbc <I2C_TransferConfig>
 8002234:	e06c      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_I2C_Master_Transmit+0x1e0>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fd33 	bl	8002cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002256:	e05b      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6a39      	ldr	r1, [r7, #32]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fb4b 	bl	80028f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e07b      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d034      	beq.n	8002310 <HAL_I2C_Master_Transmit+0x184>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d130      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fadd 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04d      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d90e      	bls.n	80022f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fce7 	bl	8002cbc <I2C_TransferConfig>
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	2300      	movs	r3, #0
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fcd6 	bl	8002cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d19e      	bne.n	8002258 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	6a39      	ldr	r1, [r7, #32]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fb2a 	bl	8002978 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e01a      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_I2C_Master_Transmit+0x1e4>)
 8002342:	400b      	ands	r3, r1
 8002344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002362:	2302      	movs	r3, #2
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	80002000 	.word	0x80002000
 8002370:	fe00e800 	.word	0xfe00e800

08002374 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	460b      	mov	r3, r1
 8002382:	817b      	strh	r3, [r7, #10]
 8002384:	4613      	mov	r3, r2
 8002386:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	f040 80db 	bne.w	800254c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_I2C_Master_Receive+0x30>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e0d4      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ac:	f7ff fb6c 	bl	8001a88 <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2319      	movs	r3, #25
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fa5a 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0bf      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2222      	movs	r2, #34	; 0x22
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2210      	movs	r2, #16
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2bff      	cmp	r3, #255	; 0xff
 80023fe:	d90e      	bls.n	800241e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	b2da      	uxtb	r2, r3
 800240c:	8979      	ldrh	r1, [r7, #10]
 800240e:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_I2C_Master_Receive+0x1e4>)
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fc50 	bl	8002cbc <I2C_TransferConfig>
 800241c:	e06d      	b.n	80024fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_I2C_Master_Receive+0x1e4>)
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fc3f 	bl	8002cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800243e:	e05c      	b.n	80024fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6a39      	ldr	r1, [r7, #32]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fad3 	bl	80029f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e07c      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d034      	beq.n	80024fa <HAL_I2C_Master_Receive+0x186>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d130      	bne.n	80024fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	2200      	movs	r2, #0
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f9e8 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e04d      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2bff      	cmp	r3, #255	; 0xff
 80024ba:	d90e      	bls.n	80024da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fbf2 	bl	8002cbc <I2C_TransferConfig>
 80024d8:	e00f      	b.n	80024fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fbe1 	bl	8002cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d19d      	bne.n	8002440 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	6a39      	ldr	r1, [r7, #32]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fa35 	bl	8002978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e01a      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2220      	movs	r2, #32
 800251e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_I2C_Master_Receive+0x1e8>)
 800252c:	400b      	ands	r3, r1
 800252e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	e000      	b.n	800254e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
  }
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	80002400 	.word	0x80002400
 800255c:	fe00e800 	.word	0xfe00e800

08002560 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	460b      	mov	r3, r1
 8002574:	813b      	strh	r3, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	f040 80f9 	bne.w	800277a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_I2C_Mem_Write+0x34>
 800258e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0ed      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Mem_Write+0x4e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0e6      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b6:	f7ff fa67 	bl	8001a88 <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f955 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d1      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002600:	88f8      	ldrh	r0, [r7, #6]
 8002602:	893a      	ldrh	r2, [r7, #8]
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4603      	mov	r3, r0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8b9 	bl	8002788 <I2C_RequestMemoryWrite>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0a9      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d90e      	bls.n	8002650 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fb37 	bl	8002cbc <I2C_TransferConfig>
 800264e:	e00f      	b.n	8002670 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	8979      	ldrh	r1, [r7, #10]
 8002662:	2300      	movs	r3, #0
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fb26 	bl	8002cbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f93f 	bl	80028f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e07b      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d034      	beq.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d130      	bne.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	2200      	movs	r2, #0
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f8d1 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04d      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2bff      	cmp	r3, #255	; 0xff
 80026e8:	d90e      	bls.n	8002708 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fadb 	bl	8002cbc <I2C_TransferConfig>
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	b2da      	uxtb	r2, r3
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 faca 	bl	8002cbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d19e      	bne.n	8002670 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f91e 	bl	8002978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e01a      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2220      	movs	r2, #32
 800274c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_I2C_Mem_Write+0x224>)
 800275a:	400b      	ands	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	460b      	mov	r3, r1
 800279c:	813b      	strh	r3, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	8979      	ldrh	r1, [r7, #10]
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <I2C_RequestMemoryWrite+0xa4>)
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fa83 	bl	8002cbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f89c 	bl	80028f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e02c      	b.n	8002824 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027d0:	893b      	ldrh	r3, [r7, #8]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
 80027da:	e015      	b.n	8002808 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027dc:	893b      	ldrh	r3, [r7, #8]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f882 	bl	80028f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e012      	b.n	8002824 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027fe:	893b      	ldrh	r3, [r7, #8]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2200      	movs	r2, #0
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f830 	bl	8002878 <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	80002000 	.word	0x80002000

08002830 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b02      	cmp	r3, #2
 8002844:	d103      	bne.n	800284e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d007      	beq.n	800286c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	619a      	str	r2, [r3, #24]
  }
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002888:	e022      	b.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d01e      	beq.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7ff f8f9 	bl	8001a88 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d113      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e00f      	b.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d0cd      	beq.n	800288a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002904:	e02c      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8ea 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e02a      	b.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d01e      	beq.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f8b1 	bl	8001a88 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d1cb      	bne.n	8002906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002984:	e028      	b.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f8aa 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e026      	b.n	80029e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff f875 	bl	8001a88 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d113      	bne.n	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e007      	b.n	80029e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d1cf      	bne.n	8002986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029fc:	e064      	b.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f86e 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e062      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d138      	bne.n	8002a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d105      	bne.n	8002a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e04e      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d107      	bne.n	8002a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2204      	movs	r2, #4
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
 8002a56:	e002      	b.n	8002a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e022      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fff9 	bl	8001a88 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10f      	bne.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d193      	bne.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d075      	beq.n	8002bfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2210      	movs	r2, #16
 8002b16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b18:	e056      	b.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d052      	beq.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7fe ffb1 	bl	8001a88 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_IsErrorOccurred+0x54>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d147      	bne.n	8002bc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5a:	d12e      	bne.n	8002bba <I2C_IsErrorOccurred+0xd6>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b62:	d02a      	beq.n	8002bba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d027      	beq.n	8002bba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b7a:	f7fe ff85 	bl	8001a88 <HAL_GetTick>
 8002b7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b80:	e01b      	b.n	8002bba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b82:	f7fe ff81 	bl	8001a88 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b19      	cmp	r3, #25
 8002b8e:	d914      	bls.n	8002bba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d1dc      	bne.n	8002b82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d003      	beq.n	8002bde <I2C_IsErrorOccurred+0xfa>
 8002bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d09d      	beq.n	8002b1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2220      	movs	r2, #32
 8002bec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01c      	beq.n	8002cac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff fddc 	bl	8002830 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <I2C_IsErrorOccurred+0x1d4>)
 8002c84:	400b      	ands	r3, r1
 8002c86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fe00e800 	.word	0xfe00e800

08002cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cd4:	7a7b      	ldrb	r3, [r7, #9]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	0d5b      	lsrs	r3, r3, #21
 8002cf6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <I2C_TransferConfig+0x60>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	ea02 0103 	and.w	r1, r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	03ff63ff 	.word	0x03ff63ff

08002d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d138      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e032      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d139      	bne.n	8002e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e033      	b.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2224      	movs	r2, #36	; 0x24
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000

08002e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e7a:	d130      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e88:	d038      	beq.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e92:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2232      	movs	r2, #50	; 0x32
 8002ea0:	fb02 f303 	mul.w	r3, r2, r3
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0c9b      	lsrs	r3, r3, #18
 8002eac:	3301      	adds	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb0:	e002      	b.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec4:	d102      	bne.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f2      	bne.n	8002eb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d110      	bne.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e00f      	b.n	8002efe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d007      	beq.n	8002efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	20000000 	.word	0x20000000
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e3ca      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f2a:	4b97      	ldr	r3, [pc, #604]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f34:	4b94      	ldr	r3, [pc, #592]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80e4 	beq.w	8003114 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_RCC_OscConfig+0x4a>
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	f040 808b 	bne.w	8003070 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	f040 8087 	bne.w	8003070 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f62:	4b89      	ldr	r3, [pc, #548]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x62>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e3a2      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1a      	ldr	r2, [r3, #32]
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_RCC_OscConfig+0x7c>
 8002f8a:	4b7f      	ldr	r3, [pc, #508]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f92:	e005      	b.n	8002fa0 <HAL_RCC_OscConfig+0x88>
 8002f94:	4b7c      	ldr	r3, [pc, #496]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d223      	bcs.n	8002fec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fd55 	bl	8003a58 <RCC_SetFlashLatencyFromMSIRange>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e383      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb8:	4b73      	ldr	r3, [pc, #460]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a72      	ldr	r2, [pc, #456]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f043 0308 	orr.w	r3, r3, #8
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b70      	ldr	r3, [pc, #448]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	496d      	ldr	r1, [pc, #436]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd6:	4b6c      	ldr	r3, [pc, #432]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	021b      	lsls	r3, r3, #8
 8002fe4:	4968      	ldr	r1, [pc, #416]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	604b      	str	r3, [r1, #4]
 8002fea:	e025      	b.n	8003038 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fec:	4b66      	ldr	r3, [pc, #408]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a65      	ldr	r2, [pc, #404]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b63      	ldr	r3, [pc, #396]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4960      	ldr	r1, [pc, #384]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800300a:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	495b      	ldr	r1, [pc, #364]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fd15 	bl	8003a58 <RCC_SetFlashLatencyFromMSIRange>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e343      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003038:	f000 fc4a 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800303c:	4602      	mov	r2, r0
 800303e:	4b52      	ldr	r3, [pc, #328]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	091b      	lsrs	r3, r3, #4
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	4950      	ldr	r1, [pc, #320]	; (800318c <HAL_RCC_OscConfig+0x274>)
 800304a:	5ccb      	ldrb	r3, [r1, r3]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_RCC_OscConfig+0x278>)
 8003056:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003058:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <HAL_RCC_OscConfig+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fcc3 	bl	80019e8 <HAL_InitTick>
 8003062:	4603      	mov	r3, r0
 8003064:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d052      	beq.n	8003112 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	e327      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d032      	beq.n	80030de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003078:	4b43      	ldr	r3, [pc, #268]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a42      	ldr	r2, [pc, #264]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003084:	f7fe fd00 	bl	8001a88 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800308c:	f7fe fcfc 	bl	8001a88 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e310      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800309e:	4b3a      	ldr	r3, [pc, #232]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a36      	ldr	r2, [pc, #216]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b34      	ldr	r3, [pc, #208]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4931      	ldr	r1, [pc, #196]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c8:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	492c      	ldr	r1, [pc, #176]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e01a      	b.n	8003114 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ea:	f7fe fccd 	bl	8001a88 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f2:	f7fe fcc9 	bl	8001a88 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e2dd      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003104:	4b20      	ldr	r3, [pc, #128]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x1da>
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003112:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d074      	beq.n	800320a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b08      	cmp	r3, #8
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x21a>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d10e      	bne.n	800314a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d10b      	bne.n	800314a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003132:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d064      	beq.n	8003208 <HAL_RCC_OscConfig+0x2f0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d160      	bne.n	8003208 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e2ba      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x24a>
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e026      	b.n	80031b0 <HAL_RCC_OscConfig+0x298>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316a:	d115      	bne.n	8003198 <HAL_RCC_OscConfig+0x280>
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 8003172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a02      	ldr	r2, [pc, #8]	; (8003188 <HAL_RCC_OscConfig+0x270>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e014      	b.n	80031b0 <HAL_RCC_OscConfig+0x298>
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000
 800318c:	0800c5b4 	.word	0x0800c5b4
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004
 8003198:	4ba0      	ldr	r3, [pc, #640]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a9f      	ldr	r2, [pc, #636]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b9d      	ldr	r3, [pc, #628]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a9c      	ldr	r2, [pc, #624]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fc66 	bl	8001a88 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fc62 	bl	8001a88 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e276      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2a8>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fc52 	bl	8001a88 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fc4e 	bl	8001a88 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e262      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fa:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2d0>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d060      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d005      	beq.n	8003228 <HAL_RCC_OscConfig+0x310>
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b0c      	cmp	r3, #12
 8003220:	d119      	bne.n	8003256 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d116      	bne.n	8003256 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	4b7c      	ldr	r3, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x328>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e23f      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	4973      	ldr	r1, [pc, #460]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003254:	e040      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d023      	beq.n	80032a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fc0d 	bl	8001a88 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fc09 	bl	8001a88 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e21d      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	495f      	ldr	r1, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
 80032a4:	e018      	b.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5c      	ldr	r2, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fbe9 	bl	8001a88 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe fbe5 	bl	8001a88 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e1f9      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f0      	bne.n	80032ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d03c      	beq.n	800335e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ec:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f2:	4a4a      	ldr	r2, [pc, #296]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fc:	f7fe fbc4 	bl	8001a88 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003304:	f7fe fbc0 	bl	8001a88 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1d4      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ef      	beq.n	8003304 <HAL_RCC_OscConfig+0x3ec>
 8003324:	e01b      	b.n	800335e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332c:	4a3b      	ldr	r2, [pc, #236]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fba7 	bl	8001a88 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe fba3 	bl	8001a88 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1b7      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a6 	beq.w	80034b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10d      	bne.n	8003398 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003386:	6593      	str	r3, [r2, #88]	; 0x58
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003394:	2301      	movs	r3, #1
 8003396:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d118      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b0:	f7fe fb6a 	bl	8001a88 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b8:	f7fe fb66 	bl	8001a88 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e17a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_RCC_OscConfig+0x508>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4d8>
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ee:	e029      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_OscConfig+0x50c>
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_OscConfig+0x504>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_OscConfig+0x504>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003418:	e014      	b.n	8003444 <HAL_RCC_OscConfig+0x52c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
 8003424:	4b9c      	ldr	r3, [pc, #624]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342a:	4a9b      	ldr	r2, [pc, #620]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003434:	4b98      	ldr	r3, [pc, #608]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	4a97      	ldr	r2, [pc, #604]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800343c:	f023 0304 	bic.w	r3, r3, #4
 8003440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fb1c 	bl	8001a88 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fb18 	bl	8001a88 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e12a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	4b8b      	ldr	r3, [pc, #556]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ed      	beq.n	8003454 <HAL_RCC_OscConfig+0x53c>
 8003478:	e015      	b.n	80034a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fb05 	bl	8001a88 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fb01 	bl	8001a88 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e113      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ed      	bne.n	8003482 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a6:	7ffb      	ldrb	r3, [r7, #31]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a79      	ldr	r2, [pc, #484]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80fe 	beq.w	80036be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	f040 80d0 	bne.w	800366c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d130      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	3b01      	subs	r3, #1
 80034ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d127      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fe:	429a      	cmp	r2, r3
 8003500:	d11f      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350c:	2a07      	cmp	r2, #7
 800350e:	bf14      	ite	ne
 8003510:	2201      	movne	r2, #1
 8003512:	2200      	moveq	r2, #0
 8003514:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003516:	4293      	cmp	r3, r2
 8003518:	d113      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d109      	bne.n	8003542 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d06e      	beq.n	8003620 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	d069      	beq.n	800361c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003554:	4b50      	ldr	r3, [pc, #320]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0ad      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003570:	f7fe fa8a 	bl	8001a88 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fa86 	bl	8001a88 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e09a      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003596:	4b40      	ldr	r3, [pc, #256]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x784>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035a6:	3a01      	subs	r2, #1
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b0:	0212      	lsls	r2, r2, #8
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	3a01      	subs	r2, #1
 80035bc:	0552      	lsls	r2, r2, #21
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0652      	lsls	r2, r2, #25
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035d0:	0912      	lsrs	r2, r2, #4
 80035d2:	0452      	lsls	r2, r2, #17
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4930      	ldr	r1, [pc, #192]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035e8:	4b2b      	ldr	r3, [pc, #172]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fe fa48 	bl	8001a88 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe fa44 	bl	8001a88 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e058      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	4b22      	ldr	r3, [pc, #136]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361a:	e050      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e04f      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d148      	bne.n	80036be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a19      	ldr	r2, [pc, #100]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003644:	f7fe fa20 	bl	8001a88 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fa1c 	bl	8001a88 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e030      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x734>
 800366a:	e028      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_RCC_OscConfig+0x780>)
 8003678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe fa03 	bl	8001a88 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003684:	e00c      	b.n	80036a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe f9ff 	bl	8001a88 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d905      	bls.n	80036a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e013      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
 8003698:	40021000 	.word	0x40021000
 800369c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1ec      	bne.n	8003686 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4905      	ldr	r1, [pc, #20]	; (80036c8 <HAL_RCC_OscConfig+0x7b0>)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x7b4>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
 80036b8:	e001      	b.n	80036be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	feeefffc 	.word	0xfeeefffc

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0e7      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b75      	ldr	r3, [pc, #468]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b72      	ldr	r3, [pc, #456]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4970      	ldr	r1, [pc, #448]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b6e      	ldr	r3, [pc, #440]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0cf      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4960      	ldr	r1, [pc, #384]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d04c      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	4b5a      	ldr	r3, [pc, #360]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d121      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0a6      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e09a      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e08e      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003796:	4b4a      	ldr	r3, [pc, #296]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e086      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4943      	ldr	r1, [pc, #268]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe f966 	bl	8001a88 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe f962 	bl	8001a88 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e06e      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003800:	429a      	cmp	r2, r3
 8003802:	d208      	bcs.n	8003816 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	492b      	ldr	r1, [pc, #172]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d210      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0207 	bic.w	r2, r3, #7
 800382c:	4923      	ldr	r1, [pc, #140]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003834:	4b21      	ldr	r3, [pc, #132]	; (80038bc <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e036      	b.n	80038b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	4918      	ldr	r1, [pc, #96]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4910      	ldr	r1, [pc, #64]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003884:	f000 f824 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	490b      	ldr	r1, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x1f4>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1f8>)
 80038a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1fc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe f89d 	bl	80019e8 <HAL_InitTick>
 80038ae:	4603      	mov	r3, r0
 80038b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038b2:	7afb      	ldrb	r3, [r7, #11]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	0800c5b4 	.word	0x0800c5b4
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b089      	sub	sp, #36	; 0x24
 80038d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x34>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d11e      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003904:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	e005      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800392c:	4a2b      	ldr	r2, [pc, #172]	; (80039dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10d      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b04      	cmp	r3, #4
 8003946:	d102      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e004      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d101      	bne.n	8003958 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003956:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d134      	bne.n	80039c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800395e:	4b1e      	ldr	r3, [pc, #120]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d003      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0xa6>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d003      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0xac>
 8003974:	e005      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003976:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003978:	617b      	str	r3, [r7, #20]
      break;
 800397a:	e005      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800397c:	4b19      	ldr	r3, [pc, #100]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800397e:	617b      	str	r3, [r7, #20]
      break;
 8003980:	e002      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ae:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0e5b      	lsrs	r3, r3, #25
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	3301      	adds	r3, #1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039c8:	69bb      	ldr	r3, [r7, #24]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	0800c5cc 	.word	0x0800c5cc
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a04:	f7ff fff0 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	0800c5c4 	.word	0x0800c5c4

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a30:	f7ff ffda 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4904      	ldr	r1, [pc, #16]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	0800c5c4 	.word	0x0800c5c4

08003a58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a64:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a70:	f7ff f9ee 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003a74:	6178      	str	r0, [r7, #20]
 8003a76:	e014      	b.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6593      	str	r3, [r2, #88]	; 0x58
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a90:	f7ff f9de 	bl	8002e50 <HAL_PWREx_GetVoltageRange>
 8003a94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa8:	d10b      	bne.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b80      	cmp	r3, #128	; 0x80
 8003aae:	d919      	bls.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ab4:	d902      	bls.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e013      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003abc:	2301      	movs	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e010      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d902      	bls.n	8003ace <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ac8:	2303      	movs	r3, #3
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e00a      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d102      	bne.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e004      	b.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d101      	bne.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0207 	bic.w	r2, r3, #7
 8003aec:	4909      	ldr	r1, [pc, #36]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40022000 	.word	0x40022000

08003b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b20:	2300      	movs	r3, #0
 8003b22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b24:	2300      	movs	r3, #0
 8003b26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d041      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b3c:	d02a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b42:	d824      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b4e:	d81e      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b58:	d010      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b5a:	e018      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b5c:	4b86      	ldr	r3, [pc, #536]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a85      	ldr	r2, [pc, #532]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b68:	e015      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fabb 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7a:	e00c      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3320      	adds	r3, #32
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fba6 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	74fb      	strb	r3, [r7, #19]
      break;
 8003b92:	e000      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9c:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003baa:	4973      	ldr	r1, [pc, #460]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bb2:	e001      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d041      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bcc:	d02a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bd2:	d824      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd8:	d008      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bde:	d81e      	bhi.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d010      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bea:	e018      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bec:	4b62      	ldr	r3, [pc, #392]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf8:	e015      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fa73 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c0a:	e00c      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3320      	adds	r3, #32
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fb5e 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c1c:	e003      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	74fb      	strb	r3, [r7, #19]
      break;
 8003c22:	e000      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10b      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c2c:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c3a:	494f      	ldr	r1, [pc, #316]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a0 	beq.w	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7c:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c98:	f7fd fef6 	bl	8001a88 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fd fef2 	bl	8001a88 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d15c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cc6:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d019      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cf0:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	4a20      	ldr	r2, [pc, #128]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd feb1 	bl	8001a88 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d28:	e00b      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fd fead 	bl	8001a88 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d902      	bls.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ec      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d66:	4904      	ldr	r1, [pc, #16]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
 8003d74:	e006      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7cfb      	ldrb	r3, [r7, #19]
 8003d82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d84:	7c7b      	ldrb	r3, [r7, #17]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b9e      	ldr	r3, [pc, #632]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	4a9d      	ldr	r2, [pc, #628]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003da2:	4b98      	ldr	r3, [pc, #608]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	4994      	ldr	r1, [pc, #592]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dc4:	4b8f      	ldr	r3, [pc, #572]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 020c 	bic.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	498c      	ldr	r1, [pc, #560]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003de6:	4b87      	ldr	r3, [pc, #540]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4983      	ldr	r1, [pc, #524]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e08:	4b7e      	ldr	r3, [pc, #504]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	497b      	ldr	r1, [pc, #492]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	4972      	ldr	r1, [pc, #456]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	496a      	ldr	r1, [pc, #424]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e6e:	4b65      	ldr	r3, [pc, #404]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	4961      	ldr	r1, [pc, #388]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e90:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	4959      	ldr	r1, [pc, #356]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec0:	4950      	ldr	r1, [pc, #320]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	4948      	ldr	r1, [pc, #288]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	493f      	ldr	r1, [pc, #252]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d028      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f18:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f26:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f36:	d106      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a31      	ldr	r2, [pc, #196]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f42:	60d3      	str	r3, [r2, #12]
 8003f44:	e011      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f4e:	d10c      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	2101      	movs	r1, #1
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8c8 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d028      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f76:	4b23      	ldr	r3, [pc, #140]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	491f      	ldr	r1, [pc, #124]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa0:	60d3      	str	r3, [r2, #12]
 8003fa2:	e011      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f899 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff2:	d109      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a02      	ldr	r2, [pc, #8]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
 8004000:	e014      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004010:	d10c      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f867 	bl	80040ec <RCCEx_PLLSAI1_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02f      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004038:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	4928      	ldr	r1, [pc, #160]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004056:	d10d      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f844 	bl	80040ec <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d014      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	74bb      	strb	r3, [r7, #18]
 8004072:	e011      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3320      	adds	r3, #32
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f925 	bl	80042d4 <RCCEx_PLLSAI2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040de:	7cbb      	ldrb	r3, [r7, #18]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000

080040ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040fa:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004106:	4b72      	ldr	r3, [pc, #456]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0203 	and.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10d      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
       ||
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800411e:	4b6c      	ldr	r3, [pc, #432]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
       ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d047      	beq.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	e044      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d018      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x86>
 8004140:	2b03      	cmp	r3, #3
 8004142:	d825      	bhi.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
 8004144:	2b01      	cmp	r3, #1
 8004146:	d002      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x62>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d009      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x74>
 800414c:	e020      	b.n	8004190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800414e:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11d      	bne.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e01a      	b.n	8004196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d116      	bne.n	800419a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e013      	b.n	800419a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004172:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800417e:	4b54      	ldr	r3, [pc, #336]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800418e:	e006      	b.n	800419e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]
      break;
 8004194:	e004      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800419e:	bf00      	nop
    }

    if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4944      	ldr	r1, [pc, #272]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d17d      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fd fc58 	bl	8001a88 <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041da:	e009      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041dc:	f7fd fc54 	bl	8001a88 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d902      	bls.n	80041f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	73fb      	strb	r3, [r7, #15]
        break;
 80041ee:	e005      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1ef      	bne.n	80041dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d160      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d111      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6892      	ldr	r2, [r2, #8]
 8004218:	0211      	lsls	r1, r2, #8
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	0912      	lsrs	r2, r2, #4
 8004220:	0452      	lsls	r2, r2, #17
 8004222:	430a      	orrs	r2, r1
 8004224:	492a      	ldr	r1, [pc, #168]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
 800422a:	e027      	b.n	800427c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d112      	bne.n	8004258 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800423a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6892      	ldr	r2, [r2, #8]
 8004242:	0211      	lsls	r1, r2, #8
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6912      	ldr	r2, [r2, #16]
 8004248:	0852      	lsrs	r2, r2, #1
 800424a:	3a01      	subs	r2, #1
 800424c:	0552      	lsls	r2, r2, #21
 800424e:	430a      	orrs	r2, r1
 8004250:	491f      	ldr	r1, [pc, #124]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	610b      	str	r3, [r1, #16]
 8004256:	e011      	b.n	800427c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6952      	ldr	r2, [r2, #20]
 800426e:	0852      	lsrs	r2, r2, #1
 8004270:	3a01      	subs	r2, #1
 8004272:	0652      	lsls	r2, r2, #25
 8004274:	430a      	orrs	r2, r1
 8004276:	4916      	ldr	r1, [pc, #88]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	4313      	orrs	r3, r2
 800427a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800427c:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a13      	ldr	r2, [pc, #76]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004286:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd fbfe 	bl	8001a88 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800428e:	e009      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004290:	f7fd fbfa 	bl	8001a88 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	73fb      	strb	r3, [r7, #15]
          break;
 80042a2:	e005      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	4904      	ldr	r1, [pc, #16]	; (80042d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042e2:	4b6a      	ldr	r3, [pc, #424]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0203 	and.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d10d      	bne.n	800431a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
       ||
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004306:	4b61      	ldr	r3, [pc, #388]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
       ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d047      	beq.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
 800431e:	e044      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d018      	beq.n	800435a <RCCEx_PLLSAI2_Config+0x86>
 8004328:	2b03      	cmp	r3, #3
 800432a:	d825      	bhi.n	8004378 <RCCEx_PLLSAI2_Config+0xa4>
 800432c:	2b01      	cmp	r3, #1
 800432e:	d002      	beq.n	8004336 <RCCEx_PLLSAI2_Config+0x62>
 8004330:	2b02      	cmp	r3, #2
 8004332:	d009      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x74>
 8004334:	e020      	b.n	8004378 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004336:	4b55      	ldr	r3, [pc, #340]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11d      	bne.n	800437e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004346:	e01a      	b.n	800437e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004348:	4b50      	ldr	r3, [pc, #320]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d116      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e013      	b.n	8004382 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800435a:	4b4c      	ldr	r3, [pc, #304]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004366:	4b49      	ldr	r3, [pc, #292]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004376:	e006      	b.n	8004386 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      break;
 800437c:	e004      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004386:	bf00      	nop
    }

    if(status == HAL_OK)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800438e:	4b3f      	ldr	r3, [pc, #252]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	430b      	orrs	r3, r1
 80043a4:	4939      	ldr	r1, [pc, #228]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d167      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a35      	ldr	r2, [pc, #212]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fd fb64 	bl	8001a88 <HAL_GetTick>
 80043c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043c2:	e009      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043c4:	f7fd fb60 	bl	8001a88 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d902      	bls.n	80043d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	73fb      	strb	r3, [r7, #15]
        break;
 80043d6:	e005      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ef      	bne.n	80043c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d14a      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d111      	bne.n	8004414 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6892      	ldr	r2, [r2, #8]
 8004400:	0211      	lsls	r1, r2, #8
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	0912      	lsrs	r2, r2, #4
 8004408:	0452      	lsls	r2, r2, #17
 800440a:	430a      	orrs	r2, r1
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	614b      	str	r3, [r1, #20]
 8004412:	e011      	b.n	8004438 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800441c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6892      	ldr	r2, [r2, #8]
 8004424:	0211      	lsls	r1, r2, #8
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6912      	ldr	r2, [r2, #16]
 800442a:	0852      	lsrs	r2, r2, #1
 800442c:	3a01      	subs	r2, #1
 800442e:	0652      	lsls	r2, r2, #25
 8004430:	430a      	orrs	r2, r1
 8004432:	4916      	ldr	r1, [pc, #88]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004434:	4313      	orrs	r3, r2
 8004436:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fd fb20 	bl	8001a88 <HAL_GetTick>
 8004448:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800444a:	e009      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800444c:	f7fd fb1c 	bl	8001a88 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	73fb      	strb	r3, [r7, #15]
          break;
 800445e:	e005      	b.n	800446c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ef      	beq.n	800444c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <RCCEx_PLLSAI2_Config+0x1b8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e095      	b.n	80045ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d009      	beq.n	80044c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
 80044ba:	e005      	b.n	80044c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fc fd44 	bl	8000f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004508:	d902      	bls.n	8004510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e002      	b.n	8004516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800451e:	d007      	beq.n	8004530 <HAL_SPI_Init+0xa0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	f003 0204 	and.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x26>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e1fb      	b.n	80049f4 <HAL_SPI_TransmitReceive+0x41e>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004604:	f7fd fa40 	bl	8001a88 <HAL_GetTick>
 8004608:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004610:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004620:	7efb      	ldrb	r3, [r7, #27]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d00e      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x6e>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462c:	d106      	bne.n	800463c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <HAL_SPI_TransmitReceive+0x66>
 8004636:	7efb      	ldrb	r3, [r7, #27]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004642:	e1cd      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x80>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x80>
 8004650:	887b      	ldrh	r3, [r7, #2]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d103      	bne.n	800465e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800465c:	e1c0      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b04      	cmp	r3, #4
 8004668:	d003      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2205      	movs	r2, #5
 800466e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	887a      	ldrh	r2, [r7, #2]
 800468a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b4:	d802      	bhi.n	80046bc <HAL_SPI_TransmitReceive+0xe6>
 80046b6:	8a3b      	ldrh	r3, [r7, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d908      	bls.n	80046ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ca:	605a      	str	r2, [r3, #4]
 80046cc:	e007      	b.n	80046de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d007      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004704:	d97c      	bls.n	8004800 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x13e>
 800470e:	8a7b      	ldrh	r3, [r7, #18]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d169      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004738:	e056      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d11b      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x1aa>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d016      	beq.n	8004780 <HAL_SPI_TransmitReceive+0x1aa>
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	2b01      	cmp	r3, #1
 8004756:	d113      	bne.n	8004780 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d11c      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x1f2>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d016      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	b292      	uxth	r2, r2
 80047a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c4:	2301      	movs	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c8:	f7fd f95e 	bl	8001a88 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d807      	bhi.n	80047e8 <HAL_SPI_TransmitReceive+0x212>
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d003      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047e6:	e0fb      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1a3      	bne.n	800473a <HAL_SPI_TransmitReceive+0x164>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d19d      	bne.n	800473a <HAL_SPI_TransmitReceive+0x164>
 80047fe:	e0df      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x23a>
 8004808:	8a7b      	ldrh	r3, [r7, #18]
 800480a:	2b01      	cmp	r3, #1
 800480c:	f040 80cb 	bne.w	80049a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d912      	bls.n	8004840 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	881a      	ldrh	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b02      	subs	r3, #2
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800483e:	e0b2      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004866:	e09e      	b.n	80049a6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d134      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x30a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02f      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x30a>
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	2b01      	cmp	r3, #1
 8004884:	d12c      	bne.n	80048e0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d912      	bls.n	80048b6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b02      	subs	r3, #2
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b4:	e012      	b.n	80048dc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d148      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x3aa>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d042      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d923      	bls.n	800494e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	b292      	uxth	r2, r2
 8004912:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	1c9a      	adds	r2, r3, #2
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b02      	subs	r3, #2
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d81f      	bhi.n	800497c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	e016      	b.n	800497c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f103 020c 	add.w	r2, r3, #12
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004980:	f7fd f882 	bl	8001a88 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_TransmitReceive+0x3c2>
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d102      	bne.n	800499e <HAL_SPI_TransmitReceive+0x3c8>
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80049a4:	e01c      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f af5b 	bne.w	8004868 <HAL_SPI_TransmitReceive+0x292>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f47f af54 	bne.w	8004868 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f937 	bl	8004c38 <SPI_EndRxTxTransaction>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
 80049dc:	e000      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80049de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a0c:	f7fd f83c 	bl	8001a88 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a1c:	f7fd f834 	bl	8001a88 <HAL_GetTick>
 8004a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a22:	4b39      	ldr	r3, [pc, #228]	; (8004b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	015b      	lsls	r3, r3, #5
 8004a28:	0d1b      	lsrs	r3, r3, #20
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a32:	e054      	b.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d050      	beq.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a3c:	f7fd f824 	bl	8001a88 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d902      	bls.n	8004a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d13d      	bne.n	8004ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6a:	d111      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a74:	d004      	beq.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d107      	bne.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a98:	d10f      	bne.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e017      	b.n	8004afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d19b      	bne.n	8004a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000000 	.word	0x20000000

08004b0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08a      	sub	sp, #40	; 0x28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b1e:	f7fc ffb3 	bl	8001a88 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b2e:	f7fc ffab 	bl	8001a88 <HAL_GetTick>
 8004b32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b3c:	4b3d      	ldr	r3, [pc, #244]	; (8004c34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	00da      	lsls	r2, r3, #3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	0d1b      	lsrs	r3, r3, #20
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b54:	e060      	b.n	8004c18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b5c:	d107      	bne.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d050      	beq.n	8004c18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b76:	f7fc ff87 	bl	8001a88 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d902      	bls.n	8004b8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d13d      	bne.n	8004c08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba4:	d111      	bne.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d004      	beq.n	8004bba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d107      	bne.n	8004bca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd2:	d10f      	bne.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e010      	b.n	8004c2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	4013      	ands	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d196      	bne.n	8004b56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000000 	.word	0x20000000

08004c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff5b 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e027      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fec0 	bl	80049fc <SPI_WaitFlagStateUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e014      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff ff34 	bl	8004b0c <SPI_WaitFifoStateUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e000      	b.n	8004cbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8004cd0:	e00c      	b.n	8004cec <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d101      	bne.n	8004cec <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e007      	b.n	8004cfc <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1eb      	bne.n	8004cd2 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e040      	b.n	8004d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc f964 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8c0 	bl	8004ecc <UART_SetConfig>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e022      	b.n	8004d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb6c 	bl	800543c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fbf3 	bl	8005580 <UART_CheckIdleState>
 8004d9a:	4603      	mov	r3, r0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	f040 8082 	bne.w	8004ec2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_UART_Transmit+0x26>
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e07a      	b.n	8004ec4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x38>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e073      	b.n	8004ec4 <HAL_UART_Transmit+0x120>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2221      	movs	r2, #33	; 0x21
 8004df0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df2:	f7fc fe49 	bl	8001a88 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	d108      	bne.n	8004e24 <HAL_UART_Transmit+0x80>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d104      	bne.n	8004e24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e003      	b.n	8004e2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e34:	e02d      	b.n	8004e92 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fbe6 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e039      	b.n	8004ec4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10b      	bne.n	8004e6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e62:	b292      	uxth	r2, r2
 8004e64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	3302      	adds	r3, #2
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e008      	b.n	8004e80 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	781a      	ldrb	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	b292      	uxth	r2, r2
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1cb      	bne.n	8004e36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2140      	movs	r1, #64	; 0x40
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fbb2 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e005      	b.n	8004ec4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed0:	b08a      	sub	sp, #40	; 0x28
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4ba4      	ldr	r3, [pc, #656]	; (800518c <UART_SetConfig+0x2c0>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f04:	430b      	orrs	r3, r1
 8004f06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a99      	ldr	r2, [pc, #612]	; (8005190 <UART_SetConfig+0x2c4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	4313      	orrs	r3, r2
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a90      	ldr	r2, [pc, #576]	; (8005194 <UART_SetConfig+0x2c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d126      	bne.n	8004fa4 <UART_SetConfig+0xd8>
 8004f56:	4b90      	ldr	r3, [pc, #576]	; (8005198 <UART_SetConfig+0x2cc>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d81b      	bhi.n	8004f9c <UART_SetConfig+0xd0>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0xa0>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f8d 	.word	0x08004f8d
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e116      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e112      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e10e      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e10a      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e106      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a7c      	ldr	r2, [pc, #496]	; (800519c <UART_SetConfig+0x2d0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d138      	bne.n	8005020 <UART_SetConfig+0x154>
 8004fae:	4b7a      	ldr	r3, [pc, #488]	; (8005198 <UART_SetConfig+0x2cc>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d82d      	bhi.n	8005018 <UART_SetConfig+0x14c>
 8004fbc:	a201      	add	r2, pc, #4	; (adr r2, 8004fc4 <UART_SetConfig+0xf8>)
 8004fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	08005019 	.word	0x08005019
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005009 	.word	0x08005009
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	08005019 	.word	0x08005019
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005001 	.word	0x08005001
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005011 	.word	0x08005011
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e0d8      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005000:	2302      	movs	r3, #2
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e0d4      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500e:	e0d0      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005016:	e0cc      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800501e:	e0c8      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a5e      	ldr	r2, [pc, #376]	; (80051a0 <UART_SetConfig+0x2d4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d125      	bne.n	8005076 <UART_SetConfig+0x1aa>
 800502a:	4b5b      	ldr	r3, [pc, #364]	; (8005198 <UART_SetConfig+0x2cc>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005034:	2b30      	cmp	r3, #48	; 0x30
 8005036:	d016      	beq.n	8005066 <UART_SetConfig+0x19a>
 8005038:	2b30      	cmp	r3, #48	; 0x30
 800503a:	d818      	bhi.n	800506e <UART_SetConfig+0x1a2>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d00a      	beq.n	8005056 <UART_SetConfig+0x18a>
 8005040:	2b20      	cmp	r3, #32
 8005042:	d814      	bhi.n	800506e <UART_SetConfig+0x1a2>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <UART_SetConfig+0x182>
 8005048:	2b10      	cmp	r3, #16
 800504a:	d008      	beq.n	800505e <UART_SetConfig+0x192>
 800504c:	e00f      	b.n	800506e <UART_SetConfig+0x1a2>
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005054:	e0ad      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005056:	2302      	movs	r3, #2
 8005058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505c:	e0a9      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800505e:	2304      	movs	r3, #4
 8005060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005064:	e0a5      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005066:	2308      	movs	r3, #8
 8005068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506c:	e0a1      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800506e:	2310      	movs	r3, #16
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005074:	e09d      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a4a      	ldr	r2, [pc, #296]	; (80051a4 <UART_SetConfig+0x2d8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d125      	bne.n	80050cc <UART_SetConfig+0x200>
 8005080:	4b45      	ldr	r3, [pc, #276]	; (8005198 <UART_SetConfig+0x2cc>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800508a:	2bc0      	cmp	r3, #192	; 0xc0
 800508c:	d016      	beq.n	80050bc <UART_SetConfig+0x1f0>
 800508e:	2bc0      	cmp	r3, #192	; 0xc0
 8005090:	d818      	bhi.n	80050c4 <UART_SetConfig+0x1f8>
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d00a      	beq.n	80050ac <UART_SetConfig+0x1e0>
 8005096:	2b80      	cmp	r3, #128	; 0x80
 8005098:	d814      	bhi.n	80050c4 <UART_SetConfig+0x1f8>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <UART_SetConfig+0x1d8>
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d008      	beq.n	80050b4 <UART_SetConfig+0x1e8>
 80050a2:	e00f      	b.n	80050c4 <UART_SetConfig+0x1f8>
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050aa:	e082      	b.n	80051b2 <UART_SetConfig+0x2e6>
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b2:	e07e      	b.n	80051b2 <UART_SetConfig+0x2e6>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ba:	e07a      	b.n	80051b2 <UART_SetConfig+0x2e6>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c2:	e076      	b.n	80051b2 <UART_SetConfig+0x2e6>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ca:	e072      	b.n	80051b2 <UART_SetConfig+0x2e6>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a35      	ldr	r2, [pc, #212]	; (80051a8 <UART_SetConfig+0x2dc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d12a      	bne.n	800512c <UART_SetConfig+0x260>
 80050d6:	4b30      	ldr	r3, [pc, #192]	; (8005198 <UART_SetConfig+0x2cc>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e4:	d01a      	beq.n	800511c <UART_SetConfig+0x250>
 80050e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ea:	d81b      	bhi.n	8005124 <UART_SetConfig+0x258>
 80050ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f0:	d00c      	beq.n	800510c <UART_SetConfig+0x240>
 80050f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f6:	d815      	bhi.n	8005124 <UART_SetConfig+0x258>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <UART_SetConfig+0x238>
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005100:	d008      	beq.n	8005114 <UART_SetConfig+0x248>
 8005102:	e00f      	b.n	8005124 <UART_SetConfig+0x258>
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510a:	e052      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800510c:	2302      	movs	r3, #2
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e04e      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005114:	2304      	movs	r3, #4
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e04a      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800511c:	2308      	movs	r3, #8
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e046      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005124:	2310      	movs	r3, #16
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e042      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <UART_SetConfig+0x2c4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d13a      	bne.n	80051ac <UART_SetConfig+0x2e0>
 8005136:	4b18      	ldr	r3, [pc, #96]	; (8005198 <UART_SetConfig+0x2cc>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005144:	d01a      	beq.n	800517c <UART_SetConfig+0x2b0>
 8005146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800514a:	d81b      	bhi.n	8005184 <UART_SetConfig+0x2b8>
 800514c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005150:	d00c      	beq.n	800516c <UART_SetConfig+0x2a0>
 8005152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005156:	d815      	bhi.n	8005184 <UART_SetConfig+0x2b8>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <UART_SetConfig+0x298>
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005160:	d008      	beq.n	8005174 <UART_SetConfig+0x2a8>
 8005162:	e00f      	b.n	8005184 <UART_SetConfig+0x2b8>
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e022      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800516c:	2302      	movs	r3, #2
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e01e      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005174:	2304      	movs	r3, #4
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e01a      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800517c:	2308      	movs	r3, #8
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e016      	b.n	80051b2 <UART_SetConfig+0x2e6>
 8005184:	2310      	movs	r3, #16
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518a:	e012      	b.n	80051b2 <UART_SetConfig+0x2e6>
 800518c:	efff69f3 	.word	0xefff69f3
 8005190:	40008000 	.word	0x40008000
 8005194:	40013800 	.word	0x40013800
 8005198:	40021000 	.word	0x40021000
 800519c:	40004400 	.word	0x40004400
 80051a0:	40004800 	.word	0x40004800
 80051a4:	40004c00 	.word	0x40004c00
 80051a8:	40005000 	.word	0x40005000
 80051ac:	2310      	movs	r3, #16
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a9f      	ldr	r2, [pc, #636]	; (8005434 <UART_SetConfig+0x568>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d17a      	bne.n	80052b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d824      	bhi.n	800520e <UART_SetConfig+0x342>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <UART_SetConfig+0x300>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	0800520f 	.word	0x0800520f
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	080051ff 	.word	0x080051ff
 80051e0:	0800520f 	.word	0x0800520f
 80051e4:	0800520f 	.word	0x0800520f
 80051e8:	0800520f 	.word	0x0800520f
 80051ec:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fc06 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 80051f4:	61f8      	str	r0, [r7, #28]
        break;
 80051f6:	e010      	b.n	800521a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b8f      	ldr	r3, [pc, #572]	; (8005438 <UART_SetConfig+0x56c>)
 80051fa:	61fb      	str	r3, [r7, #28]
        break;
 80051fc:	e00d      	b.n	800521a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe fb67 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8005202:	61f8      	str	r0, [r7, #28]
        break;
 8005204:	e009      	b.n	800521a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	61fb      	str	r3, [r7, #28]
        break;
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80fb 	beq.w	8005418 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	429a      	cmp	r2, r3
 8005230:	d305      	bcc.n	800523e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	429a      	cmp	r2, r3
 800523c:	d903      	bls.n	8005246 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005244:	e0e8      	b.n	8005418 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2200      	movs	r2, #0
 800524a:	461c      	mov	r4, r3
 800524c:	4615      	mov	r5, r2
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	022b      	lsls	r3, r5, #8
 8005258:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800525c:	0222      	lsls	r2, r4, #8
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	6849      	ldr	r1, [r1, #4]
 8005262:	0849      	lsrs	r1, r1, #1
 8005264:	2000      	movs	r0, #0
 8005266:	4688      	mov	r8, r1
 8005268:	4681      	mov	r9, r0
 800526a:	eb12 0a08 	adds.w	sl, r2, r8
 800526e:	eb43 0b09 	adc.w	fp, r3, r9
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fa fffc 	bl	8000280 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005296:	d308      	bcc.n	80052aa <UART_SetConfig+0x3de>
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d204      	bcs.n	80052aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	60da      	str	r2, [r3, #12]
 80052a8:	e0b6      	b.n	8005418 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052b0:	e0b2      	b.n	8005418 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ba:	d15e      	bne.n	800537a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d828      	bhi.n	8005316 <UART_SetConfig+0x44a>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x400>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe fb86 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e014      	b.n	8005322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe fb98 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80052fc:	61f8      	str	r0, [r7, #28]
        break;
 80052fe:	e010      	b.n	8005322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b4d      	ldr	r3, [pc, #308]	; (8005438 <UART_SetConfig+0x56c>)
 8005302:	61fb      	str	r3, [r7, #28]
        break;
 8005304:	e00d      	b.n	8005322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fe fae3 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800530a:	61f8      	str	r0, [r7, #28]
        break;
 800530c:	e009      	b.n	8005322 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	61fb      	str	r3, [r7, #28]
        break;
 8005314:	e005      	b.n	8005322 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d077      	beq.n	8005418 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	005a      	lsls	r2, r3, #1
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	441a      	add	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d916      	bls.n	8005372 <UART_SetConfig+0x4a6>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534a:	d212      	bcs.n	8005372 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	b29b      	uxth	r3, r3
 8005350:	f023 030f 	bic.w	r3, r3, #15
 8005354:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	b29b      	uxth	r3, r3
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	b29a      	uxth	r2, r3
 8005362:	8afb      	ldrh	r3, [r7, #22]
 8005364:	4313      	orrs	r3, r2
 8005366:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	8afa      	ldrh	r2, [r7, #22]
 800536e:	60da      	str	r2, [r3, #12]
 8005370:	e052      	b.n	8005418 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005378:	e04e      	b.n	8005418 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800537a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800537e:	2b08      	cmp	r3, #8
 8005380:	d827      	bhi.n	80053d2 <UART_SetConfig+0x506>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <UART_SetConfig+0x4bc>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	080053d3 	.word	0x080053d3
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053d3 	.word	0x080053d3
 80053a0:	080053d3 	.word	0x080053d3
 80053a4:	080053d3 	.word	0x080053d3
 80053a8:	080053cb 	.word	0x080053cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ac:	f7fe fb28 	bl	8003a00 <HAL_RCC_GetPCLK1Freq>
 80053b0:	61f8      	str	r0, [r7, #28]
        break;
 80053b2:	e014      	b.n	80053de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b4:	f7fe fb3a 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 80053b8:	61f8      	str	r0, [r7, #28]
        break;
 80053ba:	e010      	b.n	80053de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053bc:	4b1e      	ldr	r3, [pc, #120]	; (8005438 <UART_SetConfig+0x56c>)
 80053be:	61fb      	str	r3, [r7, #28]
        break;
 80053c0:	e00d      	b.n	80053de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c2:	f7fe fa85 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 80053c6:	61f8      	str	r0, [r7, #28]
        break;
 80053c8:	e009      	b.n	80053de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ce:	61fb      	str	r3, [r7, #28]
        break;
 80053d0:	e005      	b.n	80053de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053dc:	bf00      	nop
    }

    if (pclk != 0U)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d019      	beq.n	8005418 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	085a      	lsrs	r2, r3, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d909      	bls.n	8005412 <UART_SetConfig+0x546>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d205      	bcs.n	8005412 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60da      	str	r2, [r3, #12]
 8005410:	e002      	b.n	8005418 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005424:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005432:	bf00      	nop
 8005434:	40008000 	.word	0x40008000
 8005438:	00f42400 	.word	0x00f42400

0800543c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00a      	beq.n	8005488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553a:	d10a      	bne.n	8005552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005590:	f7fc fa7a 	bl	8001a88 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10e      	bne.n	80055c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f82d 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e023      	b.n	800560a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d10e      	bne.n	80055ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f817 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e00d      	b.n	800560a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b09c      	sub	sp, #112	; 0x70
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005622:	e0a5      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	f000 80a1 	beq.w	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fc fa2b 	bl	8001a88 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <UART_WaitOnFlagUntilTimeout+0x32>
 800563e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005640:	2b00      	cmp	r3, #0
 8005642:	d13e      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005658:	667b      	str	r3, [r7, #100]	; 0x64
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005664:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005668:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	663b      	str	r3, [r7, #96]	; 0x60
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005696:	64ba      	str	r2, [r7, #72]	; 0x48
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800569c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e067      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d04f      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056de:	d147      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800570e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	66bb      	str	r3, [r7, #104]	; 0x68
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800573c:	623a      	str	r2, [r7, #32]
 800573e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	69f9      	ldr	r1, [r7, #28]
 8005742:	6a3a      	ldr	r2, [r7, #32]
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	61bb      	str	r3, [r7, #24]
   return(result);
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e010      	b.n	8005792 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4013      	ands	r3, r2
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	429a      	cmp	r2, r3
 800577e:	bf0c      	ite	eq
 8005780:	2301      	moveq	r3, #1
 8005782:	2300      	movne	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	429a      	cmp	r2, r3
 800578c:	f43f af4a 	beq.w	8005624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3770      	adds	r7, #112	; 0x70
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <VL53L0X_Prepare>:
 *
 * @param void
 * @return      0 on success
 */
int VL53L0X_Prepare(VL53L0X_DEV Dev)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	// taken from rangingTest() in vl53l0x_SingleRanging_Example.c
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	if(Status == VL53L0X_ERROR_NONE)
 80057a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <VL53L0X_Prepare+0x1e>
	{
		Status = VL53L0X_StaticInit(Dev); // Device Initialization
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f004 fe02 	bl	800a3b8 <VL53L0X_StaticInit>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
	}

	if(Status == VL53L0X_ERROR_NONE)
 80057b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <VL53L0X_Prepare+0x3a>
	{
		Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal); // Device Initialization
 80057c0:	f107 020d 	add.w	r2, r7, #13
 80057c4:	f107 030e 	add.w	r3, r7, #14
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f004 f92f 	bl	8009a2e <VL53L0X_PerformRefCalibration>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
	}

	if(Status == VL53L0X_ERROR_NONE)
 80057d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <VL53L0X_Prepare+0x56>
	{
		Status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads); // Device Initialization
 80057dc:	f107 020f 	add.w	r2, r7, #15
 80057e0:	f107 0310 	add.w	r3, r7, #16
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f004 f937 	bl	8009a5a <VL53L0X_PerformRefSpadManagement>
 80057ec:	4603      	mov	r3, r0
 80057ee:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 80057f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <VL53L0X_GetDistance>:
 *
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
int VL53L0X_GetDistance(VL53L0X_DEV Dev, uint32_t *piData)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	int status=0;
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L0X_RangingMeasurementData_t pRangingMeasurementData;

	status= VL53L0X_StartMeasurementSimplified(Dev, range_single_shot_polling, NULL);
 800580a:	2200      	movs	r2, #0
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f005 fa4a 	bl	800aca8 <VL53L0X_StartMeasurementSimplified>
 8005814:	6278      	str	r0, [r7, #36]	; 0x24
	if (!status) {
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d107      	bne.n	800582c <VL53L0X_GetDistance+0x30>
		status= VL53L0X_GetMeasurementSimplified(Dev, range_single_shot_polling, &pRangingMeasurementData);
 800581c:	f107 0308 	add.w	r3, r7, #8
 8005820:	461a      	mov	r2, r3
 8005822:	2101      	movs	r1, #1
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f005 fae5 	bl	800adf4 <VL53L0X_GetMeasurementSimplified>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24
	}
	if (pRangingMeasurementData.RangeStatus == 0) {
 800582c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <VL53L0X_GetDistance+0x42>
		// we have a valid range.
		*piData = pRangingMeasurementData.RangeMilliMeter;
 8005834:	8a3b      	ldrh	r3, [r7, #16]
 8005836:	461a      	mov	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e005      	b.n	800584a <VL53L0X_GetDistance+0x4e>
	}
	else {
		*piData = 0;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
		status = VL53L0X_ERROR_RANGE_ERROR;
 8005844:	f06f 0305 	mvn.w	r3, #5
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
	}
	VL53L0X_StopMeasurementSimplified(Dev, range_single_shot_polling);
 800584a:	2101      	movs	r1, #1
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f005 fb03 	bl	800ae58 <VL53L0X_StopMeasurementSimplified>
	return status;
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	; 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <SetDeviceAddress>:
 * @sa AN4478: Using multiple VL6180X's in a single design
 * @param NewAddr   The new i2c address (7bit)
 * @return          0 on success
 */
int SetDeviceAddress(VL53L0X_DEV Dev, int NewAddr)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	int status;

	status=VL53L0X_SetDeviceAddress(Dev, NewAddr);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f004 f909 	bl	8009a84 <VL53L0X_SetDeviceAddress>
 8005872:	4603      	mov	r3, r0
 8005874:	60fb      	str	r3, [r7, #12]
	if(!status)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d104      	bne.n	8005886 <SetDeviceAddress+0x2a>
		Dev->I2cDevAddr=NewAddr;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	return status;
 8005886:	68fb      	ldr	r3, [r7, #12]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <VL53L0X_device_read_strobe>:


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800589c:	2200      	movs	r2, #0
 800589e:	2183      	movs	r1, #131	; 0x83
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f004 ffec 	bl	800a87e <VL53L0X_WrByte>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80058b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d11e      	bne.n	80058f6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80058bc:	f107 030f 	add.w	r3, r7, #15
 80058c0:	461a      	mov	r2, r3
 80058c2:	2183      	movs	r1, #131	; 0x83
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f005 f813 	bl	800a8f0 <VL53L0X_RdByte>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <VL53L0X_device_read_strobe+0x5a>
 80058d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	3301      	adds	r3, #1
 80058e0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058e8:	d3e8      	bcc.n	80058bc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80058f0:	d301      	bcc.n	80058f6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80058f2:	23f9      	movs	r3, #249	; 0xf9
 80058f4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80058f6:	2201      	movs	r2, #1
 80058f8:	2183      	movs	r1, #131	; 0x83
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f004 ffbf 	bl	800a87e <VL53L0X_WrByte>
 8005900:	4603      	mov	r3, r0
 8005902:	461a      	mov	r2, r3
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	4313      	orrs	r3, r2
 8005908:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800590a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b098      	sub	sp, #96	; 0x60
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	460b      	mov	r3, r1
 8005920:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005934:	2300      	movs	r3, #0
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005940:	2300      	movs	r3, #0
 8005942:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005946:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800595e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005962:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005966:	2b07      	cmp	r3, #7
 8005968:	f000 8408 	beq.w	800617c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800596c:	2201      	movs	r2, #1
 800596e:	2180      	movs	r1, #128	; 0x80
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f004 ff84 	bl	800a87e <VL53L0X_WrByte>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800597e:	4313      	orrs	r3, r2
 8005980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005984:	2201      	movs	r2, #1
 8005986:	21ff      	movs	r1, #255	; 0xff
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f004 ff78 	bl	800a87e <VL53L0X_WrByte>
 800598e:	4603      	mov	r3, r0
 8005990:	461a      	mov	r2, r3
 8005992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005996:	4313      	orrs	r3, r2
 8005998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800599c:	2200      	movs	r2, #0
 800599e:	2100      	movs	r1, #0
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f004 ff6c 	bl	800a87e <VL53L0X_WrByte>
 80059a6:	4603      	mov	r3, r0
 80059a8:	461a      	mov	r2, r3
 80059aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80059b4:	2206      	movs	r2, #6
 80059b6:	21ff      	movs	r1, #255	; 0xff
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f004 ff60 	bl	800a87e <VL53L0X_WrByte>
 80059be:	4603      	mov	r3, r0
 80059c0:	461a      	mov	r2, r3
 80059c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80059cc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80059d0:	461a      	mov	r2, r3
 80059d2:	2183      	movs	r1, #131	; 0x83
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f004 ff8b 	bl	800a8f0 <VL53L0X_RdByte>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80059e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	2183      	movs	r1, #131	; 0x83
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f004 ff41 	bl	800a87e <VL53L0X_WrByte>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005a0a:	2207      	movs	r2, #7
 8005a0c:	21ff      	movs	r1, #255	; 0xff
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f004 ff35 	bl	800a87e <VL53L0X_WrByte>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005a22:	2201      	movs	r2, #1
 8005a24:	2181      	movs	r1, #129	; 0x81
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f004 ff29 	bl	800a87e <VL53L0X_WrByte>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 ff31 	bl	80078a2 <VL53L0X_PollingDelay>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2180      	movs	r1, #128	; 0x80
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f004 ff13 	bl	800a87e <VL53L0X_WrByte>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8098 	beq.w	8005ba2 <VL53L0X_get_info_from_device+0x28c>
				((ReadDataFromDeviceDone & 1) == 0)) {
 8005a72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a76:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 8091 	bne.w	8005ba2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005a80:	226b      	movs	r2, #107	; 0x6b
 8005a82:	2194      	movs	r1, #148	; 0x94
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f004 fefa 	bl	800a87e <VL53L0X_WrByte>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fef9 	bl	8005890 <VL53L0X_device_read_strobe>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2190      	movs	r1, #144	; 0x90
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f004 ff5e 	bl	800a976 <VL53L0X_RdDWord>
 8005aba:	4603      	mov	r3, r0
 8005abc:	461a      	mov	r2, r3
 8005abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	0bdb      	lsrs	r3, r3, #15
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005ae4:	2224      	movs	r2, #36	; 0x24
 8005ae6:	2194      	movs	r1, #148	; 0x94
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f004 fec8 	bl	800a87e <VL53L0X_WrByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fec7 	bl	8005890 <VL53L0X_device_read_strobe>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b14:	461a      	mov	r2, r3
 8005b16:	2190      	movs	r1, #144	; 0x90
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f004 ff2c 	bl	800a976 <VL53L0X_RdDWord>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	723b      	strb	r3, [r7, #8]
					& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	0c1b      	lsrs	r3, r3, #16
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	727b      	strb	r3, [r7, #9]
					& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	72bb      	strb	r3, [r7, #10]
					& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005b4a:	2225      	movs	r2, #37	; 0x25
 8005b4c:	2194      	movs	r1, #148	; 0x94
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f004 fe95 	bl	800a87e <VL53L0X_WrByte>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fe94 	bl	8005890 <VL53L0X_device_read_strobe>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2190      	movs	r1, #144	; 0x90
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f004 fef9 	bl	800a976 <VL53L0X_RdDWord>
 8005b84:	4603      	mov	r3, r0
 8005b86:	461a      	mov	r2, r3
 8005b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	733b      	strb	r3, [r7, #12]
					& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	0c1b      	lsrs	r3, r3, #16
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	737b      	strb	r3, [r7, #13]
					& 0xff);
		}

		if (((option & 2) == 2) &&
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8189 	beq.w	8005ec0 <VL53L0X_get_info_from_device+0x5aa>
				((ReadDataFromDeviceDone & 2) == 0)) {
 8005bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bb2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 8182 	bne.w	8005ec0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	2194      	movs	r1, #148	; 0x94
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f004 fe5c 	bl	800a87e <VL53L0X_WrByte>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fe5b 	bl	8005890 <VL53L0X_device_read_strobe>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005be8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005bec:	461a      	mov	r2, r3
 8005bee:	2190      	movs	r1, #144	; 0x90
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f004 fe7d 	bl	800a8f0 <VL53L0X_RdByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005c04:	227b      	movs	r2, #123	; 0x7b
 8005c06:	2194      	movs	r1, #148	; 0x94
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f004 fe38 	bl	800a87e <VL53L0X_WrByte>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	461a      	mov	r2, r3
 8005c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fe37 	bl	8005890 <VL53L0X_device_read_strobe>
 8005c22:	4603      	mov	r3, r0
 8005c24:	461a      	mov	r2, r3
 8005c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005c30:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005c34:	461a      	mov	r2, r3
 8005c36:	2190      	movs	r1, #144	; 0x90
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f004 fe59 	bl	800a8f0 <VL53L0X_RdByte>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	461a      	mov	r2, r3
 8005c42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005c4c:	2277      	movs	r2, #119	; 0x77
 8005c4e:	2194      	movs	r1, #148	; 0x94
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f004 fe14 	bl	800a87e <VL53L0X_WrByte>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fe13 	bl	8005890 <VL53L0X_device_read_strobe>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2190      	movs	r1, #144	; 0x90
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f004 fe78 	bl	800a976 <VL53L0X_RdDWord>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	0e5b      	lsrs	r3, r3, #25
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	0c9b      	lsrs	r3, r3, #18
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	0adb      	lsrs	r3, r3, #11
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005cde:	2278      	movs	r2, #120	; 0x78
 8005ce0:	2194      	movs	r1, #148	; 0x94
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f004 fdcb 	bl	800a87e <VL53L0X_WrByte>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fdca 	bl	8005890 <VL53L0X_device_read_strobe>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d04:	4313      	orrs	r3, r2
 8005d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005d0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2190      	movs	r1, #144	; 0x90
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f004 fe2f 	bl	800a976 <VL53L0X_RdDWord>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	0f5b      	lsrs	r3, r3, #29
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d30:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d36:	4413      	add	r3, r2
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	0d9b      	lsrs	r3, r3, #22
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	0bdb      	lsrs	r3, r3, #15
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	019b      	lsls	r3, r3, #6
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005d86:	2279      	movs	r2, #121	; 0x79
 8005d88:	2194      	movs	r1, #148	; 0x94
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f004 fd77 	bl	800a87e <VL53L0X_WrByte>
 8005d90:	4603      	mov	r3, r0
 8005d92:	461a      	mov	r2, r3
 8005d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fd76 	bl	8005890 <VL53L0X_device_read_strobe>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005db6:	461a      	mov	r2, r3
 8005db8:	2190      	movs	r1, #144	; 0x90
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f004 fddb 	bl	800a976 <VL53L0X_RdDWord>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	0e9b      	lsrs	r3, r3, #26
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005dde:	4413      	add	r3, r2
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	0cdb      	lsrs	r3, r3, #19
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	0b1b      	lsrs	r3, r3, #12
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005e20:	227a      	movs	r2, #122	; 0x7a
 8005e22:	2194      	movs	r1, #148	; 0x94
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f004 fd2a 	bl	800a87e <VL53L0X_WrByte>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fd29 	bl	8005890 <VL53L0X_device_read_strobe>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e50:	461a      	mov	r2, r3
 8005e52:	2190      	movs	r1, #144	; 0x90
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f004 fd8e 	bl	800a976 <VL53L0X_RdDWord>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	0f9b      	lsrs	r3, r3, #30
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e72:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e78:	4413      	add	r3, r2
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	0ddb      	lsrs	r3, r3, #23
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	0a5b      	lsrs	r3, r3, #9
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	089b      	lsrs	r3, r3, #2
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80f1 	beq.w	80060ae <VL53L0X_get_info_from_device+0x798>
				((ReadDataFromDeviceDone & 4) == 0)) {
 8005ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ed0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 80ea 	bne.w	80060ae <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005eda:	227b      	movs	r2, #123	; 0x7b
 8005edc:	2194      	movs	r1, #148	; 0x94
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f004 fccd 	bl	800a87e <VL53L0X_WrByte>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff fccc 	bl	8005890 <VL53L0X_device_read_strobe>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2190      	movs	r1, #144	; 0x90
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f004 fd31 	bl	800a976 <VL53L0X_RdDWord>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005f22:	227c      	movs	r2, #124	; 0x7c
 8005f24:	2194      	movs	r1, #148	; 0x94
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f004 fca9 	bl	800a87e <VL53L0X_WrByte>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fca8 	bl	8005890 <VL53L0X_device_read_strobe>
 8005f40:	4603      	mov	r3, r0
 8005f42:	461a      	mov	r2, r3
 8005f44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f52:	461a      	mov	r2, r3
 8005f54:	2190      	movs	r1, #144	; 0x90
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f004 fd0d 	bl	800a976 <VL53L0X_RdDWord>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005f6a:	2273      	movs	r2, #115	; 0x73
 8005f6c:	2194      	movs	r1, #148	; 0x94
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f004 fc85 	bl	800a87e <VL53L0X_WrByte>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fc84 	bl	8005890 <VL53L0X_device_read_strobe>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005f96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2190      	movs	r1, #144	; 0x90
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f004 fce9 	bl	800a976 <VL53L0X_RdDWord>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
					0x0000000ff) << 8;
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005fba:	2274      	movs	r2, #116	; 0x74
 8005fbc:	2194      	movs	r1, #148	; 0x94
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f004 fc5d 	bl	800a87e <VL53L0X_WrByte>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fc5c 	bl	8005890 <VL53L0X_device_read_strobe>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fea:	461a      	mov	r2, r3
 8005fec:	2190      	movs	r1, #144	; 0x90
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f004 fcc1 	bl	800a976 <VL53L0X_RdDWord>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
					0xff000000) >> 24);
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006008:	4313      	orrs	r3, r2
 800600a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800600c:	2275      	movs	r2, #117	; 0x75
 800600e:	2194      	movs	r1, #148	; 0x94
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f004 fc34 	bl	800a87e <VL53L0X_WrByte>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800601e:	4313      	orrs	r3, r2
 8006020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fc33 	bl	8005890 <VL53L0X_device_read_strobe>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006032:	4313      	orrs	r3, r2
 8006034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800603c:	461a      	mov	r2, r3
 800603e:	2190      	movs	r1, #144	; 0x90
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f004 fc98 	bl	800a976 <VL53L0X_RdDWord>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800604e:	4313      	orrs	r3, r2
 8006050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
									<< 8;
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006058:	b29b      	uxth	r3, r3
 800605a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800605c:	2276      	movs	r2, #118	; 0x76
 800605e:	2194      	movs	r1, #148	; 0x94
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f004 fc0c 	bl	800a87e <VL53L0X_WrByte>
 8006066:	4603      	mov	r3, r0
 8006068:	461a      	mov	r2, r3
 800606a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800606e:	4313      	orrs	r3, r2
 8006070:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fc0b 	bl	8005890 <VL53L0X_device_read_strobe>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006082:	4313      	orrs	r3, r2
 8006084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006088:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800608c:	461a      	mov	r2, r3
 800608e:	2190      	movs	r1, #144	; 0x90
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f004 fc70 	bl	800a976 <VL53L0X_RdDWord>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800609e:	4313      	orrs	r3, r2
 80060a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
					>> 24);
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80060a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060aa:	4313      	orrs	r3, r2
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80060ae:	2200      	movs	r2, #0
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f004 fbe3 	bl	800a87e <VL53L0X_WrByte>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80060c6:	2206      	movs	r2, #6
 80060c8:	21ff      	movs	r1, #255	; 0xff
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f004 fbd7 	bl	800a87e <VL53L0X_WrByte>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060d8:	4313      	orrs	r3, r2
 80060da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80060de:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80060e2:	461a      	mov	r2, r3
 80060e4:	2183      	movs	r1, #131	; 0x83
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f004 fc02 	bl	800a8f0 <VL53L0X_RdByte>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80060fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060fe:	f023 0304 	bic.w	r3, r3, #4
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	2183      	movs	r1, #131	; 0x83
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f004 fbb8 	bl	800a87e <VL53L0X_WrByte>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006116:	4313      	orrs	r3, r2
 8006118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800611c:	2201      	movs	r2, #1
 800611e:	21ff      	movs	r1, #255	; 0xff
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f004 fbac 	bl	800a87e <VL53L0X_WrByte>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800612e:	4313      	orrs	r3, r2
 8006130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006134:	2201      	movs	r2, #1
 8006136:	2100      	movs	r1, #0
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f004 fba0 	bl	800a87e <VL53L0X_WrByte>
 800613e:	4603      	mov	r3, r0
 8006140:	461a      	mov	r2, r3
 8006142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006146:	4313      	orrs	r3, r2
 8006148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800614c:	2200      	movs	r2, #0
 800614e:	21ff      	movs	r1, #255	; 0xff
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f004 fb94 	bl	800a87e <VL53L0X_WrByte>
 8006156:	4603      	mov	r3, r0
 8006158:	461a      	mov	r2, r3
 800615a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800615e:	4313      	orrs	r3, r2
 8006160:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006164:	2200      	movs	r2, #0
 8006166:	2180      	movs	r1, #128	; 0x80
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f004 fb88 	bl	800a87e <VL53L0X_WrByte>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006176:	4313      	orrs	r3, r2
 8006178:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800617c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 808f 	bne.w	80062a4 <VL53L0X_get_info_from_device+0x98e>
 8006186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800618a:	2b07      	cmp	r3, #7
 800618c:	f000 808a 	beq.w	80062a4 <VL53L0X_get_info_from_device+0x98e>
			(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d024      	beq.n	80061e4 <VL53L0X_get_info_from_device+0x8ce>
				((ReadDataFromDeviceDone & 1) == 0)) {
 800619a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800619e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d11e      	bne.n	80061e4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80061ac:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
					ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80061b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
					ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80061ba:	2300      	movs	r3, #0
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061be:	e00e      	b.n	80061de <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
						NvmRefGoodSpadMap[i];
 80061c0:	f107 0208 	add.w	r2, r7, #8
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	4413      	add	r3, r2
 80061c8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80061d4:	460a      	mov	r2, r1
 80061d6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80061d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061da:	3301      	adds	r3, #1
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	dded      	ble.n	80061c0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <VL53L0X_get_info_from_device+0x90a>
				((ReadDataFromDeviceDone & 2) == 0)) {
 80061ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061f2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d112      	bne.n	8006220 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80061fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006204:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	33f3      	adds	r3, #243	; 0xf3
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	4619      	mov	r1, r3
 800621a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621c:	f004 ff40 	bl	800b0a0 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d030      	beq.n	800628c <VL53L0X_get_info_from_device+0x976>
				((ReadDataFromDeviceDone & 4) == 0)) {
 800622a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800622e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12a      	bne.n	800628c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
					PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
					PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	025b      	lsls	r3, r3, #9
 800624a:	643b      	str	r3, [r7, #64]	; 0x40
					VL53L0X_FIXPOINT97TOFIXPOINT1616(
							SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006250:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
					SignalRateMeasFixed400mm,
					SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800625a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625c:	2b00      	cmp	r3, #0
 800625e:	d011      	beq.n	8006284 <VL53L0X_get_info_from_device+0x96e>
				OffsetFixed1104_mm =
 8006260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8006274:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 8006278:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800627c:	425b      	negs	r3, r3
 800627e:	b29b      	uxth	r3, r3
 8006280:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006284:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	60da      	str	r2, [r3, #12]
					Part2PartOffsetAdjustmentNVMMicroMeter,
					OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800628c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	4313      	orrs	r3, r2
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800629a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062a4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3760      	adds	r7, #96	; 0x60
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <VL53L0X_get_offset_calibration_data_micro_meter>:

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80062be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80062c2:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80062c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062c8:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	461a      	mov	r2, r3
 80062d0:	2128      	movs	r1, #40	; 0x28
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f004 fb28 	bl	800a928 <VL53L0X_RdWord>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
			&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80062dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11e      	bne.n	8006322 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80062e4:	893b      	ldrh	r3, [r7, #8]
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80062ee:	893b      	ldrh	r3, [r7, #8]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	dd0b      	ble.n	8006312 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
					(int16_t)(RangeOffsetRegister - cOffsetRange)
 80062fa:	893a      	ldrh	r2, [r7, #8]
 80062fc:	897b      	ldrh	r3, [r7, #10]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	b29b      	uxth	r3, r3
 8006302:	b21b      	sxth	r3, r3
 8006304:	461a      	mov	r2, r3
					* 250;
 8006306:	23fa      	movs	r3, #250	; 0xfa
 8006308:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e007      	b.n	8006322 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
					(int16_t)RangeOffsetRegister * 250;
 8006312:	893b      	ldrh	r3, [r7, #8]
 8006314:	b21b      	sxth	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	23fa      	movs	r3, #250	; 0xfa
 800631a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ffb6 	bl	80062b0 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
			pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <VL53L0X_GetDeviceMode>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
		VL53L0X_DeviceModes *pDeviceMode)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	7c1a      	ldrb	r2, [r3, #16]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800636a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
		uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006388:	f107 030c 	add.w	r3, r7, #12
 800638c:	461a      	mov	r2, r3
 800638e:	21f8      	movs	r1, #248	; 0xf8
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f004 fac9 	bl	800a928 <VL53L0X_RdWord>
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
			&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800639a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	461a      	mov	r2, r3
 80063a8:	2104      	movs	r1, #4
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f004 fae3 	bl	800a976 <VL53L0X_RdDWord>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
				&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10c      	bne.n	80063d6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80063bc:	89bb      	ldrh	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
					IMPeriodMilliSeconds / osc_calibrate_val;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	89ba      	ldrh	r2, [r7, #12]
 80063c6:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	619a      	str	r2, [r3, #24]
				InterMeasurementPeriodMilliSeconds,
				*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <VL53L0X_GetXTalkCompensationRateMegaCps>:

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
		FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80063f0:	f107 030e 	add.w	r3, r7, #14
 80063f4:	461a      	mov	r2, r3
 80063f6:	2120      	movs	r1, #32
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f004 fa95 	bl	800a928 <VL53L0X_RdWord>
 80063fe:	4603      	mov	r3, r0
 8006400:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006402:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d118      	bne.n	800643c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800640a:	89fb      	ldrh	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	613b      	str	r3, [r7, #16]
					XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	771a      	strb	r2, [r3, #28]
 8006422:	e00b      	b.n	800643c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
					0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006424:	89fb      	ldrh	r3, [r7, #14]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
					XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	771a      	strb	r2, [r3, #28]
					1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800643c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t *pLimitCheckValue)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006456:	2300      	movs	r3, #0
 8006458:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	2b05      	cmp	r3, #5
 8006462:	d847      	bhi.n	80064f4 <VL53L0X_GetLimitCheckValue+0xac>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <VL53L0X_GetLimitCheckValue+0x24>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006485 	.word	0x08006485
 8006470:	08006491 	.word	0x08006491
 8006474:	080064b7 	.word	0x080064b7
 8006478:	080064c3 	.word	0x080064c3
 800647c:	080064cf 	.word	0x080064cf
 8006480:	080064cf 	.word	0x080064cf

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	77bb      	strb	r3, [r7, #30]
		break;
 800648e:	e033      	b.n	80064f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006490:	f107 0316 	add.w	r3, r7, #22
 8006494:	461a      	mov	r2, r3
 8006496:	2144      	movs	r1, #68	; 0x44
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f004 fa45 	bl	800a928 <VL53L0X_RdWord>
 800649e:	4603      	mov	r3, r0
 80064a0:	77fb      	strb	r3, [r7, #31]
				VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80064a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d102      	bne.n	80064b0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80064aa:	8afb      	ldrh	r3, [r7, #22]
 80064ac:	025b      	lsls	r3, r3, #9
 80064ae:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77bb      	strb	r3, [r7, #30]
		break;
 80064b4:	e020      	b.n	80064f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80064bc:	2300      	movs	r3, #0
 80064be:	77bb      	strb	r3, [r7, #30]
		break;
 80064c0:	e01a      	b.n	80064f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	77bb      	strb	r3, [r7, #30]
		break;
 80064cc:	e014      	b.n	80064f8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80064ce:	f107 0316 	add.w	r3, r7, #22
 80064d2:	461a      	mov	r2, r3
 80064d4:	2164      	movs	r1, #100	; 0x64
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f004 fa26 	bl	800a928 <VL53L0X_RdWord>
 80064dc:	4603      	mov	r3, r0
 80064de:	77fb      	strb	r3, [r7, #31]
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80064e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80064e8:	8afb      	ldrh	r3, [r7, #22]
 80064ea:	025b      	lsls	r3, r3, #9
 80064ec:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	77bb      	strb	r3, [r7, #30]
		break;
 80064f2:	e001      	b.n	80064f8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064f4:	23fc      	movs	r3, #252	; 0xfc
 80064f6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d12a      	bne.n	8006556 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006500:	7fbb      	ldrb	r3, [r7, #30]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d124      	bne.n	8006550 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800650c:	897b      	ldrh	r3, [r7, #10]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	330c      	adds	r3, #12
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	61bb      	str	r3, [r7, #24]
						LimitChecksValue, LimitCheckId,
						TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800652c:	e013      	b.n	8006556 <VL53L0X_GetLimitCheckValue+0x10e>
						LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006534:	897b      	ldrh	r3, [r7, #10]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	330c      	adds	r3, #12
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	605a      	str	r2, [r3, #4]
						LimitChecksValue, LimitCheckId,
						TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006542:	897b      	ldrh	r3, [r7, #10]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800654e:	e002      	b.n	8006556 <VL53L0X_GetLimitCheckValue+0x10e>
						LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006556:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop

08006564 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		uint8_t *pLimitCheckEnable)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	460b      	mov	r3, r1
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	2b05      	cmp	r3, #5
 800657a:	d905      	bls.n	8006588 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800657c:	23fc      	movs	r3, #252	; 0xfc
 800657e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e008      	b.n	800659a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006588:	897b      	ldrh	r3, [r7, #10]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006592:	75bb      	strb	r3, [r7, #22]
				LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7dba      	ldrb	r2, [r7, #22]
 8006598:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800659a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <VL53L0X_GetWrapAroundCheckEnable>:

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
		uint8_t *pWrapAroundCheckEnable)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80065b8:	f107 030e 	add.w	r3, r7, #14
 80065bc:	461a      	mov	r2, r3
 80065be:	2101      	movs	r1, #1
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f004 f995 	bl	800a8f0 <VL53L0X_RdByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80065ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10e      	bne.n	80065f0 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80065d2:	7bba      	ldrb	r2, [r7, #14]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da03      	bge.n	80065ea <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	e002      	b.n	80065f0 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80065f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781a      	ldrb	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
		uint8_t *pSequenceStepEnabled)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	72fb      	strb	r3, [r7, #11]
 800661e:	4613      	mov	r3, r2
 8006620:	72bb      	strb	r3, [r7, #10]
	UNUSED(Dev);
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	2b04      	cmp	r3, #4
 8006630:	d836      	bhi.n	80066a0 <sequence_step_enabled+0x90>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <sequence_step_enabled+0x28>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	0800664d 	.word	0x0800664d
 800663c:	0800665f 	.word	0x0800665f
 8006640:	08006671 	.word	0x08006671
 8006644:	08006683 	.word	0x08006683
 8006648:	08006695 	.word	0x08006695
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800664c:	7abb      	ldrb	r3, [r7, #10]
 800664e:	111b      	asrs	r3, r3, #4
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	701a      	strb	r2, [r3, #0]
		break;
 800665c:	e022      	b.n	80066a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800665e:	7abb      	ldrb	r3, [r7, #10]
 8006660:	10db      	asrs	r3, r3, #3
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	701a      	strb	r2, [r3, #0]
		break;
 800666e:	e019      	b.n	80066a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006670:	7abb      	ldrb	r3, [r7, #10]
 8006672:	109b      	asrs	r3, r3, #2
 8006674:	b2db      	uxtb	r3, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	701a      	strb	r2, [r3, #0]
		break;
 8006680:	e010      	b.n	80066a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006682:	7abb      	ldrb	r3, [r7, #10]
 8006684:	119b      	asrs	r3, r3, #6
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	b2da      	uxtb	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	701a      	strb	r2, [r3, #0]
		break;
 8006692:	e007      	b.n	80066a4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006694:	7abb      	ldrb	r3, [r7, #10]
 8006696:	09db      	lsrs	r3, r3, #7
 8006698:	b2da      	uxtb	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	701a      	strb	r2, [r3, #0]
		break;
 800669e:	e001      	b.n	80066a4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80066a0:	23fc      	movs	r3, #252	; 0xfc
 80066a2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80066a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <VL53L0X_GetSequenceStepEnables>:

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
		VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066c6:	f107 030e 	add.w	r3, r7, #14
 80066ca:	461a      	mov	r2, r3
 80066cc:	2101      	movs	r1, #1
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f004 f90e 	bl	800a8f0 <VL53L0X_RdByte>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
			&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80066d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d107      	bne.n	80066f0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80066e0:	7bba      	ldrb	r2, [r7, #14]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff ff92 	bl	8006610 <sequence_step_enabled>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
				VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
				&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80066f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80066f8:	7bba      	ldrb	r2, [r7, #14]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	3302      	adds	r3, #2
 80066fe:	2101      	movs	r1, #1
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ff85 	bl	8006610 <sequence_step_enabled>
 8006706:	4603      	mov	r3, r0
 8006708:	73fb      	strb	r3, [r7, #15]
				VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
				&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800670a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d108      	bne.n	8006724 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006712:	7bba      	ldrb	r2, [r7, #14]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	2102      	movs	r1, #2
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff ff78 	bl	8006610 <sequence_step_enabled>
 8006720:	4603      	mov	r3, r0
 8006722:	73fb      	strb	r3, [r7, #15]
				VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
				&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d108      	bne.n	800673e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800672c:	7bba      	ldrb	r2, [r7, #14]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	3303      	adds	r3, #3
 8006732:	2103      	movs	r1, #3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ff6b 	bl	8006610 <sequence_step_enabled>
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
				&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800673e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d108      	bne.n	8006758 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006746:	7bba      	ldrb	r2, [r7, #14]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	3304      	adds	r3, #4
 800674c:	2104      	movs	r1, #4
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7ff ff5e 	bl	8006610 <sequence_step_enabled>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
				&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	3301      	adds	r3, #1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	4603      	mov	r3, r0
 8006792:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b2db      	uxtb	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <VL53L0X_set_vcsel_pulse_period>:


VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
		VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
 80067bc:	4613      	mov	r3, r2
 80067be:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80067c6:	230c      	movs	r3, #12
 80067c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80067cc:	2312      	movs	r3, #18
 80067ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80067d2:	2308      	movs	r3, #8
 80067d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80067d8:	230e      	movs	r3, #14
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80067e2:	78bb      	ldrb	r3, [r7, #2]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067ee:	23fc      	movs	r3, #252	; 0xfc
 80067f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80067f4:	e020      	b.n	8006838 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <VL53L0X_set_vcsel_pulse_period+0x68>
 80067fc:	78ba      	ldrb	r2, [r7, #2]
 80067fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006802:	429a      	cmp	r2, r3
 8006804:	d304      	bcc.n	8006810 <VL53L0X_set_vcsel_pulse_period+0x60>
			(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006806:	78ba      	ldrb	r2, [r7, #2]
 8006808:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800680c:	429a      	cmp	r2, r3
 800680e:	d903      	bls.n	8006818 <VL53L0X_set_vcsel_pulse_period+0x68>
					VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006810:	23fc      	movs	r3, #252	; 0xfc
 8006812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006816:	e00f      	b.n	8006838 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d10c      	bne.n	8006838 <VL53L0X_set_vcsel_pulse_period+0x88>
 800681e:	78ba      	ldrb	r2, [r7, #2]
 8006820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006824:	429a      	cmp	r2, r3
 8006826:	d304      	bcc.n	8006832 <VL53L0X_set_vcsel_pulse_period+0x82>
			(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006828:	78ba      	ldrb	r2, [r7, #2]
 800682a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800682e:	429a      	cmp	r2, r3
 8006830:	d902      	bls.n	8006838 <VL53L0X_set_vcsel_pulse_period+0x88>
					VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006832:	23fc      	movs	r3, #252	; 0xfc
 8006834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006844:	e239      	b.n	8006cba <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d150      	bne.n	80068ee <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800684c:	78bb      	ldrb	r3, [r7, #2]
 800684e:	2b0c      	cmp	r3, #12
 8006850:	d110      	bne.n	8006874 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006852:	2218      	movs	r2, #24
 8006854:	2157      	movs	r1, #87	; 0x57
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f004 f811 	bl	800a87e <VL53L0X_WrByte>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x18);
			Status = VL53L0X_WrByte(Dev,
 8006862:	2208      	movs	r2, #8
 8006864:	2156      	movs	r1, #86	; 0x56
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f004 f809 	bl	800a87e <VL53L0X_WrByte>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006872:	e17f      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006874:	78bb      	ldrb	r3, [r7, #2]
 8006876:	2b0e      	cmp	r3, #14
 8006878:	d110      	bne.n	800689c <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800687a:	2230      	movs	r2, #48	; 0x30
 800687c:	2157      	movs	r1, #87	; 0x57
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f003 fffd 	bl	800a87e <VL53L0X_WrByte>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x30);
			Status = VL53L0X_WrByte(Dev,
 800688a:	2208      	movs	r2, #8
 800688c:	2156      	movs	r1, #86	; 0x56
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f003 fff5 	bl	800a87e <VL53L0X_WrByte>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800689a:	e16b      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800689c:	78bb      	ldrb	r3, [r7, #2]
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d110      	bne.n	80068c4 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80068a2:	2240      	movs	r2, #64	; 0x40
 80068a4:	2157      	movs	r1, #87	; 0x57
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f003 ffe9 	bl	800a87e <VL53L0X_WrByte>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x40);
			Status = VL53L0X_WrByte(Dev,
 80068b2:	2208      	movs	r2, #8
 80068b4:	2156      	movs	r1, #86	; 0x56
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f003 ffe1 	bl	800a87e <VL53L0X_WrByte>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068c2:	e157      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80068c4:	78bb      	ldrb	r3, [r7, #2]
 80068c6:	2b12      	cmp	r3, #18
 80068c8:	f040 8154 	bne.w	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80068cc:	2250      	movs	r2, #80	; 0x50
 80068ce:	2157      	movs	r1, #87	; 0x57
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f003 ffd4 	bl	800a87e <VL53L0X_WrByte>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x50);
			Status = VL53L0X_WrByte(Dev,
 80068dc:	2208      	movs	r2, #8
 80068de:	2156      	movs	r1, #86	; 0x56
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f003 ffcc 	bl	800a87e <VL53L0X_WrByte>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068ec:	e142      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
					VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	f040 813f 	bne.w	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80068f6:	78bb      	ldrb	r3, [r7, #2]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d14c      	bne.n	8006996 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80068fc:	2210      	movs	r2, #16
 80068fe:	2148      	movs	r1, #72	; 0x48
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f003 ffbc 	bl	800a87e <VL53L0X_WrByte>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x10);
			Status = VL53L0X_WrByte(Dev,
 800690c:	2208      	movs	r2, #8
 800690e:	2147      	movs	r1, #71	; 0x47
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f003 ffb4 	bl	800a87e <VL53L0X_WrByte>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);

			Status |= VL53L0X_WrByte(Dev,
 800691c:	2202      	movs	r2, #2
 800691e:	2132      	movs	r1, #50	; 0x32
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f003 ffac 	bl	800a87e <VL53L0X_WrByte>
 8006926:	4603      	mov	r3, r0
 8006928:	461a      	mov	r2, r3
 800692a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692e:	4313      	orrs	r3, r2
 8006930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006934:	220c      	movs	r2, #12
 8006936:	2130      	movs	r1, #48	; 0x30
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f003 ffa0 	bl	800a87e <VL53L0X_WrByte>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006946:	4313      	orrs	r3, r2
 8006948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800694c:	2201      	movs	r2, #1
 800694e:	21ff      	movs	r1, #255	; 0xff
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f003 ff94 	bl	800a87e <VL53L0X_WrByte>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800695e:	4313      	orrs	r3, r2
 8006960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006964:	2230      	movs	r2, #48	; 0x30
 8006966:	2130      	movs	r1, #48	; 0x30
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f003 ff88 	bl	800a87e <VL53L0X_WrByte>
 800696e:	4603      	mov	r3, r0
 8006970:	461a      	mov	r2, r3
 8006972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006976:	4313      	orrs	r3, r2
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_LIM,
					0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800697c:	2200      	movs	r2, #0
 800697e:	21ff      	movs	r1, #255	; 0xff
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f003 ff7c 	bl	800a87e <VL53L0X_WrByte>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800698e:	4313      	orrs	r3, r2
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006994:	e0ee      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006996:	78bb      	ldrb	r3, [r7, #2]
 8006998:	2b0a      	cmp	r3, #10
 800699a:	d14c      	bne.n	8006a36 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800699c:	2228      	movs	r2, #40	; 0x28
 800699e:	2148      	movs	r1, #72	; 0x48
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f003 ff6c 	bl	800a87e <VL53L0X_WrByte>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x28);
			Status = VL53L0X_WrByte(Dev,
 80069ac:	2208      	movs	r2, #8
 80069ae:	2147      	movs	r1, #71	; 0x47
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f003 ff64 	bl	800a87e <VL53L0X_WrByte>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);

			Status |= VL53L0X_WrByte(Dev,
 80069bc:	2203      	movs	r2, #3
 80069be:	2132      	movs	r1, #50	; 0x32
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f003 ff5c 	bl	800a87e <VL53L0X_WrByte>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80069d4:	2209      	movs	r2, #9
 80069d6:	2130      	movs	r1, #48	; 0x30
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f003 ff50 	bl	800a87e <VL53L0X_WrByte>
 80069de:	4603      	mov	r3, r0
 80069e0:	461a      	mov	r2, r3
 80069e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80069ec:	2201      	movs	r2, #1
 80069ee:	21ff      	movs	r1, #255	; 0xff
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f003 ff44 	bl	800a87e <VL53L0X_WrByte>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006a04:	2220      	movs	r2, #32
 8006a06:	2130      	movs	r1, #48	; 0x30
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f003 ff38 	bl	800a87e <VL53L0X_WrByte>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	461a      	mov	r2, r3
 8006a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_LIM,
					0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	21ff      	movs	r1, #255	; 0xff
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f003 ff2c 	bl	800a87e <VL53L0X_WrByte>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a34:	e09e      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006a36:	78bb      	ldrb	r3, [r7, #2]
 8006a38:	2b0c      	cmp	r3, #12
 8006a3a:	d14c      	bne.n	8006ad6 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006a3c:	2238      	movs	r2, #56	; 0x38
 8006a3e:	2148      	movs	r1, #72	; 0x48
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f003 ff1c 	bl	800a87e <VL53L0X_WrByte>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x38);
			Status = VL53L0X_WrByte(Dev,
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	2147      	movs	r1, #71	; 0x47
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f003 ff14 	bl	800a87e <VL53L0X_WrByte>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006a5c:	2203      	movs	r2, #3
 8006a5e:	2132      	movs	r1, #50	; 0x32
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f003 ff0c 	bl	800a87e <VL53L0X_WrByte>
 8006a66:	4603      	mov	r3, r0
 8006a68:	461a      	mov	r2, r3
 8006a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006a74:	2208      	movs	r2, #8
 8006a76:	2130      	movs	r1, #48	; 0x30
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f003 ff00 	bl	800a87e <VL53L0X_WrByte>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	461a      	mov	r2, r3
 8006a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	21ff      	movs	r1, #255	; 0xff
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f003 fef4 	bl	800a87e <VL53L0X_WrByte>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	2130      	movs	r1, #48	; 0x30
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f003 fee8 	bl	800a87e <VL53L0X_WrByte>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_LIM,
					0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006abc:	2200      	movs	r2, #0
 8006abe:	21ff      	movs	r1, #255	; 0xff
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f003 fedc 	bl	800a87e <VL53L0X_WrByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ad4:	e04e      	b.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006ad6:	78bb      	ldrb	r3, [r7, #2]
 8006ad8:	2b0e      	cmp	r3, #14
 8006ada:	d14b      	bne.n	8006b74 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8006adc:	2248      	movs	r2, #72	; 0x48
 8006ade:	2148      	movs	r1, #72	; 0x48
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f003 fecc 	bl	800a87e <VL53L0X_WrByte>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
					0x048);
			Status = VL53L0X_WrByte(Dev,
 8006aec:	2208      	movs	r2, #8
 8006aee:	2147      	movs	r1, #71	; 0x47
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f003 fec4 	bl	800a87e <VL53L0X_WrByte>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
					0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006afc:	2203      	movs	r2, #3
 8006afe:	2132      	movs	r1, #50	; 0x32
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f003 febc 	bl	800a87e <VL53L0X_WrByte>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006b14:	2207      	movs	r2, #7
 8006b16:	2130      	movs	r1, #48	; 0x30
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f003 feb0 	bl	800a87e <VL53L0X_WrByte>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	21ff      	movs	r1, #255	; 0xff
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f003 fea4 	bl	800a87e <VL53L0X_WrByte>
 8006b36:	4603      	mov	r3, r0
 8006b38:	461a      	mov	r2, r3
 8006b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006b44:	2220      	movs	r2, #32
 8006b46:	2130      	movs	r1, #48	; 0x30
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f003 fe98 	bl	800a87e <VL53L0X_WrByte>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	461a      	mov	r2, r3
 8006b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_REG_ALGO_PHASECAL_LIM,
					0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	21ff      	movs	r1, #255	; 0xff
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f003 fe8c 	bl	800a87e <VL53L0X_WrByte>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d17f      	bne.n	8006c7c <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006b7c:	78bb      	ldrb	r3, [r7, #2]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff fe03 	bl	800678a <VL53L0X_encode_vcsel_period>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		 * using the new VCSEL period.
		 *
		 * For the MSRC timeout, the same applies - this timeout being
		 * dependant on the pre-range vcsel period.
		 */
		switch (VcselPeriodType) {
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d045      	beq.n	8006c20 <VL53L0X_set_vcsel_pulse_period+0x470>
 8006b94:	e06e      	b.n	8006c74 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2103      	movs	r1, #3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f954 	bl	8006e4c <get_sequence_step_timeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006baa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006bb2:	f107 0310 	add.w	r3, r7, #16
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2102      	movs	r1, #2
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f946 	bl	8006e4c <get_sequence_step_timeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_SEQUENCESTEP_MSRC,
						&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006bc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006bce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2150      	movs	r1, #80	; 0x50
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f003 fe51 	bl	800a87e <VL53L0X_WrByte>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
						vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006be2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d108      	bne.n	8006bfc <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	461a      	mov	r2, r3
 8006bee:	2103      	movs	r1, #3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f003 f8ce 	bl	8009d92 <set_sequence_step_timeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_SEQUENCESTEP_PRE_RANGE,
						PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006bfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d108      	bne.n	8006c16 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	461a      	mov	r2, r3
 8006c08:	2102      	movs	r1, #2
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f003 f8c1 	bl	8009d92 <set_sequence_step_timeout>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_SEQUENCESTEP_MSRC,
						MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	78ba      	ldrb	r2, [r7, #2]
 8006c1a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
					Dev,
					PreRangeVcselPulsePeriod,
					VCSELPulsePeriodPCLK);
			break;
 8006c1e:	e02e      	b.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006c20:	f107 0318 	add.w	r3, r7, #24
 8006c24:	461a      	mov	r2, r3
 8006c26:	2104      	movs	r1, #4
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f90f 	bl	8006e4c <get_sequence_step_timeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006c3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c40:	461a      	mov	r2, r3
 8006c42:	2170      	movs	r1, #112	; 0x70
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f003 fe1a 	bl	800a87e <VL53L0X_WrByte>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
						vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006c50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d108      	bne.n	8006c6a <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f003 f897 	bl	8009d92 <set_sequence_step_timeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_SEQUENCESTEP_FINAL_RANGE,
						FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
					Dev,
					FinalRangeVcselPulsePeriod,
					VCSELPulsePeriodPCLK);
			break;
 8006c72:	e004      	b.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c74:	23fc      	movs	r3, #252	; 0xfc
 8006c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c7a:	e000      	b.n	8006c7e <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8006c7c:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006c7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	61fb      	str	r3, [r7, #28]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f003 fa51 	bl	800a136 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006c94:	4603      	mov	r3, r0
 8006c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8006c9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8006ca2:	f107 010f 	add.w	r1, r7, #15
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 ffb3 	bl	8007c16 <VL53L0X_perform_phase_calibration>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006cb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3728      	adds	r7, #40	; 0x28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
		VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006cd6:	78ba      	ldrb	r2, [r7, #2]
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fd67 	bl	80067b0 <VL53L0X_set_vcsel_pulse_period>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]
			VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
		VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b086      	sub	sp, #24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d00a      	beq.n	8006d24 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006d0e:	e013      	b.n	8006d38 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006d10:	f107 0316 	add.w	r3, r7, #22
 8006d14:	461a      	mov	r2, r3
 8006d16:	2150      	movs	r1, #80	; 0x50
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f003 fde9 	bl	800a8f0 <VL53L0X_RdByte>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
				&vcsel_period_reg);
		break;
 8006d22:	e00b      	b.n	8006d3c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006d24:	f107 0316 	add.w	r3, r7, #22
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2170      	movs	r1, #112	; 0x70
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f003 fddf 	bl	800a8f0 <VL53L0X_RdByte>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
				&vcsel_period_reg);
		break;
 8006d36:	e001      	b.n	8006d3c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d38:	23fc      	movs	r3, #252	; 0xfc
 8006d3a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d107      	bne.n	8006d54 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
				VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006d44:	7dbb      	ldrb	r3, [r7, #22]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fd0c 	bl	8006764 <VL53L0X_decode_vcsel_period>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	701a      	strb	r2, [r3, #0]

	return Status;
 8006d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
		VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	4619      	mov	r1, r3
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff ffba 	bl	8006cf2 <VL53L0X_get_vcsel_pulse_period>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
			pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	4603      	mov	r3, r0
 8006d96:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	0a12      	lsrs	r2, r2, #8
 8006da4:	b292      	uxth	r2, r2
 8006da6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <VL53L0X_calc_macro_period_ps>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b087      	sub	sp, #28
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8006dc6:	f240 6277 	movw	r2, #1655	; 0x677
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8006dd2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006dd6:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006dd8:	78fb      	ldrb	r3, [r7, #3]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006de8:	68bb      	ldr	r3, [r7, #8]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	807b      	strh	r3, [r7, #2]
 8006e04:	4613      	mov	r3, r2
 8006e06:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006e0c:	787b      	ldrb	r3, [r7, #1]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff ffd2 	bl	8006dba <VL53L0X_calc_macro_period_ps>
 8006e16:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <VL53L0X_calc_timeout_us+0x50>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	099b      	lsrs	r3, r3, #6
 8006e26:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
			((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006e34:	4a04      	ldr	r2, [pc, #16]	; (8006e48 <VL53L0X_calc_timeout_us+0x50>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	099b      	lsrs	r3, r3, #6
 8006e3c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006e3e:	697b      	ldr	r3, [r7, #20]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	10624dd3 	.word	0x10624dd3

08006e4c <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId,
		uint32_t *pTimeOutMicroSecs)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	460b      	mov	r3, r1
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006e72:	7afb      	ldrb	r3, [r7, #11]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <get_sequence_step_timeout+0x38>
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d002      	beq.n	8006e84 <get_sequence_step_timeout+0x38>
			(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d128      	bne.n	8006ed6 <get_sequence_step_timeout+0x8a>
			(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e88:	461a      	mov	r2, r3
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7ff ff67 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006e98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d109      	bne.n	8006eb4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006ea0:	f107 0320 	add.w	r3, r7, #32
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	2146      	movs	r1, #70	; 0x46
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f003 fd21 	bl	800a8f0 <VL53L0X_RdByte>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff ff67 	bl	8006d8e <VL53L0X_decode_timeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ec4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006eca:	4619      	mov	r1, r3
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff ff93 	bl	8006df8 <VL53L0X_calc_timeout_us>
 8006ed2:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ed4:	e092      	b.n	8006ffc <get_sequence_step_timeout+0x1b0>
				MsrcTimeOutMClks,
				CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d135      	bne.n	8006f48 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006edc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ff3b 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006ef0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 8081 	bne.w	8006ffc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006efa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006efe:	461a      	mov	r2, r3
 8006f00:	2100      	movs	r1, #0
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f7ff ff2c 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006f0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006f16:	f107 031e 	add.w	r3, r7, #30
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2151      	movs	r1, #81	; 0x51
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f003 fd02 	bl	800a928 <VL53L0X_RdWord>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
						&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f2a:	8bfb      	ldrh	r3, [r7, #30]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff2e 	bl	8006d8e <VL53L0X_decode_timeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006f36:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006f3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff5a 	bl	8006df8 <VL53L0X_calc_timeout_us>
 8006f44:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f46:	e059      	b.n	8006ffc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d156      	bne.n	8006ffc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7ff fbad 	bl	80066b4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01d      	beq.n	8006fa0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7ff fef7 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006f80:	f107 031e 	add.w	r3, r7, #30
 8006f84:	461a      	mov	r2, r3
 8006f86:	2151      	movs	r1, #81	; 0x51
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f003 fccd 	bl	800a928 <VL53L0X_RdWord>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
						&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f94:	8bfb      	ldrh	r3, [r7, #30]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fef9 	bl	8006d8e <VL53L0X_decode_timeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006fa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006fa8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006fac:	461a      	mov	r2, r3
 8006fae:	2101      	movs	r1, #1
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fed5 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006fbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10f      	bne.n	8006fe4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	461a      	mov	r2, r3
 8006fca:	2171      	movs	r1, #113	; 0x71
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f003 fcab 	bl	800a928 <VL53L0X_RdWord>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
					&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006fd8:	8bbb      	ldrh	r3, [r7, #28]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff fed7 	bl	8006d8e <VL53L0X_decode_timeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006fec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff feff 	bl	8006df8 <VL53L0X_calc_timeout_us>
 8006ffa:	62b8      	str	r0, [r7, #40]	; 0x28
				FinalRangeTimeOutMClks,
				CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007000:	601a      	str	r2, [r3, #0]

	return Status;
 8007002:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007006:	4618      	mov	r0, r3
 8007008:	3730      	adds	r7, #48	; 0x30
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b090      	sub	sp, #64	; 0x40
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007018:	2300      	movs	r3, #0
 800701a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800701e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007022:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007024:	f240 7376 	movw	r3, #1910	; 0x776
 8007028:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800702a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007030:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007034:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007036:	f240 234e 	movw	r3, #590	; 0x24e
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800703c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007042:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007048:	f240 2326 	movw	r3, #550	; 0x226
 800704c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
	= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007056:	441a      	add	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800705c:	f107 0318 	add.w	r3, r7, #24
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fb26 	bl	80066b4 <VL53L0X_GetSequenceStepEnables>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800706e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007076:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800707a:	e075      	b.n	8007168 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800707c:	7e3b      	ldrb	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
			SchedulerSequenceSteps.MsrcOn ||
 8007082:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
			SchedulerSequenceSteps.DssOn) {
 8007088:	7ebb      	ldrb	r3, [r7, #26]
			SchedulerSequenceSteps.MsrcOn ||
 800708a:	2b00      	cmp	r3, #0
 800708c:	d030      	beq.n	80070f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800708e:	f107 0310 	add.w	r3, r7, #16
 8007092:	461a      	mov	r2, r3
 8007094:	2102      	movs	r1, #2
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fed8 	bl	8006e4c <get_sequence_step_timeout>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80070a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d122      	bne.n	80070f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80070aa:	7e3b      	ldrb	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
						MsrcDccTccTimeoutMicroSeconds +
 80070b4:	6939      	ldr	r1, [r7, #16]
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070ba:	441a      	add	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	601a      	str	r2, [r3, #0]
						TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80070c0:	7ebb      	ldrb	r3, [r7, #26]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
						2 * (MsrcDccTccTimeoutMicroSeconds +
 80070ca:	6939      	ldr	r1, [r7, #16]
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	440b      	add	r3, r1
 80070d0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070d2:	441a      	add	r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	e00a      	b.n	80070f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
								DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80070da:	7e7b      	ldrb	r3, [r7, #25]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
						MsrcDccTccTimeoutMicroSeconds +
 80070e4:	6939      	ldr	r1, [r7, #16]
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070ea:	441a      	add	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	601a      	str	r2, [r3, #0]
						MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d114      	bne.n	8007122 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80070f8:	7efb      	ldrb	r3, [r7, #27]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80070fe:	f107 030c 	add.w	r3, r7, #12
 8007102:	461a      	mov	r2, r3
 8007104:	2103      	movs	r1, #3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fea0 	bl	8006e4c <get_sequence_step_timeout>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
					PreRangeTimeoutMicroSeconds +
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800711c:	441a      	add	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	601a      	str	r2, [r3, #0]
					PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007122:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007126:	2b00      	cmp	r3, #0
 8007128:	d114      	bne.n	8007154 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800712a:	7f3b      	ldrb	r3, [r7, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d011      	beq.n	8007154 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	461a      	mov	r2, r3
 8007136:	2104      	movs	r1, #4
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff fe87 	bl	8006e4c <get_sequence_step_timeout>
 800713e:	4603      	mov	r3, r0
 8007140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
					(FinalRangeTimeoutMicroSeconds +
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800714e:	441a      	add	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	601a      	str	r2, [r3, #0]
							FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007154:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	615a      	str	r2, [r3, #20]
				MeasurementTimingBudgetMicroSeconds,
				*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007164:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007168:	4618      	mov	r0, r3
 800716a:	3740      	adds	r7, #64	; 0x40
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff ff44 	bl	800700e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
			pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800718a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <VL53L0X_GetDeviceParameters>:

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
		VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b084      	sub	sp, #16
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff f8d3 	bl	8006354 <VL53L0X_GetDeviceMode>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80071b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff f8da 	bl	800637a <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80071d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	3310      	adds	r3, #16
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f8fb 	bl	80063e2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80071f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	3314      	adds	r3, #20
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7ff f895 	bl	800632e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007204:	4603      	mov	r3, r0
 8007206:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d134      	bne.n	800727a <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007210:	2300      	movs	r3, #0
 8007212:	60bb      	str	r3, [r7, #8]
 8007214:	e02a      	b.n	800726c <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d12a      	bne.n	8007274 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	b299      	uxth	r1, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	3308      	adds	r3, #8
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	4413      	add	r3, r2
 800722c:	3304      	adds	r3, #4
 800722e:	461a      	mov	r2, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff f909 	bl	8006448 <VL53L0X_GetLimitCheckValue>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	4313      	orrs	r3, r2
 800723e:	73fb      	strb	r3, [r7, #15]
						&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d117      	bne.n	8007278 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	b299      	uxth	r1, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3318      	adds	r3, #24
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	4413      	add	r3, r2
 8007254:	461a      	mov	r2, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff f984 	bl	8006564 <VL53L0X_GetLimitCheckEnable>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	4313      	orrs	r3, r2
 8007264:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3301      	adds	r3, #1
 800726a:	60bb      	str	r3, [r7, #8]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b05      	cmp	r3, #5
 8007270:	ddd1      	ble.n	8007216 <VL53L0X_GetDeviceParameters+0x80>
 8007272:	e002      	b.n	800727a <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007274:	bf00      	nop
 8007276:	e000      	b.n	800727a <VL53L0X_GetDeviceParameters+0xe4>
						&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007278:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800727a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d107      	bne.n	8007292 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	333c      	adds	r3, #60	; 0x3c
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f98e 	bl	80065aa <VL53L0X_GetWrapAroundCheckEnable>
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff ff65 	bl	8007170 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t LimitCheckValue)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	460b      	mov	r3, r1
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80072ca:	897b      	ldrh	r3, [r7, #10]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d4:	75bb      	strb	r3, [r7, #22]
			Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80072d6:	7dbb      	ldrb	r3, [r7, #22]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80072dc:	897b      	ldrh	r3, [r7, #10]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	330c      	adds	r3, #12
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e040      	b.n	800736e <VL53L0X_SetLimitCheckValue+0xb6>
				LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	2b05      	cmp	r3, #5
 80072f0:	d830      	bhi.n	8007354 <VL53L0X_SetLimitCheckValue+0x9c>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <VL53L0X_SetLimitCheckValue+0x40>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	08007311 	.word	0x08007311
 80072fc:	08007319 	.word	0x08007319
 8007300:	0800732f 	.word	0x0800732f
 8007304:	08007337 	.word	0x08007337
 8007308:	0800733f 	.word	0x0800733f
 800730c:	0800733f 	.word	0x0800733f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	635a      	str	r2, [r3, #52]	; 0x34
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
					LimitCheckValue);
			break;
 8007316:	e01f      	b.n	8007358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	2144      	movs	r1, #68	; 0x44
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f003 fac3 	bl	800a8ae <VL53L0X_WrWord>
 8007328:	4603      	mov	r3, r0
 800732a:	75fb      	strb	r3, [r7, #23]
							LimitCheckValue));

			break;
 800732c:	e014      	b.n	8007358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	63da      	str	r2, [r3, #60]	; 0x3c
					VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
					LimitCheckValue);

			break;
 8007334:	e010      	b.n	8007358 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
					VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
					LimitCheckValue);

			break;
 800733c:	e00c      	b.n	8007358 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	2164      	movs	r1, #100	; 0x64
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f003 fab0 	bl	800a8ae <VL53L0X_WrWord>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
							LimitCheckValue));

			break;
 8007352:	e001      	b.n	8007358 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007354:	23fc      	movs	r3, #252	; 0xfc
 8007356:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007360:	897b      	ldrh	r3, [r7, #10]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	330c      	adds	r3, #12
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	605a      	str	r2, [r3, #4]
					LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800736e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop

0800737c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800737c:	b5b0      	push	{r4, r5, r7, lr}
 800737e:	b096      	sub	sp, #88	; 0x58
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFE,
			0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800738a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800738e:	2b00      	cmp	r3, #0
 8007390:	d107      	bne.n	80073a2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007392:	2200      	movs	r2, #0
 8007394:	2188      	movs	r1, #136	; 0x88
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f003 fa71 	bl	800a87e <VL53L0X_WrByte>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073b0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80073ba:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a9e      	ldr	r2, [pc, #632]	; (800763c <VL53L0X_DataInit+0x2c0>)
 80073c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a9d      	ldr	r2, [pc, #628]	; (8007640 <VL53L0X_DataInit+0x2c4>)
 80073ca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80073d4:	f107 0310 	add.w	r3, r7, #16
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fedb 	bl	8007196 <VL53L0X_GetDeviceParameters>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80073e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d112      	bne.n	8007414 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80073ee:	2300      	movs	r3, #0
 80073f0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80073f2:	2300      	movs	r3, #0
 80073f4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f103 0410 	add.w	r4, r3, #16
 80073fc:	f107 0510 	add.w	r5, r7, #16
 8007400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800740a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2264      	movs	r2, #100	; 0x64
 8007418:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007422:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800742c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007436:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007442:	2201      	movs	r2, #1
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f003 fa19 	bl	800a87e <VL53L0X_WrByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007454:	4313      	orrs	r3, r2
 8007456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800745a:	2201      	movs	r2, #1
 800745c:	21ff      	movs	r1, #255	; 0xff
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f003 fa0d 	bl	800a87e <VL53L0X_WrByte>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800746c:	4313      	orrs	r3, r2
 800746e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f003 fa01 	bl	800a87e <VL53L0X_WrByte>
 800747c:	4603      	mov	r3, r0
 800747e:	461a      	mov	r2, r3
 8007480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007484:	4313      	orrs	r3, r2
 8007486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800748a:	f107 030f 	add.w	r3, r7, #15
 800748e:	461a      	mov	r2, r3
 8007490:	2191      	movs	r1, #145	; 0x91
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f003 fa2c 	bl	800a8f0 <VL53L0X_RdByte>
 8007498:	4603      	mov	r3, r0
 800749a:	461a      	mov	r2, r3
 800749c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80074a6:	7bfa      	ldrb	r2, [r7, #15]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80074ae:	2201      	movs	r2, #1
 80074b0:	2100      	movs	r1, #0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f003 f9e3 	bl	800a87e <VL53L0X_WrByte>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80074c6:	2200      	movs	r2, #0
 80074c8:	21ff      	movs	r1, #255	; 0xff
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f003 f9d7 	bl	800a87e <VL53L0X_WrByte>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074d8:	4313      	orrs	r3, r2
 80074da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80074de:	2200      	movs	r2, #0
 80074e0:	2180      	movs	r1, #128	; 0x80
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 f9cb 	bl	800a87e <VL53L0X_WrByte>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80074f6:	2300      	movs	r3, #0
 80074f8:	653b      	str	r3, [r7, #80]	; 0x50
 80074fa:	e014      	b.n	8007526 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80074fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007500:	2b00      	cmp	r3, #0
 8007502:	d114      	bne.n	800752e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007506:	b29b      	uxth	r3, r3
 8007508:	2201      	movs	r2, #1
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f002 fec7 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 8007512:	4603      	mov	r3, r0
 8007514:	461a      	mov	r2, r3
 8007516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800751a:	4313      	orrs	r3, r2
 800751c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007522:	3301      	adds	r3, #1
 8007524:	653b      	str	r3, [r7, #80]	; 0x50
 8007526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007528:	2b05      	cmp	r3, #5
 800752a:	dde7      	ble.n	80074fc <VL53L0X_DataInit+0x180>
 800752c:	e000      	b.n	8007530 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800752e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007530:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007538:	2200      	movs	r2, #0
 800753a:	2102      	movs	r1, #2
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f002 feaf 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007548:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800754c:	2b00      	cmp	r3, #0
 800754e:	d107      	bne.n	8007560 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007550:	2200      	movs	r2, #0
 8007552:	2103      	movs	r1, #3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f002 fea3 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 800755a:	4603      	mov	r3, r0
 800755c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007560:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007568:	2200      	movs	r2, #0
 800756a:	2104      	movs	r1, #4
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 fe97 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 8007572:	4603      	mov	r3, r0
 8007574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007578:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800757c:	2b00      	cmp	r3, #0
 800757e:	d107      	bne.n	8007590 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007580:	2200      	movs	r2, #0
 8007582:	2105      	movs	r1, #5
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f002 fe8b 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007590:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007598:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fe8a 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80075aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d108      	bne.n	80075c4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80075b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80075b6:	2101      	movs	r1, #1
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fe7d 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
		/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d108      	bne.n	80075de <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80075cc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80075d0:	2102      	movs	r1, #2
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fe70 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d107      	bne.n	80075f6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80075e6:	2200      	movs	r2, #0
 80075e8:	2103      	movs	r1, #3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff fe64 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10f      	bne.n	800761e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	22ff      	movs	r2, #255	; 0xff
 8007602:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007606:	22ff      	movs	r2, #255	; 0xff
 8007608:	2101      	movs	r1, #1
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f003 f937 	bl	800a87e <VL53L0X_WrByte>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800761e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800762e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007632:	4618      	mov	r0, r3
 8007634:	3758      	adds	r7, #88	; 0x58
 8007636:	46bd      	mov	sp, r7
 8007638:	bdb0      	pop	{r4, r5, r7, pc}
 800763a:	bf00      	nop
 800763c:	00016b85 	.word	0x00016b85
 8007640:	000970a4 	.word	0x000970a4

08007644 <VL53L0X_check_part_used>:

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007650:	2300      	movs	r3, #0
 8007652:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007654:	2102      	movs	r1, #2
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7fe f95d 	bl	8005916 <VL53L0X_get_info_from_device>
 800765c:	4603      	mov	r3, r0
 800765e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8007660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11c      	bne.n	80076a2 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800766e:	75bb      	strb	r3, [r7, #22]

		if (ModuleIdInt == 0) {
 8007670:	7dbb      	ldrb	r3, [r7, #22]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d107      	bne.n	8007686 <VL53L0X_check_part_used+0x42>
			*Revision = 0;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3340      	adds	r3, #64	; 0x40
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e00d      	b.n	80076a2 <VL53L0X_check_part_used+0x5e>
		} else {
			*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	701a      	strb	r2, [r3, #0]
			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	33f3      	adds	r3, #243	; 0xf3
 8007694:	613b      	str	r3, [r7, #16]
					ProductId);
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3340      	adds	r3, #64	; 0x40
 800769a:	6939      	ldr	r1, [r7, #16]
 800769c:	4618      	mov	r0, r3
 800769e:	f003 fcff 	bl	800b0a0 <strcpy>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <VL53L0X_get_device_info>:

VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80076b0:	b5b0      	push	{r4, r5, r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 80076be:	f107 030d 	add.w	r3, r7, #13
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ffbc 	bl	8007644 <VL53L0X_check_part_used>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 80076d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d13b      	bne.n	8007750 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 80076d8:	7b7b      	ldrb	r3, [r7, #13]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	4a30      	ldr	r2, [pc, #192]	; (80077a4 <VL53L0X_get_device_info+0xf4>)
 80076e2:	461c      	mov	r4, r3
 80076e4:	4613      	mov	r3, r2
 80076e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076e8:	6020      	str	r0, [r4, #0]
 80076ea:	6061      	str	r1, [r4, #4]
 80076ec:	60a2      	str	r2, [r4, #8]
 80076ee:	e027      	b.n	8007740 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80076f0:	7b7b      	ldrb	r3, [r7, #13]
 80076f2:	2b22      	cmp	r3, #34	; 0x22
 80076f4:	d80b      	bhi.n	800770e <VL53L0X_get_device_info+0x5e>
 80076f6:	7b7b      	ldrb	r3, [r7, #13]
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d008      	beq.n	800770e <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <VL53L0X_get_device_info+0xf8>)
 8007700:	461c      	mov	r4, r3
 8007702:	4613      	mov	r3, r2
 8007704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007706:	6020      	str	r0, [r4, #0]
 8007708:	6061      	str	r1, [r4, #4]
 800770a:	60a2      	str	r2, [r4, #8]
 800770c:	e018      	b.n	8007740 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800770e:	7b7b      	ldrb	r3, [r7, #13]
 8007710:	2b26      	cmp	r3, #38	; 0x26
 8007712:	d808      	bhi.n	8007726 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	4a25      	ldr	r2, [pc, #148]	; (80077ac <VL53L0X_get_device_info+0xfc>)
 8007718:	461c      	mov	r4, r3
 800771a:	4613      	mov	r3, r2
 800771c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800771e:	6020      	str	r0, [r4, #0]
 8007720:	6061      	str	r1, [r4, #4]
 8007722:	60a2      	str	r2, [r4, #8]
 8007724:	e00c      	b.n	8007740 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <VL53L0X_get_device_info+0x100>)
 800772a:	461d      	mov	r5, r3
 800772c:	4614      	mov	r4, r2
 800772e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007730:	6028      	str	r0, [r5, #0]
 8007732:	6069      	str	r1, [r5, #4]
 8007734:	60aa      	str	r2, [r5, #8]
 8007736:	60eb      	str	r3, [r5, #12]
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	6128      	str	r0, [r5, #16]
 800773c:	7923      	ldrb	r3, [r4, #4]
 800773e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	3320      	adds	r3, #32
 8007744:	491b      	ldr	r1, [pc, #108]	; (80077b4 <VL53L0X_get_device_info+0x104>)
 8007746:	461a      	mov	r2, r3
 8007748:	460b      	mov	r3, r1
 800774a:	cb03      	ldmia	r3!, {r0, r1}
 800774c:	6010      	str	r0, [r2, #0]
 800774e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	3360      	adds	r3, #96	; 0x60
 800775c:	461a      	mov	r2, r3
 800775e:	21c0      	movs	r1, #192	; 0xc0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f003 f8c5 	bl	800a8f0 <VL53L0X_RdByte>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800776a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d112      	bne.n	8007798 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 8007772:	f107 030e 	add.w	r3, r7, #14
 8007776:	461a      	mov	r2, r3
 8007778:	21c2      	movs	r1, #194	; 0xc2
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f003 f8b8 	bl	800a8f0 <VL53L0X_RdByte>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
				(revision_id & 0xF0) >> 4;
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8007798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bdb0      	pop	{r4, r5, r7, pc}
 80077a4:	0800c44c 	.word	0x0800c44c
 80077a8:	0800c458 	.word	0x0800c458
 80077ac:	0800c464 	.word	0x0800c464
 80077b0:	0800c470 	.word	0x0800c470
 80077b4:	0800c488 	.word	0x0800c488

080077b8 <VL53L0X_GetDeviceInfo>:

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff71 	bl	80076b0 <VL53L0X_get_device_info>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80077d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
		uint32_t *pInterruptMaskStatus)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80077ec:	f107 030e 	add.w	r3, r7, #14
 80077f0:	461a      	mov	r2, r3
 80077f2:	2113      	movs	r1, #19
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f003 f87b 	bl	800a8f0 <VL53L0X_RdByte>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	f003 0207 	and.w	r2, r3, #7
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007808:	7bbb      	ldrb	r3, [r7, #14]
 800780a:	f003 0318 	and.w	r3, r3, #24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007812:	23fa      	movs	r3, #250	; 0xfa
 8007814:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <VL53L0X_GetMeasurementDataReady>:

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
		uint8_t *pMeasurementDataReady)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007836:	73bb      	strb	r3, [r7, #14]
			Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d112      	bne.n	8007864 <VL53L0X_GetMeasurementDataReady+0x42>
			VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7ff ffca 	bl	80077de <VL53L0X_GetInterruptMaskStatus>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b04      	cmp	r3, #4
 8007852:	d103      	bne.n	800785c <VL53L0X_GetMeasurementDataReady+0x3a>
				VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e01c      	b.n	8007896 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e018      	b.n	8007896 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007864:	f107 030d 	add.w	r3, r7, #13
 8007868:	461a      	mov	r2, r3
 800786a:	2114      	movs	r1, #20
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f003 f83f 	bl	800a8f0 <VL53L0X_RdByte>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
				&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800787e:	7b7b      	ldrb	r3, [r7, #13]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e002      	b.n	8007896 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
	UNUSED(Dev);
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

	// do nothing
	VL53L0X_OsDelay();
 80078ae:	2002      	movs	r0, #2
 80078b0:	f7fa f8f6 	bl	8001aa0 <HAL_Delay>
	return status;
 80078b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <VL53L0X_measurement_poll_for_completion>:

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078c8:	2300      	movs	r3, #0
 80078ca:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80078d4:	f107 030f 	add.w	r3, r7, #15
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff ffa1 	bl	8007822 <VL53L0X_GetMeasurementDataReady>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80078e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d110      	bne.n	800790e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d00f      	beq.n	8007912 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3301      	adds	r3, #1
 80078f6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80078fe:	d302      	bcc.n	8007906 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007900:	23f9      	movs	r3, #249	; 0xf9
 8007902:	75fb      	strb	r3, [r7, #23]
			break;
 8007904:	e006      	b.n	8007914 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff ffcb 	bl	80078a2 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800790c:	e7e2      	b.n	80078d4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007912:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <VL53L0X_ClearInterruptMask>:

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
	UNUSED(InterruptMask);
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007932:	2201      	movs	r2, #1
 8007934:	210b      	movs	r1, #11
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 ffa1 	bl	800a87e <VL53L0X_WrByte>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007940:	2200      	movs	r2, #0
 8007942:	210b      	movs	r1, #11
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f002 ff9a 	bl	800a87e <VL53L0X_WrByte>
 800794a:	4603      	mov	r3, r0
 800794c:	461a      	mov	r2, r3
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	4313      	orrs	r3, r2
 8007952:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007954:	f107 030d 	add.w	r3, r7, #13
 8007958:	461a      	mov	r2, r3
 800795a:	2113      	movs	r1, #19
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 ffc7 	bl	800a8f0 <VL53L0X_RdByte>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	4313      	orrs	r3, r2
 800796a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	3301      	adds	r3, #1
 8007970:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007978:	2b00      	cmp	r3, #0
 800797a:	d006      	beq.n	800798a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d803      	bhi.n	800798a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0d3      	beq.n	8007932 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007990:	23f4      	movs	r3, #244	; 0xf4
 8007992:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <VL53L0X_perform_single_ref_calibration>:

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	2100      	movs	r1, #0
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f002 ff5a 	bl	800a87e <VL53L0X_WrByte>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80079ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff ff72 	bl	80078c0 <VL53L0X_measurement_poll_for_completion>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d105      	bne.n	80079f4 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff98 	bl	8007920 <VL53L0X_ClearInterruptMask>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80079fc:	2200      	movs	r2, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f002 ff3c 	bl	800a87e <VL53L0X_WrByte>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
		uint8_t VhvSettings, uint8_t PhaseCal,
		uint8_t *pVhvSettings, uint8_t *pPhaseCal,
		const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	4608      	mov	r0, r1
 8007a20:	4611      	mov	r1, r2
 8007a22:	461a      	mov	r2, r3
 8007a24:	4603      	mov	r3, r0
 8007a26:	70fb      	strb	r3, [r7, #3]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	70bb      	strb	r3, [r7, #2]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a38:	2201      	movs	r2, #1
 8007a3a:	21ff      	movs	r1, #255	; 0xff
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f002 ff1e 	bl	800a87e <VL53L0X_WrByte>
 8007a42:	4603      	mov	r3, r0
 8007a44:	461a      	mov	r2, r3
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f002 ff14 	bl	800a87e <VL53L0X_WrByte>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a60:	2200      	movs	r2, #0
 8007a62:	21ff      	movs	r1, #255	; 0xff
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f002 ff0a 	bl	800a87e <VL53L0X_WrByte>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01e      	beq.n	8007ab8 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	21cb      	movs	r1, #203	; 0xcb
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 ff32 	bl	800a8f0 <VL53L0X_RdByte>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d02a      	beq.n	8007af4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007a9e:	f107 030e 	add.w	r3, r7, #14
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	21ee      	movs	r1, #238	; 0xee
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 ff22 	bl	800a8f0 <VL53L0X_RdByte>
 8007aac:	4603      	mov	r3, r0
 8007aae:	461a      	mov	r2, r3
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	e01d      	b.n	8007af4 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007ac0:	78bb      	ldrb	r3, [r7, #2]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	21cb      	movs	r1, #203	; 0xcb
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f002 fed9 	bl	800a87e <VL53L0X_WrByte>
 8007acc:	4603      	mov	r3, r0
 8007ace:	461a      	mov	r2, r3
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007ade:	787b      	ldrb	r3, [r7, #1]
 8007ae0:	2280      	movs	r2, #128	; 0x80
 8007ae2:	21ee      	movs	r1, #238	; 0xee
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f002 ff70 	bl	800a9ca <VL53L0X_UpdateByte>
 8007aea:	4603      	mov	r3, r0
 8007aec:	461a      	mov	r2, r3
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007af4:	2201      	movs	r2, #1
 8007af6:	21ff      	movs	r1, #255	; 0xff
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f002 fec0 	bl	800a87e <VL53L0X_WrByte>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007b08:	2201      	movs	r2, #1
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f002 feb6 	bl	800a87e <VL53L0X_WrByte>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	21ff      	movs	r1, #255	; 0xff
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f002 feac 	bl	800a87e <VL53L0X_WrByte>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	701a      	strb	r2, [r3, #0]

	return Status;
 8007b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <VL53L0X_perform_vhv_calibration>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
		uint8_t *pVhvSettings, const uint8_t get_data_enable,
		const uint8_t restore_config)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af04      	add	r7, sp, #16
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4611      	mov	r1, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	460b      	mov	r3, r1
 8007b58:	71fb      	strb	r3, [r7, #7]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007b72:	79bb      	ldrb	r3, [r7, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007b7e:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007b80:	2201      	movs	r2, #1
 8007b82:	2101      	movs	r1, #1
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f002 fe7a 	bl	800a87e <VL53L0X_WrByte>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007b96:	2140      	movs	r1, #64	; 0x40
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff ff01 	bl	80079a0 <VL53L0X_perform_single_ref_calibration>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d115      	bne.n	8007bd6 <VL53L0X_perform_vhv_calibration+0x8e>
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d112      	bne.n	8007bd6 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007bb0:	7d39      	ldrb	r1, [r7, #20]
 8007bb2:	7d7a      	ldrb	r2, [r7, #21]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	9302      	str	r3, [sp, #8]
 8007bbc:	f107 0313 	add.w	r3, r7, #19
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	2101      	movs	r1, #1
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff ff23 	bl	8007a16 <VL53L0X_ref_calibration_io>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	75fb      	strb	r3, [r7, #23]
 8007bd4:	e002      	b.n	8007bdc <VL53L0X_perform_vhv_calibration+0x94>
				VhvSettings, PhaseCal, /* Not used here */
				pVhvSettings, &PhaseCalInt,
				1, 0);
	} else
		*pVhvSettings = 0;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007bdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d112      	bne.n	8007c0a <VL53L0X_perform_vhv_calibration+0xc2>
 8007be4:	79bb      	ldrb	r3, [r7, #6]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00f      	beq.n	8007c0a <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007bea:	7dbb      	ldrb	r3, [r7, #22]
 8007bec:	461a      	mov	r2, r3
 8007bee:	2101      	movs	r1, #1
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f002 fe44 	bl	800a87e <VL53L0X_WrByte>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7dba      	ldrb	r2, [r7, #22]
 8007c06:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
		uint8_t *pPhaseCal, const uint8_t get_data_enable,
		const uint8_t restore_config)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b08a      	sub	sp, #40	; 0x28
 8007c1a:	af04      	add	r7, sp, #16
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	4611      	mov	r1, r2
 8007c22:	461a      	mov	r2, r3
 8007c24:	460b      	mov	r3, r1
 8007c26:	71fb      	strb	r3, [r7, #7]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007c3c:	79bb      	ldrb	r3, [r7, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007c48:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f002 fe15 	bl	800a87e <VL53L0X_WrByte>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fe9c 	bl	80079a0 <VL53L0X_perform_single_ref_calibration>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d115      	bne.n	8007ca0 <VL53L0X_perform_phase_calibration+0x8a>
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d112      	bne.n	8007ca0 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007c7a:	7d39      	ldrb	r1, [r7, #20]
 8007c7c:	7d7a      	ldrb	r2, [r7, #21]
 8007c7e:	2301      	movs	r3, #1
 8007c80:	9303      	str	r3, [sp, #12]
 8007c82:	2300      	movs	r3, #0
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	f107 0313 	add.w	r3, r7, #19
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	460b      	mov	r3, r1
 8007c92:	2101      	movs	r1, #1
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff febe 	bl	8007a16 <VL53L0X_ref_calibration_io>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e002      	b.n	8007ca6 <VL53L0X_perform_phase_calibration+0x90>
				VhvSettings, PhaseCal, /* Not used here */
				&VhvSettingsint, pPhaseCal,
				0, 1);
	} else
		*pPhaseCal = 0;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d112      	bne.n	8007cd4 <VL53L0X_perform_phase_calibration+0xbe>
 8007cae:	79bb      	ldrb	r3, [r7, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00f      	beq.n	8007cd4 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cb4:	7dbb      	ldrb	r3, [r7, #22]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2101      	movs	r1, #1
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f002 fddf 	bl	800a87e <VL53L0X_WrByte>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	7dba      	ldrb	r2, [r7, #22]
 8007cd0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
		uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007cfc:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	2300      	movs	r3, #0
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff ff1f 	bl	8007b48 <VL53L0X_perform_vhv_calibration>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007d16:	78fa      	ldrb	r2, [r7, #3]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff ff7a 	bl	8007c16 <VL53L0X_perform_phase_calibration>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]
				Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10f      	bne.n	8007d4e <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d2e:	7dbb      	ldrb	r3, [r7, #22]
 8007d30:	461a      	mov	r2, r3
 8007d32:	2101      	movs	r1, #1
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f002 fda2 	bl	800a87e <VL53L0X_WrByte>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d103      	bne.n	8007d4e <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	7dba      	ldrb	r2, [r7, #22]
 8007d4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <get_next_good_spad>:

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
		uint32_t curr, int32_t *next)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b08b      	sub	sp, #44	; 0x2c
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
 8007d66:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007d68:	2308      	movs	r3, #8
 8007d6a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d8a:	69b9      	ldr	r1, [r7, #24]
 8007d8c:	fb01 f202 	mul.w	r2, r1, r2
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
 8007d98:	e030      	b.n	8007dfc <get_next_good_spad+0xa2>
			coarseIndex++) {
		fineIndex = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	4413      	add	r3, r2
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d11e      	bne.n	8007dee <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007db0:	7ffa      	ldrb	r2, [r7, #31]
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	fa42 f303 	asr.w	r3, r2, r3
 8007db8:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007dbe:	e016      	b.n	8007dee <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007dc0:	7ffb      	ldrb	r3, [r7, #31]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <get_next_good_spad+0x88>
				success = 1;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	fb03 f202 	mul.w	r2, r3, r2
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	4413      	add	r3, r2
 8007dda:	461a      	mov	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]
				break;
 8007de0:	e009      	b.n	8007df6 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007de2:	7ffb      	ldrb	r3, [r7, #31]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	3301      	adds	r3, #1
 8007dec:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d3e4      	bcc.n	8007dc0 <get_next_good_spad+0x66>
			coarseIndex++) {
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	3301      	adds	r3, #1
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d202      	bcs.n	8007e0a <get_next_good_spad+0xb0>
 8007e04:	7fbb      	ldrb	r3, [r7, #30]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0c7      	beq.n	8007d9a <get_next_good_spad+0x40>
		}
	}
}
 8007e0a:	bf00      	nop
 8007e0c:	372c      	adds	r7, #44	; 0x2c
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
	...

08007e18 <is_aperture>:

uint8_t is_aperture(uint32_t spadIndex)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007e2a:	4a07      	ldr	r2, [pc, #28]	; (8007e48 <is_aperture+0x30>)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <is_aperture+0x22>
		isAperture = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	200002b8 	.word	0x200002b8

08007e4c <enable_spad_bit>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
		uint32_t spadIndex)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	; 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e72:	69b9      	ldr	r1, [r7, #24]
 8007e74:	fb01 f202 	mul.w	r2, r1, r2
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d302      	bcc.n	8007e8a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e84:	23ce      	movs	r3, #206	; 0xce
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e010      	b.n	8007eac <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4413      	add	r3, r2
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	b25a      	sxtb	r2, r3
 8007e94:	2101      	movs	r1, #1
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b259      	sxtb	r1, r3
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	b2ca      	uxtb	r2, r1
 8007eaa:	701a      	strb	r2, [r3, #0]

	return status;
 8007eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3724      	adds	r7, #36	; 0x24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <set_ref_spad_map>:

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007ec6:	2306      	movs	r3, #6
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	21b0      	movs	r1, #176	; 0xb0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f002 fc9e 	bl	800a80e <VL53L0X_WriteMulti>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
			refSpadArray, 6);

	return status;
 8007ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007eec:	2306      	movs	r3, #6
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	21b0      	movs	r1, #176	; 0xb0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f002 fca4 	bl	800a840 <VL53L0X_ReadMulti>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
	//	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	//	uint8_t count=0;

	//	for (count = 0; count < 6; count++)
	//        status = VL53L0X_RdByte(Dev, (VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + count), &refSpadArray[count]);
	return status;
 8007efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <enable_ref_spads>:
		uint32_t size,
		uint32_t start,
		uint32_t offset,
		uint32_t spadCount,
		uint32_t *lastSpad)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	460b      	mov	r3, r1
 8007f16:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f20:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f24:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	e02b      	b.n	8007f84 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007f2c:	f107 031c 	add.w	r3, r7, #28
 8007f30:	6a3a      	ldr	r2, [r7, #32]
 8007f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff ff10 	bl	8007d5a <get_next_good_spad>
				&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f40:	d103      	bne.n	8007f4a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f42:	23ce      	movs	r3, #206	; 0xce
 8007f44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007f48:	e020      	b.n	8007f8c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f50:	4413      	add	r3, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff ff60 	bl	8007e18 <is_aperture>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	7afb      	ldrb	r3, [r7, #11]
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d003      	beq.n	8007f6a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f62:	23ce      	movs	r3, #206	; 0xce
 8007f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007f68:	e010      	b.n	8007f8c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f72:	6838      	ldr	r0, [r7, #0]
 8007f74:	f7ff ff6a 	bl	8007e4c <enable_spad_bit>
		currentSpad++;
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	3301      	adds	r3, #1
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3cf      	bcc.n	8007f2c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007f92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff ff8d 	bl	8007ebc <set_ref_spad_map>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007fa8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d121      	bne.n	8007ff4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff ff93 	bl	8007ee2 <get_ref_spad_map>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007fc6:	e011      	b.n	8007fec <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	4413      	add	r3, r2
 8007fce:	781a      	ldrb	r2, [r3, #0]
 8007fd0:	f107 0114 	add.w	r1, r7, #20
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	440b      	add	r3, r1
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d003      	beq.n	8007fe6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007fde:	23ce      	movs	r3, #206	; 0xce
 8007fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007fe4:	e006      	b.n	8007ff4 <enable_ref_spads+0xec>
			}
			i++;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	3301      	adds	r3, #1
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3e9      	bcc.n	8007fc8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007ff4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3730      	adds	r7, #48	; 0x30
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	2b15      	cmp	r3, #21
 8008014:	bf8c      	ite	hi
 8008016:	2201      	movhi	r2, #1
 8008018:	2200      	movls	r2, #0
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	2a00      	cmp	r2, #0
 800801e:	d10e      	bne.n	800803e <VL53L0X_SetDeviceMode+0x3e>
 8008020:	2201      	movs	r2, #1
 8008022:	409a      	lsls	r2, r3
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <VL53L0X_SetDeviceMode+0x54>)
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	741a      	strb	r2, [r3, #16]
		break;
 800803c:	e001      	b.n	8008042 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800803e:	23f8      	movs	r3, #248	; 0xf8
 8008040:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	0030000b 	.word	0x0030000b

08008058 <VL53L0X_GetInterruptThresholds>:

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
		VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
		FixPoint1616_t *pThresholdHigh)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	460b      	mov	r3, r1
 8008066:	72fb      	strb	r3, [r7, #11]
	UNUSED(DeviceMode);
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800806c:	f107 0314 	add.w	r3, r7, #20
 8008070:	461a      	mov	r2, r3
 8008072:	210e      	movs	r1, #14
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f002 fc57 	bl	800a928 <VL53L0X_RdWord>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800807e:	8abb      	ldrh	r3, [r7, #20]
 8008080:	045b      	lsls	r3, r3, #17
 8008082:	461a      	mov	r2, r3
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <VL53L0X_GetInterruptThresholds+0x68>)
 8008086:	4013      	ands	r3, r2
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800808c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10f      	bne.n	80080b4 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	461a      	mov	r2, r3
 800809a:	210c      	movs	r1, #12
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f002 fc43 	bl	800a928 <VL53L0X_RdWord>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
				(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80080a6:	8abb      	ldrh	r3, [r7, #20]
 80080a8:	045b      	lsls	r3, r3, #17
 80080aa:	461a      	mov	r2, r3
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <VL53L0X_GetInterruptThresholds+0x68>)
 80080ae:	4013      	ands	r3, r2
		*pThresholdHigh =
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	1ffe0000 	.word	0x1ffe0000

080080c4 <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80080d6:	e0c6      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	3301      	adds	r3, #1
 80080e6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80080e8:	7cfb      	ldrb	r3, [r7, #19]
 80080ea:	2bff      	cmp	r3, #255	; 0xff
 80080ec:	f040 808d 	bne.w	800820a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	747b      	strb	r3, [r7, #17]
			Index++;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	3301      	adds	r3, #1
 80080fe:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008100:	7c7b      	ldrb	r3, [r7, #17]
 8008102:	2b03      	cmp	r3, #3
 8008104:	d87e      	bhi.n	8008204 <VL53L0X_load_tuning_settings+0x140>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <VL53L0X_load_tuning_settings+0x48>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	0800811d 	.word	0x0800811d
 8008110:	08008157 	.word	0x08008157
 8008114:	08008191 	.word	0x08008191
 8008118:	080081cb 	.word	0x080081cb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	743b      	strb	r3, [r7, #16]
				Index++;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	3301      	adds	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4413      	add	r3, r2
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	3301      	adds	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800813c:	7c3b      	ldrb	r3, [r7, #16]
 800813e:	b29b      	uxth	r3, r3
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	b29a      	uxth	r2, r3
 8008144:	7bfb      	ldrb	r3, [r7, #15]
 8008146:	b29b      	uxth	r3, r3
 8008148:	4413      	add	r3, r2
 800814a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	89ba      	ldrh	r2, [r7, #12]
 8008150:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008154:	e087      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	4413      	add	r3, r2
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3301      	adds	r3, #1
 8008164:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	4413      	add	r3, r2
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	3301      	adds	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008176:	7c3b      	ldrb	r3, [r7, #16]
 8008178:	b29b      	uxth	r3, r3
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	b29a      	uxth	r2, r3
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	b29b      	uxth	r3, r3
 8008182:	4413      	add	r3, r2
 8008184:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	89ba      	ldrh	r2, [r7, #12]
 800818a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
						Temp16);
				break;
 800818e:	e06a      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	4413      	add	r3, r2
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	743b      	strb	r3, [r7, #16]
				Index++;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	3301      	adds	r3, #1
 800819e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	73fb      	strb	r3, [r7, #15]
				Index++;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	3301      	adds	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80081b0:	7c3b      	ldrb	r3, [r7, #16]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	4413      	add	r3, r2
 80081be:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	89ba      	ldrh	r2, [r7, #12]
 80081c4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 80081c8:	e04d      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	743b      	strb	r3, [r7, #16]
				Index++;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	3301      	adds	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	4413      	add	r3, r2
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	3301      	adds	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80081ea:	7c3b      	ldrb	r3, [r7, #16]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	89ba      	ldrh	r2, [r7, #12]
 80081fe:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008202:	e030      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008204:	23fc      	movs	r3, #252	; 0xfc
 8008206:	77fb      	strb	r3, [r7, #31]
 8008208:	e02d      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800820a:	7cfb      	ldrb	r3, [r7, #19]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d828      	bhi.n	8008262 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	4413      	add	r3, r2
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	74bb      	strb	r3, [r7, #18]
			Index++;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	3301      	adds	r3, #1
 800821e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008220:	2300      	movs	r3, #0
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e00f      	b.n	8008246 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	4413      	add	r3, r2
 800822c:	7819      	ldrb	r1, [r3, #0]
 800822e:	f107 0208 	add.w	r2, r7, #8
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	4413      	add	r3, r2
 8008236:	460a      	mov	r2, r1
 8008238:	701a      	strb	r2, [r3, #0]
						Index);
				Index++;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	3301      	adds	r3, #1
 800823e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	3301      	adds	r3, #1
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	7cfb      	ldrb	r3, [r7, #19]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	429a      	cmp	r2, r3
 800824c:	dbeb      	blt.n	8008226 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800824e:	7cfb      	ldrb	r3, [r7, #19]
 8008250:	f107 0208 	add.w	r2, r7, #8
 8008254:	7cb9      	ldrb	r1, [r7, #18]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f002 fad9 	bl	800a80e <VL53L0X_WriteMulti>
 800825c:	4603      	mov	r3, r0
 800825e:	77fb      	strb	r3, [r7, #31]
 8008260:	e001      	b.n	8008266 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008262:	23fc      	movs	r3, #252	; 0xfc
 8008264:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	4413      	add	r3, r2
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <VL53L0X_load_tuning_settings+0x1b8>
 8008272:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f43f af2e 	beq.w	80080d8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800827c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <VL53L0X_CheckAndLoadInterruptSettings>:

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
		uint8_t StartNotStopFlag)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008294:	2300      	movs	r3, #0
 8008296:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800829e:	75bb      	strb	r3, [r7, #22]
			Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80082a0:	7dbb      	ldrb	r3, [r7, #22]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d005      	beq.n	80082b2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
			VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80082a6:	7dbb      	ldrb	r3, [r7, #22]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d002      	beq.n	80082b2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
			(InterruptConfig ==
					VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80082ac:	7dbb      	ldrb	r3, [r7, #22]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d147      	bne.n	8008342 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					(InterruptConfig ==
							VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80082b2:	f107 030c 	add.w	r3, r7, #12
 80082b6:	f107 0210 	add.w	r2, r7, #16
 80082ba:	2101      	movs	r1, #1
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff fecb 	bl	8008058 <VL53L0X_GetInterruptThresholds>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
				&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80082cc:	d803      	bhi.n	80082d6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
				(ThresholdHigh > 255*65536)) &&
 80082ce:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80082d0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80082d4:	d935      	bls.n	8008342 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
				(ThresholdHigh > 255*65536)) &&
 80082d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d131      	bne.n	8008342 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
				(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d006      	beq.n	80082f2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80082e4:	491a      	ldr	r1, [pc, #104]	; (8008350 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff feec 	bl	80080c4 <VL53L0X_load_tuning_settings>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]
 80082f0:	e027      	b.n	8008342 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
						InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80082f2:	2204      	movs	r2, #4
 80082f4:	21ff      	movs	r1, #255	; 0xff
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f002 fac1 	bl	800a87e <VL53L0X_WrByte>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	4313      	orrs	r3, r2
 8008304:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008306:	2200      	movs	r2, #0
 8008308:	2170      	movs	r1, #112	; 0x70
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f002 fab7 	bl	800a87e <VL53L0X_WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	4313      	orrs	r3, r2
 8008318:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800831a:	2200      	movs	r2, #0
 800831c:	21ff      	movs	r1, #255	; 0xff
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 faad 	bl	800a87e <VL53L0X_WrByte>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	4313      	orrs	r3, r2
 800832c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800832e:	2200      	movs	r2, #0
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 faa3 	bl	800a87e <VL53L0X_WrByte>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	4313      	orrs	r3, r2
 8008340:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008342:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008346:	4618      	mov	r0, r3
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	2000000c 	.word	0x2000000c

08008354 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008360:	2301      	movs	r3, #1
 8008362:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008364:	f107 030e 	add.w	r3, r7, #14
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fd fff2 	bl	8006354 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008370:	2201      	movs	r2, #1
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f002 fa82 	bl	800a87e <VL53L0X_WrByte>
 800837a:	4603      	mov	r3, r0
 800837c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800837e:	2201      	movs	r2, #1
 8008380:	21ff      	movs	r1, #255	; 0xff
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f002 fa7b 	bl	800a87e <VL53L0X_WrByte>
 8008388:	4603      	mov	r3, r0
 800838a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800838c:	2200      	movs	r2, #0
 800838e:	2100      	movs	r1, #0
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f002 fa74 	bl	800a87e <VL53L0X_WrByte>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80083a0:	461a      	mov	r2, r3
 80083a2:	2191      	movs	r1, #145	; 0x91
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f002 fa6a 	bl	800a87e <VL53L0X_WrByte>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80083ae:	2201      	movs	r2, #1
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fa63 	bl	800a87e <VL53L0X_WrByte>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80083bc:	2200      	movs	r2, #0
 80083be:	21ff      	movs	r1, #255	; 0xff
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f002 fa5c 	bl	800a87e <VL53L0X_WrByte>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80083ca:	2200      	movs	r2, #0
 80083cc:	2180      	movs	r1, #128	; 0x80
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f002 fa55 	bl	800a87e <VL53L0X_WrByte>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d054      	beq.n	8008488 <VL53L0X_StartMeasurement+0x134>
 80083de:	2b03      	cmp	r3, #3
 80083e0:	dc6c      	bgt.n	80084bc <VL53L0X_StartMeasurement+0x168>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <VL53L0X_StartMeasurement+0x98>
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d034      	beq.n	8008454 <VL53L0X_StartMeasurement+0x100>
 80083ea:	e067      	b.n	80084bc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80083ec:	2201      	movs	r2, #1
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f002 fa44 	bl	800a87e <VL53L0X_WrByte>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80083fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d15d      	bne.n	80084c2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008410:	f107 030d 	add.w	r3, r7, #13
 8008414:	461a      	mov	r2, r3
 8008416:	2100      	movs	r1, #0
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f002 fa69 	bl	800a8f0 <VL53L0X_RdByte>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]
							VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008428:	7b7a      	ldrb	r2, [r7, #13]
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4013      	ands	r3, r2
 800842e:	b2db      	uxtb	r3, r3
					&& (Status == VL53L0X_ERROR_NONE)
					&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008430:	7bfa      	ldrb	r2, [r7, #15]
 8008432:	429a      	cmp	r2, r3
 8008434:	d107      	bne.n	8008446 <VL53L0X_StartMeasurement+0xf2>
					&& (Status == VL53L0X_ERROR_NONE)
 8008436:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <VL53L0X_StartMeasurement+0xf2>
					&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008444:	d3e1      	bcc.n	800840a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800844c:	d339      	bcc.n	80084c2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800844e:	23f9      	movs	r3, #249	; 0xf9
 8008450:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008452:	e036      	b.n	80084c2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d105      	bne.n	8008468 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800845c:	2101      	movs	r1, #1
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff ff12 	bl	8008288 <VL53L0X_CheckAndLoadInterruptSettings>
 8008464:	4603      	mov	r3, r0
 8008466:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008468:	2202      	movs	r2, #2
 800846a:	2100      	movs	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f002 fa06 	bl	800a87e <VL53L0X_WrByte>
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_SYSRANGE_START,
				VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d123      	bne.n	80084c6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2204      	movs	r2, #4
 8008482:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008486:	e01e      	b.n	80084c6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008488:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d105      	bne.n	800849c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008490:	2101      	movs	r1, #1
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fef8 	bl	8008288 <VL53L0X_CheckAndLoadInterruptSettings>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800849c:	2204      	movs	r2, #4
 800849e:	2100      	movs	r1, #0
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f002 f9ec 	bl	800a87e <VL53L0X_WrByte>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_SYSRANGE_START,
				VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80084aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10b      	bne.n	80084ca <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2204      	movs	r2, #4
 80084b6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80084ba:	e006      	b.n	80084ca <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80084bc:	23f8      	movs	r3, #248	; 0xf8
 80084be:	75fb      	strb	r3, [r7, #23]
 80084c0:	e004      	b.n	80084cc <VL53L0X_StartMeasurement+0x178>
		break;
 80084c2:	bf00      	nop
 80084c4:	e002      	b.n	80084cc <VL53L0X_StartMeasurement+0x178>
		break;
 80084c6:	bf00      	nop
 80084c8:	e000      	b.n	80084cc <VL53L0X_StartMeasurement+0x178>
		break;
 80084ca:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80084cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <VL53L0X_PerformSingleMeasurement>:

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80084e4:	f107 030e 	add.w	r3, r7, #14
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f7fd ff32 	bl	8006354 <VL53L0X_GetDeviceMode>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80084f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d107      	bne.n	800850c <VL53L0X_PerformSingleMeasurement+0x34>
			&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff ff26 	bl	8008354 <VL53L0X_StartMeasurement>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff f9d3 	bl	80078c0 <VL53L0X_measurement_poll_for_completion>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800851e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <VL53L0X_PerformSingleMeasurement+0x5c>
			&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008526:	7bbb      	ldrb	r3, [r7, #14]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2203      	movs	r2, #3
 8008530:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008534:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <VL53L0X_GetXTalkCompensationEnable>:

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
		uint8_t *pXTalkCompensationEnable)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7f1b      	ldrb	r3, [r3, #28]
 8008552:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	7bba      	ldrb	r2, [r7, #14]
 8008558:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b088      	sub	sp, #32
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008576:	2300      	movs	r3, #0
 8008578:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008580:	f107 0313 	add.w	r3, r7, #19
 8008584:	4619      	mov	r1, r3
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff ffda 	bl	8008540 <VL53L0X_GetXTalkCompensationEnable>
 800858c:	4603      	mov	r3, r0
 800858e:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008590:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d111      	bne.n	80085bc <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00e      	beq.n	80085bc <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	61bb      	str	r3, [r7, #24]
					XTalkCompensationRateMegaCps,
					xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
					pRangingMeasurementData->EffectiveSpadRtnCount *
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	8a9b      	ldrh	r3, [r3, #20]
 80085a8:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	fb02 f303 	mul.w	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]
					xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
					(totalXtalkMegaCps + 0x80) >> 8;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	3380      	adds	r3, #128	; 0x80
 80085b6:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80085bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80085e0:	f107 0310 	add.w	r3, r7, #16
 80085e4:	461a      	mov	r2, r3
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f7ff ffbe 	bl	800856a <VL53L0X_get_total_xtalk_rate>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]
			Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80085f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	441a      	add	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]

	return Status;
 8008606:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4613      	mov	r3, r2
 8008620:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008626:	79fb      	ldrb	r3, [r7, #7]
 8008628:	4619      	mov	r1, r3
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7fe fbc5 	bl	8006dba <VL53L0X_calc_macro_period_ps>
 8008630:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008638:	4a0a      	ldr	r2, [pc, #40]	; (8008664 <VL53L0X_calc_timeout_mclks+0x50>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	099b      	lsrs	r3, r3, #6
 8008640:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
			(uint32_t) (((timeout_period_us * 1000)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008648:	fb03 f202 	mul.w	r2, r3, r2
					+ (macro_period_ns / 2)) / macro_period_ns);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	085b      	lsrs	r3, r3, #1
 8008650:	441a      	add	r2, r3
	timeout_period_mclks =
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	fbb2 f3f3 	udiv	r3, r2, r3
 8008658:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800865a:	69fb      	ldr	r3, [r7, #28]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	10624dd3 	.word	0x10624dd3

08008668 <VL53L0X_isqrt>:

uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008678:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	/* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800867a:	e002      	b.n	8008682 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	089b      	lsrs	r3, r3, #2
 8008680:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d8f8      	bhi.n	800867c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800868a:	e017      	b.n	80086bc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d30b      	bcc.n	80086b0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	4413      	add	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	e002      	b.n	80086b6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	089b      	lsrs	r3, r3, #2
 80086ba:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e4      	bne.n	800868c <VL53L0X_isqrt+0x24>
	}

	return res;
 80086c2:	68fb      	ldr	r3, [r7, #12]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <VL53L0X_calc_dmax>:
		FixPoint1616_t pwMult,
		uint32_t sigmaEstimateP1,
		FixPoint1616_t sigmaEstimateP2,
		uint32_t peakVcselDuration_us,
		uint32_t *pdmax_mm)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b09a      	sub	sp, #104	; 0x68
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80086de:	2312      	movs	r3, #18
 80086e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80086e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80086e8:	2342      	movs	r3, #66	; 0x42
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80086ec:	2306      	movs	r3, #6
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80086f0:	2307      	movs	r3, #7
 80086f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
			PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8008708:	63bb      	str	r3, [r7, #56]	; 0x38
			PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800870e:	fb02 f303 	mul.w	r3, r2, r3
 8008712:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	3380      	adds	r3, #128	; 0x80
 8008718:	0a1b      	lsrs	r3, r3, #8
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800871c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01a      	beq.n	8008766 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	029b      	lsls	r3, r3, #10
 8008734:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
				(totalCorrSignalRate_mcps/2);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800873a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873c:	4413      	add	r3, r2
 800873e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008740:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	fbb2 f3f3 	udiv	r3, r2, r3
 8008748:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800874a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800874c:	4613      	mov	r3, r2
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	4413      	add	r3, r2
 8008752:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008756:	fb03 f303 	mul.w	r3, r3, r3
 800875a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800875c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800875e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	fb03 f303 	mul.w	r3, r3, r3
 8008780:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008784:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800878c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878e:	085a      	lsrs	r2, r3, #1
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	441a      	add	r2, r3
 8008794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008796:	fbb2 f3f3 	udiv	r3, r2, r3
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
			cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a0:	fb02 f303 	mul.w	r3, r2, r3
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ac:	d302      	bcc.n	80087b4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80087ae:	4b54      	ldr	r3, [pc, #336]	; (8008900 <VL53L0X_calc_dmax+0x230>)
 80087b0:	663b      	str	r3, [r7, #96]	; 0x60
 80087b2:	e015      	b.n	80087e0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80087b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b6:	085a      	lsrs	r2, r3, #1
 80087b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ba:	441a      	add	r2, r3
 80087bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087be:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c2:	677b      	str	r3, [r7, #116]	; 0x74
				cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80087c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c8:	fb02 f303 	mul.w	r3, r2, r3
 80087cc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80087ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80087d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087da:	fb03 f303 	mul.w	r3, r3, r3
 80087de:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80087e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087e2:	039b      	lsls	r3, r3, #14
 80087e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80087e8:	4a46      	ldr	r2, [pc, #280]	; (8008904 <VL53L0X_calc_dmax+0x234>)
 80087ea:	fba2 2303 	umull	r2, r3, r2, r3
 80087ee:	099b      	lsrs	r3, r3, #6
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	fb03 f303 	mul.w	r3, r3, r3
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fc:	fb03 f303 	mul.w	r3, r3, r3
 8008800:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	3308      	adds	r3, #8
 8008806:	091b      	lsrs	r3, r3, #4
 8008808:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800880a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008814:	4613      	mov	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4413      	add	r3, r2
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008824:	0b9b      	lsrs	r3, r3, #14
 8008826:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800882c:	4413      	add	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	4413      	add	r3, r2
 8008838:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	039b      	lsls	r3, r3, #14
 8008848:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	085b      	lsrs	r3, r3, #1
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	4413      	add	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008862:	fb02 f303 	mul.w	r3, r2, r3
 8008866:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800886e:	4a25      	ldr	r2, [pc, #148]	; (8008904 <VL53L0X_calc_dmax+0x234>)
 8008870:	fba2 2303 	umull	r2, r3, r2, r3
 8008874:	099b      	lsrs	r3, r3, #6
 8008876:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008884:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <VL53L0X_calc_dmax+0x234>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	099b      	lsrs	r3, r3, #6
 800888c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800888e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008890:	3380      	adds	r3, #128	; 0x80
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	085a      	lsrs	r2, r3, #1
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	441a      	add	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80088ac:	e001      	b.n	80088b2 <VL53L0X_calc_dmax+0x1e2>
		/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80088b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088b4:	f7ff fed8 	bl	8008668 <VL53L0X_isqrt>
 80088b8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	085a      	lsrs	r2, r3, #1
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	441a      	add	r2, r3
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088d0:	e001      	b.n	80088d6 <VL53L0X_calc_dmax+0x206>
		/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80088d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80088d8:	f7ff fec6 	bl	8008668 <VL53L0X_isqrt>
 80088dc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80088de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d902      	bls.n	80088f2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80088ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088f0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80088f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3768      	adds	r7, #104	; 0x68
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	fff00000 	.word	0xfff00000
 8008904:	10624dd3 	.word	0x10624dd3

08008908 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		FixPoint1616_t *pSigmaEstimate,
		uint32_t *pDmax_mm)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b0b4      	sub	sp, #208	; 0xd0
 800890c:	af04      	add	r7, sp, #16
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008916:	f44f 7348 	mov.w	r3, #800	; 0x320
 800891a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800891e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008922:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008926:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800892a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800892e:	f241 235c 	movw	r3, #4700	; 0x125c
 8008932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008936:	4b9c      	ldr	r3, [pc, #624]	; (8008ba8 <VL53L0X_calc_sigma_estimate+0x2a0>)
 8008938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800893c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008940:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008942:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800894a:	fbb2 f3f3 	udiv	r3, r2, r3
 800894e:	67bb      	str	r3, [r7, #120]	; 0x78
			cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008950:	4b96      	ldr	r3, [pc, #600]	; (8008bac <VL53L0X_calc_sigma_estimate+0x2a4>)
 8008952:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008958:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800895a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800895e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008960:	f240 6377 	movw	r3, #1655	; 0x677
 8008964:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008966:	2300      	movs	r3, #0
 8008968:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
			(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800897a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800897e:	0c1b      	lsrs	r3, r3, #16
 8008980:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	663b      	str	r3, [r7, #96]	; 0x60
			pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008988:	f107 0310 	add.w	r3, r7, #16
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f7ff fe19 	bl	80085c8 <VL53L0X_get_total_signal_rate>
 8008996:	4603      	mov	r3, r0
 8008998:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	461a      	mov	r2, r3
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff fde0 	bl	800856a <VL53L0X_get_total_xtalk_rate>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089b6:	fb02 f303 	mul.w	r3, r2, r3
 80089ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80089bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80089d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80089d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089da:	429a      	cmp	r2, r3
 80089dc:	d902      	bls.n	80089e4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80089de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80089e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d168      	bne.n	8008abe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80089fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7ff fe02 	bl	8008614 <VL53L0X_calc_timeout_mclks>
 8008a10:	6578      	str	r0, [r7, #84]	; 0x54
				Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008a22:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a26:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff fdef 	bl	8008614 <VL53L0X_calc_timeout_mclks>
 8008a36:	64f8      	str	r0, [r7, #76]	; 0x4c
				Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008a3e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d102      	bne.n	8008a4c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008a46:	2302      	movs	r3, #2
 8008a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
				(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a50:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008a52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a56:	fb02 f303 	mul.w	r3, r2, r3
 8008a5a:	02db      	lsls	r3, r3, #11
 8008a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a68:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6e:	099b      	lsrs	r3, r3, #6
 8008a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a7a:	fb02 f303 	mul.w	r3, r2, r3
 8008a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a8a:	4a49      	ldr	r2, [pc, #292]	; (8008bb0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	099b      	lsrs	r3, r3, #6
 8008a92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	3380      	adds	r3, #128	; 0x80
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aa4:	fb02 f303 	mul.w	r3, r2, r3
 8008aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008aac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ab0:	3380      	adds	r3, #128	; 0x80
 8008ab2:	0a1b      	lsrs	r3, r3, #8
 8008ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008abe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008ac6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008aca:	e15a      	b.n	8008d82 <VL53L0X_calc_sigma_estimate+0x47a>
	}

	if (peakSignalRate_kcps == 0) {
 8008acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10c      	bne.n	8008aec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ad8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ae0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	601a      	str	r2, [r3, #0]
 8008aea:	e148      	b.n	8008d7e <VL53L0X_calc_sigma_estimate+0x476>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008aec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d102      	bne.n	8008afa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008afe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b02:	041a      	lsls	r2, r3, #16
 8008b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d902      	bls.n	8008b1e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008b1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b22:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b26:	fb02 f303 	mul.w	r3, r2, r3
 8008b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008b2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b32:	4613      	mov	r3, r2
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fd94 	bl	8008668 <VL53L0X_isqrt>
 8008b40:	4603      	mov	r3, r0
 8008b42:	005b      	lsls	r3, r3, #1
 8008b44:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	891b      	ldrh	r3, [r3, #8]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4e:	fb02 f303 	mul.w	r3, r2, r3
 8008b52:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b56:	041a      	lsls	r2, r3, #16
				2 * xTalkCompRate_kcps) + 500)/1000;
 8008b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b5c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b5e:	1ad3      	subs	r3, r2, r3
				2 * xTalkCompRate_kcps) + 500)/1000;
 8008b60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b64:	4a12      	ldr	r2, [pc, #72]	; (8008bb0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008b66:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6a:	099b      	lsrs	r3, r3, #6
 8008b6c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008b76:	4a0e      	ldr	r2, [pc, #56]	; (8008bb0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008b78:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7c:	099b      	lsrs	r3, r3, #6
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b82:	021b      	lsls	r3, r3, #8
 8008b84:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		//		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
		// abs is causing compiler overloading isue in C++, but unsigned types. So, redundant call anyway!
		xTalkCorrection	 = diff1_mcps/diff2_mcps;
 8008b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	7e1b      	ldrb	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <VL53L0X_calc_sigma_estimate+0x2ac>
			pwMult = 1 << 16;
 8008b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ba6:	e032      	b.n	8008c0e <VL53L0X_calc_sigma_estimate+0x306>
 8008ba8:	028f87ae 	.word	0x028f87ae
 8008bac:	0006999a 	.word	0x0006999a
 8008bb0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008bd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bda:	4413      	add	r3, r2
 8008bdc:	0c1b      	lsrs	r3, r3, #16
 8008bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008be6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bfc:	fb03 f303 	mul.w	r3, r3, r3
 8008c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c08:	0b9b      	lsrs	r3, r3, #14
 8008c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c20:	0c1b      	lsrs	r3, r3, #16
 8008c22:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	fb03 f303 	mul.w	r3, r3, r3
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c38:	0c1b      	lsrs	r3, r3, #16
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3e:	fb03 f303 	mul.w	r3, r3, r3
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	4413      	add	r3, r2
 8008c4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4e:	f7ff fd0b 	bl	8008668 <VL53L0X_isqrt>
 8008c52:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	041b      	lsls	r3, r3, #16
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	3332      	adds	r3, #50	; 0x32
 8008c5e:	4a4b      	ldr	r2, [pc, #300]	; (8008d8c <VL53L0X_calc_sigma_estimate+0x484>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	095a      	lsrs	r2, r3, #5
 8008c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c74:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008c78:	fb02 f303 	mul.w	r3, r2, r3
 8008c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c84:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008c88:	3308      	adds	r3, #8
 8008c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c92:	4a3f      	ldr	r2, [pc, #252]	; (8008d90 <VL53L0X_calc_sigma_estimate+0x488>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	0b5b      	lsrs	r3, r3, #13
 8008c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d902      	bls.n	8008cae <VL53L0X_calc_sigma_estimate+0x3a6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
				(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008cae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008cbc:	4a35      	ldr	r2, [pc, #212]	; (8008d94 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
				VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
						finalRangeIntegrationTimeMilliSecs/2)/
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	085a      	lsrs	r2, r3, #1
				VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cce:	441a      	add	r2, r3
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fcc6 	bl	8008668 <VL53L0X_isqrt>
 8008cdc:	61f8      	str	r0, [r7, #28]
						finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008cea:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008cec:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf0:	099b      	lsrs	r3, r3, #6
 8008cf2:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cf8:	fb03 f303 	mul.w	r3, r3, r3
 8008cfc:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	fb03 f303 	mul.w	r3, r3, r3
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	4413      	add	r3, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fcab 	bl	8008668 <VL53L0X_isqrt>
 8008d12:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d009      	beq.n	8008d3c <VL53L0X_calc_sigma_estimate+0x434>
 8008d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <VL53L0X_calc_sigma_estimate+0x434>
 8008d30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d903      	bls.n	8008d44 <VL53L0X_calc_sigma_estimate+0x43c>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8008d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d4a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008d56:	6939      	ldr	r1, [r7, #16]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d60:	9302      	str	r3, [sp, #8]
 8008d62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fcac 	bl	80086d0 <VL53L0X_calc_dmax>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				peakVcselDuration_us,
				pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d7e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	37c0      	adds	r7, #192	; 0xc0
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	51eb851f 	.word	0x51eb851f
 8008d90:	d1b71759 	.word	0xd1b71759
 8008d94:	10624dd3 	.word	0x10624dd3

08008d98 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b090      	sub	sp, #64	; 0x40
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	461a      	mov	r2, r3
 8008da4:	460b      	mov	r3, r1
 8008da6:	72fb      	strb	r3, [r7, #11]
 8008da8:	4613      	mov	r3, r2
 8008daa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008dea:	7afb      	ldrb	r3, [r7, #11]
 8008dec:	10db      	asrs	r3, r3, #3
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008df8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d017      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
 8008e00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e04:	2b05      	cmp	r3, #5
 8008e06:	d013      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
			DeviceRangeStatusInternal == 5 ||
 8008e08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e0c:	2b07      	cmp	r3, #7
 8008e0e:	d00f      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
			DeviceRangeStatusInternal == 7 ||
 8008e10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e14:	2b0c      	cmp	r3, #12
 8008e16:	d00b      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
			DeviceRangeStatusInternal == 12 ||
 8008e18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e1c:	2b0d      	cmp	r3, #13
 8008e1e:	d007      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
			DeviceRangeStatusInternal == 13 ||
 8008e20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e24:	2b0e      	cmp	r3, #14
 8008e26:	d003      	beq.n	8008e30 <VL53L0X_get_pal_range_status+0x98>
			DeviceRangeStatusInternal == 14 ||
 8008e28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d103      	bne.n	8008e38 <VL53L0X_get_pal_range_status+0xa0>
			DeviceRangeStatusInternal == 15
	) {
		NoneFlag = 1;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008e36:	e002      	b.n	8008e3e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d109      	bne.n	8008e5a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e46:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7fd fb88 	bl	8006564 <VL53L0X_GetLimitCheckEnable>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d02e      	beq.n	8008ec0 <VL53L0X_get_pal_range_status+0x128>
 8008e62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d12a      	bne.n	8008ec0 <VL53L0X_get_pal_range_status+0x128>
		/*
		 * compute the Sigma and check with limit
		 */
		Status = VL53L0X_calc_sigma_estimate(
 8008e6a:	f107 0310 	add.w	r3, r7, #16
 8008e6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008e72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fd47 	bl	8008908 <VL53L0X_calc_sigma_estimate>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData,
				&SigmaEstimate,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8e:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008e90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d113      	bne.n	8008ec0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e98:	f107 0320 	add.w	r3, r7, #32
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7fd fad1 	bl	8006448 <VL53L0X_GetLimitCheckValue>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
					&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d006      	beq.n	8008ec0 <VL53L0X_get_pal_range_status+0x128>
					(SigmaEstimate > SigmaLimitValue))
 8008eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d902      	bls.n	8008ec0 <VL53L0X_get_pal_range_status+0x128>
				/* Limit Fail */
				SigmaLimitflag = 1;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008ec0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d109      	bne.n	8008edc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008ec8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008ecc:	461a      	mov	r2, r3
 8008ece:	2102      	movs	r1, #2
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7fd fb47 	bl	8006564 <VL53L0X_GetLimitCheckEnable>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008edc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d044      	beq.n	8008f6e <VL53L0X_get_pal_range_status+0x1d6>
 8008ee4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d140      	bne.n	8008f6e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008eec:	f107 031c 	add.w	r3, r7, #28
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	2102      	movs	r1, #2
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7fd faa7 	bl	8006448 <VL53L0X_GetLimitCheckValue>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008f00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d107      	bne.n	8008f18 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f08:	2201      	movs	r2, #1
 8008f0a:	21ff      	movs	r1, #255	; 0xff
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f001 fcb6 	bl	800a87e <VL53L0X_WrByte>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008f18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d109      	bne.n	8008f34 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008f20:	f107 0316 	add.w	r3, r7, #22
 8008f24:	461a      	mov	r2, r3
 8008f26:	21b6      	movs	r1, #182	; 0xb6
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f001 fcfd 	bl	800a928 <VL53L0X_RdWord>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
					&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008f34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d107      	bne.n	8008f4c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	21ff      	movs	r1, #255	; 0xff
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f001 fc9c 	bl	800a87e <VL53L0X_WrByte>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008f4c:	8afb      	ldrh	r3, [r7, #22]
 8008f4e:	025b      	lsls	r3, r3, #9
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f56:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d006      	beq.n	8008f6e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008f60:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d902      	bls.n	8008f6e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008f6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	2103      	movs	r1, #3
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7fd faf0 	bl	8006564 <VL53L0X_GetLimitCheckEnable>
 8008f84:	4603      	mov	r3, r0
 8008f86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d023      	beq.n	8008fda <VL53L0X_get_pal_range_status+0x242>
 8008f92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d11f      	bne.n	8008fda <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008f9a:	893b      	ldrh	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fa4:	e005      	b.n	8008fb2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	021a      	lsls	r2, r3, #8
 8008faa:	893b      	ldrh	r3, [r7, #8]
 8008fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
					/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008fb2:	f107 0318 	add.w	r3, r7, #24
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2103      	movs	r1, #3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7fd fa44 	bl	8006448 <VL53L0X_GetLimitCheckValue>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <VL53L0X_get_pal_range_status+0x242>
				(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008fcc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d202      	bcs.n	8008fda <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008fda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d14a      	bne.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008fe2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d103      	bne.n	8008ff2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fec:	22ff      	movs	r2, #255	; 0xff
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e042      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008ff2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d007      	beq.n	800900a <VL53L0X_get_pal_range_status+0x272>
 8008ffa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d003      	beq.n	800900a <VL53L0X_get_pal_range_status+0x272>
				DeviceRangeStatusInternal == 2 ||
 8009002:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009006:	2b03      	cmp	r3, #3
 8009008:	d103      	bne.n	8009012 <VL53L0X_get_pal_range_status+0x27a>
				DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800900a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900c:	2205      	movs	r2, #5
 800900e:	701a      	strb	r2, [r3, #0]
 8009010:	e032      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009012:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009016:	2b06      	cmp	r3, #6
 8009018:	d003      	beq.n	8009022 <VL53L0X_get_pal_range_status+0x28a>
 800901a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800901e:	2b09      	cmp	r3, #9
 8009020:	d103      	bne.n	800902a <VL53L0X_get_pal_range_status+0x292>
				DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009024:	2204      	movs	r2, #4
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e026      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800902a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800902e:	2b08      	cmp	r3, #8
 8009030:	d007      	beq.n	8009042 <VL53L0X_get_pal_range_status+0x2aa>
 8009032:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009036:	2b0a      	cmp	r3, #10
 8009038:	d003      	beq.n	8009042 <VL53L0X_get_pal_range_status+0x2aa>
				DeviceRangeStatusInternal == 10 ||
 800903a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d103      	bne.n	800904a <VL53L0X_get_pal_range_status+0x2b2>
				SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009044:	2203      	movs	r2, #3
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	e016      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800904a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800904e:	2b04      	cmp	r3, #4
 8009050:	d003      	beq.n	800905a <VL53L0X_get_pal_range_status+0x2c2>
 8009052:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009056:	2b01      	cmp	r3, #1
 8009058:	d103      	bne.n	8009062 <VL53L0X_get_pal_range_status+0x2ca>
				RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800905a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905c:	2202      	movs	r2, #2
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	e00a      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009062:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009066:	2b01      	cmp	r3, #1
 8009068:	d103      	bne.n	8009072 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800906a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906c:	2201      	movs	r2, #1
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	e002      	b.n	8009078 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009082:	2200      	movs	r2, #0
 8009084:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009086:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800908a:	461a      	mov	r2, r3
 800908c:	2101      	movs	r1, #1
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7fd fa68 	bl	8006564 <VL53L0X_GetLimitCheckEnable>
 8009094:	4603      	mov	r3, r0
 8009096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800909a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d14f      	bne.n	8009142 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80090a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <VL53L0X_get_pal_range_status+0x31a>
 80090aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d103      	bne.n	80090ba <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b8:	e002      	b.n	80090c0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80090c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80090ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d003      	beq.n	80090da <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80090d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d103      	bne.n	80090e2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e0:	e002      	b.n	80090e8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80090ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80090f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <VL53L0X_get_pal_range_status+0x36a>
 80090fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d103      	bne.n	800910a <VL53L0X_get_pal_range_status+0x372>
				(SignalRefClipflag == 1))
			Temp8 = 1;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009108:	e002      	b.n	8009110 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800911a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <VL53L0X_get_pal_range_status+0x392>
 8009122:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009126:	2b01      	cmp	r3, #1
 8009128:	d103      	bne.n	8009132 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009130:	e002      	b.n	8009138 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800913e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009142:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009146:	4618      	mov	r0, r3
 8009148:	3740      	adds	r7, #64	; 0x40
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <VL53L0X_GetRangingMeasurementData>:

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009150:	b5b0      	push	{r4, r5, r7, lr}
 8009152:	b096      	sub	sp, #88	; 0x58
 8009154:	af02      	add	r7, sp, #8
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009160:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009164:	230c      	movs	r3, #12
 8009166:	2114      	movs	r1, #20
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fb69 	bl	800a840 <VL53L0X_ReadMulti>
 800916e:	4603      	mov	r3, r0
 8009170:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009174:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009178:	2b00      	cmp	r3, #0
 800917a:	f040 80d1 	bne.w	8009320 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2200      	movs	r2, #0
 8009182:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2200      	movs	r2, #0
 8009188:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800918a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800918e:	b29b      	uxth	r3, r3
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	b29a      	uxth	r2, r3
 8009194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009198:	b29b      	uxth	r3, r3
 800919a:	4413      	add	r3, r2
 800919c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2200      	movs	r2, #0
 80091a4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80091a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	025b      	lsls	r3, r3, #9
 80091bc:	647b      	str	r3, [r7, #68]	; 0x44
				VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091c2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80091c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
				VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80091da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80091de:	025b      	lsls	r3, r3, #9
 80091e0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80091e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009202:	829a      	strh	r2, [r3, #20]
				EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009204:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009212:	87bb      	strh	r3, [r7, #60]	; 0x3c
				LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800921a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800921e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009224:	d046      	beq.n	80092b4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
					* tmpuint16 + 500) / 1000);
 8009226:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009228:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800922c:	fb02 f303 	mul.w	r3, r2, r3
 8009230:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009234:	4a57      	ldr	r2, [pc, #348]	; (8009394 <VL53L0X_GetRangingMeasurementData+0x244>)
 8009236:	fb82 1203 	smull	r1, r2, r2, r3
 800923a:	1192      	asrs	r2, r2, #6
 800923c:	17db      	asrs	r3, r3, #31
 800923e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009240:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	873b      	strh	r3, [r7, #56]	; 0x38
					XTalkCompensationRateMegaCps,
					XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7f1b      	ldrb	r3, [r3, #28]
 800924e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009256:	2b00      	cmp	r3, #0
 8009258:	d02c      	beq.n	80092b4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
						- ((XTalkCompensationRateMegaCps
								* EffectiveSpadRtnCount) >> 8))
 800925a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800925c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009260:	fb02 f303 	mul.w	r3, r2, r3
 8009264:	121a      	asrs	r2, r3, #8
						<= 0) {
 8009266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8009268:	429a      	cmp	r2, r3
 800926a:	d10d      	bne.n	8009288 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800926c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8009274:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8009278:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800927c:	e016      	b.n	80092ac <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800927e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009282:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009286:	e011      	b.n	80092ac <VL53L0X_GetRangingMeasurementData+0x15c>
						<< 2;
				} else {
					XtalkRangeMilliMeter =
							(tmpuint16 * SignalRate)
 8009288:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800928c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800928e:	fb03 f202 	mul.w	r2, r3, r2
							/ (SignalRate
									- ((XTalkCompensationRateMegaCps
											* EffectiveSpadRtnCount)
 8009292:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009294:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8009298:	fb01 f303 	mul.w	r3, r1, r3
											>> 8));
 800929c:	121b      	asrs	r3, r3, #8
 800929e:	4619      	mov	r1, r3
									- ((XTalkCompensationRateMegaCps
 80092a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a2:	1a5b      	subs	r3, r3, r1
							/ (SignalRate
 80092a4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80092a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80092ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80092b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80092b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00d      	beq.n	80092d8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
					(uint16_t)((tmpuint16) >> 2);
 80092bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80092c0:	089b      	lsrs	r3, r3, #2
 80092c2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
					(uint8_t)((tmpuint16 & 0x03) << 6);
 80092c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	019b      	lsls	r3, r3, #6
 80092d0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	75da      	strb	r2, [r3, #23]
 80092d6:	e006      	b.n	80092e6 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80092de:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80092e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80092ea:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80092ee:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4613      	mov	r3, r2
 80092fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fd4b 	bl	8008d98 <VL53L0X_get_pal_range_status>
 8009302:	4603      	mov	r3, r0
 8009304:	461a      	mov	r2, r3
 8009306:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800930a:	4313      	orrs	r3, r2
 800930c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				SignalRate, EffectiveSpadRtnCount,
				pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009310:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009314:	2b00      	cmp	r3, #0
 8009316:	d103      	bne.n	8009320 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009318:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009320:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009324:	2b00      	cmp	r3, #0
 8009326:	d12f      	bne.n	8009388 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f107 040c 	add.w	r4, r7, #12
 800932e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800933a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
				pRangingMeasurementData->RangeMilliMeter;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009342:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
				pRangingMeasurementData->RangeFractionalPart;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
				pRangingMeasurementData->RangeDMaxMilliMeter;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009350:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
				pRangingMeasurementData->MeasurementTimeUsec;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009356:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
				pRangingMeasurementData->SignalRateRtnMegaCps;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800935c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
				pRangingMeasurementData->AmbientRateRtnMegaCps;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009362:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
				pRangingMeasurementData->EffectiveSpadRtnCount;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009368:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
				pRangingMeasurementData->RangeStatus;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800936e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8009378:	f107 050c 	add.w	r5, r7, #12
 800937c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800937e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009388:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800938c:	4618      	mov	r0, r3
 800938e:	3750      	adds	r7, #80	; 0x50
 8009390:	46bd      	mov	sp, r7
 8009392:	bdb0      	pop	{r4, r5, r7, pc}
 8009394:	10624dd3 	.word	0x10624dd3

08009398 <VL53L0X_PerformSingleRangingMeasurement>:

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7fe fe29 	bl	8008000 <VL53L0X_SetDeviceMode>
 80093ae:	4603      	mov	r3, r0
 80093b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d104      	bne.n	80093c4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff f88c 	bl	80084d8 <VL53L0X_PerformSingleMeasurement>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80093c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d105      	bne.n	80093d8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff febe 	bl	8009150 <VL53L0X_GetRangingMeasurementData>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]
				pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80093d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d105      	bne.n	80093ec <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80093e0:	2100      	movs	r1, #0
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fe fa9c 	bl	8007920 <VL53L0X_ClearInterruptMask>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80093ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <perform_ref_signal_measurement>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009402:	2300      	movs	r3, #0
 8009404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800941c:	2b00      	cmp	r3, #0
 800941e:	d107      	bne.n	8009430 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009420:	22c0      	movs	r2, #192	; 0xc0
 8009422:	2101      	movs	r1, #1
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 fa2a 	bl	800a87e <VL53L0X_WrByte>
 800942a:	4603      	mov	r3, r0
 800942c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009430:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009434:	2b00      	cmp	r3, #0
 8009436:	d108      	bne.n	800944a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ffaa 	bl	8009398 <VL53L0X_PerformSingleRangingMeasurement>
 8009444:	4603      	mov	r3, r0
 8009446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800944a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800944e:	2b00      	cmp	r3, #0
 8009450:	d107      	bne.n	8009462 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009452:	2201      	movs	r2, #1
 8009454:	21ff      	movs	r1, #255	; 0xff
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 fa11 	bl	800a87e <VL53L0X_WrByte>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009466:	2b00      	cmp	r3, #0
 8009468:	d107      	bne.n	800947a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	21b6      	movs	r1, #182	; 0xb6
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fa5a 	bl	800a928 <VL53L0X_RdWord>
 8009474:	4603      	mov	r3, r0
 8009476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800947a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800947e:	2b00      	cmp	r3, #0
 8009480:	d107      	bne.n	8009492 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009482:	2200      	movs	r2, #0
 8009484:	21ff      	movs	r1, #255	; 0xff
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f9f9 	bl	800a87e <VL53L0X_WrByte>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009492:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009496:	2b00      	cmp	r3, #0
 8009498:	d112      	bne.n	80094c0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800949a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800949e:	461a      	mov	r2, r3
 80094a0:	2101      	movs	r1, #1
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 f9eb 	bl	800a87e <VL53L0X_WrByte>
 80094a8:	4603      	mov	r3, r0
 80094aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80094ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80094bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80094c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3728      	adds	r7, #40	; 0x28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
		uint32_t *refSpadCount,
		uint8_t *isApertureSpads)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b09d      	sub	sp, #116	; 0x74
 80094d0:	af06      	add	r7, sp, #24
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094d8:	2300      	movs	r3, #0
 80094da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80094de:	23b4      	movs	r3, #180	; 0xb4
 80094e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80094e4:	2303      	movs	r3, #3
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80094e8:	232c      	movs	r3, #44	; 0x2c
 80094ea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80094f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80094fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009506:	2306      	movs	r3, #6
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800950a:	2300      	movs	r3, #0
 800950c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009524:	2300      	movs	r3, #0
 8009526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009530:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009532:	2300      	movs	r3, #0
 8009534:	64bb      	str	r3, [r7, #72]	; 0x48
 8009536:	e009      	b.n	800954c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953c:	4413      	add	r3, r2
 800953e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009548:	3301      	adds	r3, #1
 800954a:	64bb      	str	r3, [r7, #72]	; 0x48
 800954c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	429a      	cmp	r2, r3
 8009552:	d3f1      	bcc.n	8009538 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009554:	2201      	movs	r2, #1
 8009556:	21ff      	movs	r1, #255	; 0xff
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f001 f990 	bl	800a87e <VL53L0X_WrByte>
 800955e:	4603      	mov	r3, r0
 8009560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009564:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009568:	2b00      	cmp	r3, #0
 800956a:	d107      	bne.n	800957c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800956c:	2200      	movs	r2, #0
 800956e:	214f      	movs	r1, #79	; 0x4f
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 f984 	bl	800a87e <VL53L0X_WrByte>
 8009576:	4603      	mov	r3, r0
 8009578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800957c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009580:	2b00      	cmp	r3, #0
 8009582:	d107      	bne.n	8009594 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009584:	222c      	movs	r2, #44	; 0x2c
 8009586:	214e      	movs	r1, #78	; 0x4e
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f001 f978 	bl	800a87e <VL53L0X_WrByte>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009594:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800959c:	2200      	movs	r2, #0
 800959e:	21ff      	movs	r1, #255	; 0xff
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f001 f96c 	bl	800a87e <VL53L0X_WrByte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80095ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80095b4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80095b8:	461a      	mov	r2, r3
 80095ba:	21b6      	movs	r1, #182	; 0xb6
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f001 f95e 	bl	800a87e <VL53L0X_WrByte>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
				startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80095c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d107      	bne.n	80095e0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80095d0:	2200      	movs	r2, #0
 80095d2:	2180      	movs	r1, #128	; 0x80
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f001 f952 	bl	800a87e <VL53L0X_WrByte>
 80095da:	4603      	mov	r3, r0
 80095dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80095e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80095e8:	f107 0210 	add.w	r2, r7, #16
 80095ec:	f107 0111 	add.w	r1, r7, #17
 80095f0:	2300      	movs	r3, #0
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7fe fb74 	bl	8007ce0 <VL53L0X_perform_ref_calibration>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80095fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009602:	2b00      	cmp	r3, #0
 8009604:	d121      	bne.n	800964a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800960c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009614:	b2d9      	uxtb	r1, r3
				needAptSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009622:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009626:	f107 0218 	add.w	r2, r7, #24
 800962a:	9204      	str	r2, [sp, #16]
 800962c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800962e:	9203      	str	r2, [sp, #12]
 8009630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009632:	9202      	str	r2, [sp, #8]
 8009634:	9301      	str	r3, [sp, #4]
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4623      	mov	r3, r4
 800963c:	4602      	mov	r2, r0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7fe fc62 	bl	8007f08 <enable_ref_spads>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				currentSpadIndex,
				minimumSpadCount,
				&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800964a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800964e:	2b00      	cmp	r3, #0
 8009650:	d174      	bne.n	800973c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009656:	f107 0312 	add.w	r3, r7, #18
 800965a:	4619      	mov	r1, r3
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fecb 	bl	80093f8 <perform_ref_signal_measurement>
 8009662:	4603      	mov	r3, r0
 8009664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009668:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800966c:	2b00      	cmp	r3, #0
 800966e:	d161      	bne.n	8009734 <VL53L0X_perform_ref_spad_management+0x268>
				(peakSignalRateRef > targetRefRate)) {
 8009670:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009672:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009674:	429a      	cmp	r2, r3
 8009676:	d25d      	bcs.n	8009734 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009678:	2300      	movs	r3, #0
 800967a:	64bb      	str	r3, [r7, #72]	; 0x48
 800967c:	e009      	b.n	8009692 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009682:	4413      	add	r3, r2
 8009684:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800968c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968e:	3301      	adds	r3, #1
 8009690:	64bb      	str	r3, [r7, #72]	; 0x48
 8009692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	429a      	cmp	r2, r3
 8009698:	d3f1      	bcc.n	800967e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800969a:	e002      	b.n	80096a2 <VL53L0X_perform_ref_spad_management+0x1d6>
					== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800969c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800969e:	3301      	adds	r3, #1
 80096a0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80096a2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	4413      	add	r3, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fbb4 	bl	8007e18 <is_aperture>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <VL53L0X_perform_ref_spad_management+0x1f2>
					== 0) && (currentSpadIndex < maxSpadCount)) {
 80096b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d3ee      	bcc.n	800969c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80096be:	2301      	movs	r3, #1
 80096c0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80096c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80096d2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80096d6:	f107 0218 	add.w	r2, r7, #24
 80096da:	9204      	str	r2, [sp, #16]
 80096dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096de:	9203      	str	r2, [sp, #12]
 80096e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096e2:	9202      	str	r2, [sp, #8]
 80096e4:	9301      	str	r3, [sp, #4]
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4623      	mov	r3, r4
 80096ec:	4602      	mov	r2, r0
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7fe fc0a 	bl	8007f08 <enable_ref_spads>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80096fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11b      	bne.n	800973a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009706:	f107 0312 	add.w	r3, r7, #18
 800970a:	4619      	mov	r1, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fe73 	bl	80093f8 <perform_ref_signal_measurement>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009718:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10c      	bne.n	800973a <VL53L0X_perform_ref_spad_management+0x26e>
						(peakSignalRateRef > targetRefRate)) {
 8009720:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009722:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009724:	429a      	cmp	r2, r3
 8009726:	d208      	bcs.n	800973a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009728:	2301      	movs	r3, #1
 800972a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009732:	e002      	b.n	800973a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009738:	e000      	b.n	800973c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800973a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800973c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009740:	2b00      	cmp	r3, #0
 8009742:	f040 80af 	bne.w	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
			(peakSignalRateRef < targetRefRate)) {
 8009746:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009748:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800974a:	429a      	cmp	r2, r3
 800974c:	f240 80aa 	bls.w	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009760:	f107 031c 	add.w	r3, r7, #28
 8009764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009766:	4618      	mov	r0, r3
 8009768:	f001 fbd6 	bl	800af18 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800976c:	8a7b      	ldrh	r3, [r7, #18]
 800976e:	461a      	mov	r2, r3
 8009770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfb8      	it	lt
 8009778:	425b      	neglt	r3, r3
 800977a:	647b      	str	r3, [r7, #68]	; 0x44
				targetRefRate);
		complete = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009782:	e086      	b.n	8009892 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
					Dev->Data.SpadData.RefGoodSpadMap,
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800978a:	f107 0314 	add.w	r3, r7, #20
 800978e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009792:	f7fe fae2 	bl	8007d5a <get_next_good_spad>
					spadArraySize, currentSpadIndex,
					&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d103      	bne.n	80097a6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800979e:	23ce      	movs	r3, #206	; 0xce
 80097a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80097a4:	e07e      	b.n	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80097a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	4413      	add	r3, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fb32 	bl	8007e18 <is_aperture>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d003      	beq.n	80097c6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80097be:	2301      	movs	r3, #1
 80097c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80097c4:	e06e      	b.n	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80097c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c8:	3301      	adds	r3, #1
 80097ca:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80097d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe fb36 	bl	8007e4c <enable_spad_bit>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80097e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10c      	bne.n	8009808 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80097ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097f0:	3301      	adds	r3, #1
 80097f2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
						Dev->Data.SpadData.RefSpadEnables);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80097fa:	4619      	mov	r1, r3
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7fe fb5d 	bl	8007ebc <set_ref_spad_map>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009808:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800980c:	2b00      	cmp	r3, #0
 800980e:	d146      	bne.n	800989e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009810:	f107 0312 	add.w	r3, r7, #18
 8009814:	4619      	mov	r1, r3
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fdee 	bl	80093f8 <perform_ref_signal_measurement>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009822:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009826:	2b00      	cmp	r3, #0
 8009828:	d13b      	bne.n	80098a2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800982a:	8a7b      	ldrh	r3, [r7, #18]
 800982c:	461a      	mov	r2, r3
 800982e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfb8      	it	lt
 8009836:	425b      	neglt	r3, r3
 8009838:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800983a:	8a7b      	ldrh	r3, [r7, #18]
 800983c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800983e:	429a      	cmp	r2, r3
 8009840:	d21c      	bcs.n	800987c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009846:	429a      	cmp	r2, r3
 8009848:	d914      	bls.n	8009874 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800984a:	f107 031c 	add.w	r3, r7, #28
 800984e:	4619      	mov	r1, r3
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7fe fb33 	bl	8007ebc <set_ref_spad_map>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
							Dev->Data.SpadData.RefSpadEnables,
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009862:	f107 011c 	add.w	r1, r7, #28
 8009866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009868:	4618      	mov	r0, r3
 800986a:	f001 fb55 	bl	800af18 <memcpy>
							lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009870:	3b01      	subs	r3, #1
 8009872:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987a:	e00a      	b.n	8009892 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
						Dev->Data.SpadData.RefSpadEnables,
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009886:	f107 031c 	add.w	r3, r7, #28
 800988a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988c:	4618      	mov	r0, r3
 800988e:	f001 fb43 	bl	800af18 <memcpy>
		while (!complete) {
 8009892:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009896:	2b00      	cmp	r3, #0
 8009898:	f43f af74 	beq.w	8009784 <VL53L0X_perform_ref_spad_management+0x2b8>
 800989c:	e002      	b.n	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800989e:	bf00      	nop
 80098a0:	e000      	b.n	80098a4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80098a2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80098a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d115      	bne.n	80098d8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098b0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80098b8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	781a      	ldrb	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80098d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80098dc:	4618      	mov	r0, r3
 80098de:	375c      	adds	r7, #92	; 0x5c
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd90      	pop	{r4, r7, pc}

080098e4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
		uint32_t count, uint8_t isApertureSpads)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b093      	sub	sp, #76	; 0x4c
 80098e8:	af06      	add	r7, sp, #24
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80098fc:	23b4      	movs	r3, #180	; 0xb4
 80098fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009902:	2306      	movs	r3, #6
 8009904:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009906:	232c      	movs	r3, #44	; 0x2c
 8009908:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800990a:	2201      	movs	r2, #1
 800990c:	21ff      	movs	r1, #255	; 0xff
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 ffb5 	bl	800a87e <VL53L0X_WrByte>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800991a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800991e:	2b00      	cmp	r3, #0
 8009920:	d107      	bne.n	8009932 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009922:	2200      	movs	r2, #0
 8009924:	214f      	movs	r1, #79	; 0x4f
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 ffa9 	bl	800a87e <VL53L0X_WrByte>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009932:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009936:	2b00      	cmp	r3, #0
 8009938:	d107      	bne.n	800994a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800993a:	222c      	movs	r2, #44	; 0x2c
 800993c:	214e      	movs	r1, #78	; 0x4e
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 ff9d 	bl	800a87e <VL53L0X_WrByte>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800994a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800994e:	2b00      	cmp	r3, #0
 8009950:	d107      	bne.n	8009962 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009952:	2200      	movs	r2, #0
 8009954:	21ff      	movs	r1, #255	; 0xff
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 ff91 	bl	800a87e <VL53L0X_WrByte>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009966:	2b00      	cmp	r3, #0
 8009968:	d109      	bne.n	800997e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800996a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996e:	461a      	mov	r2, r3
 8009970:	21b6      	movs	r1, #182	; 0xb6
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 ff83 	bl	800a87e <VL53L0X_WrByte>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
				startSelect);

	for (index = 0; index < spadArraySize; index++)
 800997e:	2300      	movs	r3, #0
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
 8009982:	e009      	b.n	8009998 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	4413      	add	r3, r2
 800998a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	3301      	adds	r3, #1
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	429a      	cmp	r2, r3
 800999e:	d3f1      	bcc.n	8009984 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d011      	beq.n	80099ca <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80099a6:	e002      	b.n	80099ae <VL53L0X_set_reference_spads+0xca>
				(currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	3301      	adds	r3, #1
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80099ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	4413      	add	r3, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fa2e 	bl	8007e18 <is_aperture>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d103      	bne.n	80099ca <VL53L0X_set_reference_spads+0xe6>
 80099c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d3ee      	bcc.n	80099a8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
			isApertureSpads,
			Dev->Data.SpadData.RefGoodSpadMap,
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			Dev->Data.SpadData.RefSpadEnables,
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80099d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099da:	79f9      	ldrb	r1, [r7, #7]
 80099dc:	f107 0214 	add.w	r2, r7, #20
 80099e0:	9204      	str	r2, [sp, #16]
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	9203      	str	r2, [sp, #12]
 80099e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e8:	9202      	str	r2, [sp, #8]
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	4623      	mov	r3, r4
 80099f2:	4602      	mov	r2, r0
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7fe fa87 	bl	8007f08 <enable_ref_spads>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			startSelect,
			currentSpadIndex,
			count,
			&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009a00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10c      	bne.n	8009a22 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009a22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3734      	adds	r7, #52	; 0x34
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd90      	pop	{r4, r7, pc}

08009a2e <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
		uint8_t *pPhaseCal)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b086      	sub	sp, #24
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009a3e:	2301      	movs	r3, #1
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7fe f94b 	bl	8007ce0 <VL53L0X_perform_ref_calibration>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75fb      	strb	r3, [r7, #23]
			pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <VL53L0X_PerformRefSpadManagement>:

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
		uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a66:	2300      	movs	r3, #0
 8009a68:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7ff fd2c 	bl	80094cc <VL53L0X_perform_ref_spad_management>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75fb      	strb	r3, [r7, #23]
			isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <VL53L0X_SetDeviceAddress>:

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	218a      	movs	r1, #138	; 0x8a
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 feed 	bl	800a87e <VL53L0X_WrByte>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]
			DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8009aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <VL53L0X_SetGpioConfig>:

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
		VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
		VL53L0X_InterruptPolarity Polarity)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	70fb      	strb	r3, [r7, #3]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	70bb      	strb	r3, [r7, #2]
 8009aca:	4613      	mov	r3, r2
 8009acc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009ad8:	23f6      	movs	r3, #246	; 0xf6
 8009ada:	73fb      	strb	r3, [r7, #15]
 8009adc:	e107      	b.n	8009cee <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009ade:	78bb      	ldrb	r3, [r7, #2]
 8009ae0:	2b14      	cmp	r3, #20
 8009ae2:	d110      	bne.n	8009b06 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009ae4:	7e3b      	ldrb	r3, [r7, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009aea:	2310      	movs	r3, #16
 8009aec:	73bb      	strb	r3, [r7, #14]
 8009aee:	e001      	b.n	8009af4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009af0:	2301      	movs	r3, #1
 8009af2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	461a      	mov	r2, r3
 8009af8:	2184      	movs	r1, #132	; 0x84
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 febf 	bl	800a87e <VL53L0X_WrByte>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	e0f3      	b.n	8009cee <VL53L0X_SetGpioConfig+0x23a>
				VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009b06:	78bb      	ldrb	r3, [r7, #2]
 8009b08:	2b15      	cmp	r3, #21
 8009b0a:	f040 8097 	bne.w	8009c3c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b0e:	2201      	movs	r2, #1
 8009b10:	21ff      	movs	r1, #255	; 0xff
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 feb3 	bl	800a87e <VL53L0X_WrByte>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009b22:	2200      	movs	r2, #0
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fea9 	bl	800a87e <VL53L0X_WrByte>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	461a      	mov	r2, r3
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b36:	2200      	movs	r2, #0
 8009b38:	21ff      	movs	r1, #255	; 0xff
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fe9f 	bl	800a87e <VL53L0X_WrByte>
 8009b40:	4603      	mov	r3, r0
 8009b42:	461a      	mov	r2, r3
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	2180      	movs	r1, #128	; 0x80
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fe95 	bl	800a87e <VL53L0X_WrByte>
 8009b54:	4603      	mov	r3, r0
 8009b56:	461a      	mov	r2, r3
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009b5e:	2202      	movs	r2, #2
 8009b60:	2185      	movs	r1, #133	; 0x85
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fe8b 	bl	800a87e <VL53L0X_WrByte>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8009b72:	2204      	movs	r2, #4
 8009b74:	21ff      	movs	r1, #255	; 0xff
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fe81 	bl	800a87e <VL53L0X_WrByte>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	461a      	mov	r2, r3
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009b86:	2200      	movs	r2, #0
 8009b88:	21cd      	movs	r1, #205	; 0xcd
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fe77 	bl	800a87e <VL53L0X_WrByte>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009b9a:	2211      	movs	r2, #17
 8009b9c:	21cc      	movs	r1, #204	; 0xcc
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fe6d 	bl	800a87e <VL53L0X_WrByte>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009bae:	2207      	movs	r2, #7
 8009bb0:	21ff      	movs	r1, #255	; 0xff
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fe63 	bl	800a87e <VL53L0X_WrByte>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	21be      	movs	r1, #190	; 0xbe
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fe59 	bl	800a87e <VL53L0X_WrByte>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009bd6:	2206      	movs	r2, #6
 8009bd8:	21ff      	movs	r1, #255	; 0xff
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fe4f 	bl	800a87e <VL53L0X_WrByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009bea:	2209      	movs	r2, #9
 8009bec:	21cc      	movs	r1, #204	; 0xcc
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fe45 	bl	800a87e <VL53L0X_WrByte>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009bfe:	2200      	movs	r2, #0
 8009c00:	21ff      	movs	r1, #255	; 0xff
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fe3b 	bl	800a87e <VL53L0X_WrByte>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009c12:	2201      	movs	r2, #1
 8009c14:	21ff      	movs	r1, #255	; 0xff
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fe31 	bl	800a87e <VL53L0X_WrByte>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fe27 	bl	800a87e <VL53L0X_WrByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	73fb      	strb	r3, [r7, #15]
 8009c3a:	e058      	b.n	8009cee <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d121      	bne.n	8009c88 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8009c44:	787b      	ldrb	r3, [r7, #1]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d81b      	bhi.n	8009c82 <VL53L0X_SetGpioConfig+0x1ce>
 8009c4a:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <VL53L0X_SetGpioConfig+0x19c>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009c65 	.word	0x08009c65
 8009c54:	08009c6b 	.word	0x08009c6b
 8009c58:	08009c71 	.word	0x08009c71
 8009c5c:	08009c77 	.word	0x08009c77
 8009c60:	08009c7d 	.word	0x08009c7d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8009c64:	2300      	movs	r3, #0
 8009c66:	73bb      	strb	r3, [r7, #14]
				break;
 8009c68:	e00f      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	73bb      	strb	r3, [r7, #14]
				break;
 8009c6e:	e00c      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8009c70:	2302      	movs	r3, #2
 8009c72:	73bb      	strb	r3, [r7, #14]
				break;
 8009c74:	e009      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8009c76:	2303      	movs	r3, #3
 8009c78:	73bb      	strb	r3, [r7, #14]
				break;
 8009c7a:	e006      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	73bb      	strb	r3, [r7, #14]
				break;
 8009c80:	e003      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009c82:	23f5      	movs	r3, #245	; 0xf5
 8009c84:	73fb      	strb	r3, [r7, #15]
 8009c86:	e000      	b.n	8009c8a <VL53L0X_SetGpioConfig+0x1d6>
						VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009c88:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8009c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009c92:	7bbb      	ldrb	r3, [r7, #14]
 8009c94:	461a      	mov	r2, r3
 8009c96:	210a      	movs	r1, #10
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fdf0 	bl	800a87e <VL53L0X_WrByte>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73fb      	strb	r3, [r7, #15]
					VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10f      	bne.n	8009cca <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009caa:	7e3b      	ldrb	r3, [r7, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73bb      	strb	r3, [r7, #14]
 8009cb4:	e001      	b.n	8009cba <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009cb6:	2310      	movs	r3, #16
 8009cb8:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	22ef      	movs	r2, #239	; 0xef
 8009cbe:	2184      	movs	r1, #132	; 0x84
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fe82 	bl	800a9ca <VL53L0X_UpdateByte>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]
					VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d103      	bne.n	8009cda <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	787a      	ldrb	r2, [r7, #1]
 8009cd6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
					Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7fd fe1b 	bl	8007920 <VL53L0X_ClearInterruptMask>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop

08009cfc <VL53L0X_GetFractionEnable>:

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	2109      	movs	r1, #9
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fdee 	bl	800a8f0 <VL53L0X_RdByte>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d106      	bne.n	8009d2e <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b087      	sub	sp, #28
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d5a:	e005      	b.n	8009d68 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	085b      	lsrs	r3, r3, #1
 8009d60:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	3301      	adds	r3, #1
 8009d66:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1f4      	bne.n	8009d5c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009d72:	89fb      	ldrh	r3, [r7, #14]
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	b29a      	uxth	r2, r3
						+ (uint16_t) (ls_byte & 0x000000FF);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009d80:	4413      	add	r3, r2
 8009d82:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009d84:	8afb      	ldrh	r3, [r7, #22]

}
 8009d86:	4618      	mov	r0, r3
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId,
		uint32_t TimeOutMicroSecs)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b08a      	sub	sp, #40	; 0x28
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	607a      	str	r2, [r7, #4]
 8009d9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <set_sequence_step_timeout+0x26>
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d002      	beq.n	8009db8 <set_sequence_step_timeout+0x26>
			(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009db2:	7afb      	ldrb	r3, [r7, #11]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d138      	bne.n	8009e2a <set_sequence_step_timeout+0x98>
			(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009db8:	f107 031b 	add.w	r3, r7, #27
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7fc ffcd 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d11a      	bne.n	8009e0a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009dd4:	7efb      	ldrb	r3, [r7, #27]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7fe fc1a 	bl	8008614 <VL53L0X_calc_timeout_mclks>
 8009de0:	4603      	mov	r3, r0
 8009de2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009de4:	8bbb      	ldrh	r3, [r7, #28]
 8009de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dea:	d903      	bls.n	8009df4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009dec:	23ff      	movs	r3, #255	; 0xff
 8009dee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009df2:	e004      	b.n	8009dfe <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
						(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009df4:	8bbb      	ldrh	r3, [r7, #28]
 8009df6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009dfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009e0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f040 80ab 	bne.w	8009f6a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e18:	461a      	mov	r2, r3
 8009e1a:	2146      	movs	r1, #70	; 0x46
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fd2e 	bl	800a87e <VL53L0X_WrByte>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009e28:	e09f      	b.n	8009f6a <set_sequence_step_timeout+0x1d8>
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d135      	bne.n	8009e9c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11b      	bne.n	8009e70 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009e38:	f107 031b 	add.w	r3, r7, #27
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	2100      	movs	r1, #0
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7fc ff8d 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
						VL53L0X_calc_timeout_mclks(Dev,
 8009e4c:	7efb      	ldrb	r3, [r7, #27]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7fe fbde 	bl	8008614 <VL53L0X_calc_timeout_mclks>
 8009e58:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
								TimeOutMicroSecs,
								(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff ff6b 	bl	8009d3a <VL53L0X_encode_timeout>
 8009e64:	4603      	mov	r3, r0
 8009e66:	833b      	strh	r3, [r7, #24]
						PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009e68:	8b3a      	ldrh	r2, [r7, #24]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
						LastEncodedTimeout,
						PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d108      	bne.n	8009e8a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009e78:	8b3b      	ldrh	r3, [r7, #24]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	2151      	movs	r1, #81	; 0x51
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fd15 	bl	800a8ae <VL53L0X_WrWord>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
						PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009e8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d16b      	bne.n	8009f6a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009e9a:	e066      	b.n	8009f6a <set_sequence_step_timeout+0x1d8>
						Dev,
						PreRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d160      	bne.n	8009f64 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f7fc fc03 	bl	80066b4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009eb2:	7cfb      	ldrb	r3, [r7, #19]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01d      	beq.n	8009ef4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009eb8:	f107 031b 	add.w	r3, r7, #27
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7fc ff4d 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10f      	bne.n	8009ef4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009ed4:	f107 0318 	add.w	r3, r7, #24
 8009ed8:	461a      	mov	r2, r3
 8009eda:	2151      	movs	r1, #81	; 0x51
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fd23 	bl	800a928 <VL53L0X_RdWord>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
							VL53L0X_decode_timeout(
 8009ee8:	8b3b      	ldrh	r3, [r7, #24]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fc ff4f 	bl	8006d8e <VL53L0X_decode_timeout>
 8009ef0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009ef2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009efc:	f107 031b 	add.w	r3, r7, #27
 8009f00:	461a      	mov	r2, r3
 8009f02:	2101      	movs	r1, #1
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7fc ff2b 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d128      	bne.n	8009f6a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
						VL53L0X_calc_timeout_mclks(Dev,
 8009f18:	7efb      	ldrb	r3, [r7, #27]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f7fe fb78 	bl	8008614 <VL53L0X_calc_timeout_mclks>
 8009f24:	6238      	str	r0, [r7, #32]
								TimeOutMicroSecs,
								(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f28:	6a3a      	ldr	r2, [r7, #32]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
						VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009f2e:	6a38      	ldr	r0, [r7, #32]
 8009f30:	f7ff ff03 	bl	8009d3a <VL53L0X_encode_timeout>
 8009f34:	4603      	mov	r3, r0
 8009f36:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009f38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d108      	bne.n	8009f52 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009f40:	8bfb      	ldrh	r3, [r7, #30]
 8009f42:	461a      	mov	r2, r3
 8009f44:	2171      	movs	r1, #113	; 0x71
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 fcb1 	bl	800a8ae <VL53L0X_WrWord>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009f52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d107      	bne.n	8009f6a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009f62:	e002      	b.n	8009f6a <set_sequence_step_timeout+0x1d8>
							FinalRangeTimeoutMicroSecs,
							TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f64:	23fc      	movs	r3, #252	; 0xfc
 8009f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009f6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b092      	sub	sp, #72	; 0x48
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009f86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f8a:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009f8c:	f240 7376 	movw	r3, #1910	; 0x776
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009f92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009f96:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009f98:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009f9c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009f9e:	f240 234e 	movw	r3, #590	; 0x24e
 8009fa2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009fa4:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009faa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009fb0:	f240 2326 	movw	r3, #550	; 0x226
 8009fb4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009fba:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009fbe:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d205      	bcs.n	8009fd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fcc:	23fc      	movs	r3, #252	; 0xfc
 8009fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009fd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fd6:	e0aa      	b.n	800a12e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
			MeasurementTimingBudgetMicroSeconds -
			(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009fde:	683a      	ldr	r2, [r7, #0]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7fc fb62 	bl	80066b4 <VL53L0X_GetSequenceStepEnables>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009ff6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d15b      	bne.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			(SchedulerSequenceSteps.TccOn  ||
 8009ffe:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a000:	2b00      	cmp	r3, #0
 800a002:	d105      	bne.n	800a010 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
					SchedulerSequenceSteps.MsrcOn ||
 800a004:	7d7b      	ldrb	r3, [r7, #21]
			(SchedulerSequenceSteps.TccOn  ||
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
					SchedulerSequenceSteps.DssOn)) {
 800a00a:	7dbb      	ldrb	r3, [r7, #22]
					SchedulerSequenceSteps.MsrcOn ||
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d052      	beq.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a010:	f107 0310 	add.w	r3, r7, #16
 800a014:	461a      	mov	r2, r3
 800a016:	2102      	movs	r1, #2
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7fc ff17 	bl	8006e4c <get_sequence_step_timeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a024:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a02c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a030:	e07d      	b.n	800a12e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a032:	7d3b      	ldrb	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00f      	beq.n	800a058 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
					+ TccOverheadMicroSeconds;
 800a038:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a03a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a03c:	4413      	add	r3, r2
 800a03e:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a044:	429a      	cmp	r2, r3
 800a046:	d204      	bcs.n	800a052 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
					FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	643b      	str	r3, [r7, #64]	; 0x40
 800a050:	e002      	b.n	800a058 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
						SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a052:	23fc      	movs	r3, #252	; 0xfc
 800a054:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a058:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a060:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a064:	e063      	b.n	800a12e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a066:	7dbb      	ldrb	r3, [r7, #22]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d011      	beq.n	800a090 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	4413      	add	r3, r2
 800a072:	005b      	lsls	r3, r3, #1
 800a074:	61fb      	str	r3, [r7, #28]
					DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d204      	bcs.n	800a088 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
				-= SubTimeout;
 800a07e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	643b      	str	r3, [r7, #64]	; 0x40
 800a086:	e016      	b.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a088:	23fc      	movs	r3, #252	; 0xfc
 800a08a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a08e:	e012      	b.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a090:	7d7b      	ldrb	r3, [r7, #21]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00f      	beq.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a09a:	4413      	add	r3, r2
 800a09c:	61fb      	str	r3, [r7, #28]
					MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a09e:	69fa      	ldr	r2, [r7, #28]
 800a0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d204      	bcs.n	800a0b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
				-= SubTimeout;
 800a0a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ae:	e002      	b.n	800a0b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0b0:	23fc      	movs	r3, #252	; 0xfc
 800a0b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a0b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a0be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a0c2:	e034      	b.n	800a12e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d019      	beq.n	800a0fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2103      	movs	r1, #3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fc feba 	bl	8006e4c <get_sequence_step_timeout>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d204      	bcs.n	800a0f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f6:	e002      	b.n	800a0fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0f8:	23fc      	movs	r3, #252	; 0xfc
 800a0fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a0fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a102:	2b00      	cmp	r3, #0
 800a104:	d111      	bne.n	800a12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
			SchedulerSequenceSteps.FinalRangeOn) {
 800a106:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00e      	beq.n	800a12a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a10c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a116:	2104      	movs	r1, #4
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff fe3a 	bl	8009d92 <set_sequence_step_timeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	615a      	str	r2, [r3, #20]
				MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a12a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3748      	adds	r7, #72	; 0x48
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b084      	sub	sp, #16
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff ff15 	bl	8009f76 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
			MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800a150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	460b      	mov	r3, r1
 800a166:	70fb      	strb	r3, [r7, #3]
 800a168:	4613      	mov	r3, r2
 800a16a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a16c:	2300      	movs	r3, #0
 800a16e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a178:	f107 030f 	add.w	r3, r7, #15
 800a17c:	461a      	mov	r2, r3
 800a17e:	2101      	movs	r1, #1
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fbb5 	bl	800a8f0 <VL53L0X_RdByte>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
			&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800a18e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d15a      	bne.n	800a24c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800a196:	78bb      	ldrb	r3, [r7, #2]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d12b      	bne.n	800a1f4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d825      	bhi.n	800a1ee <VL53L0X_SetSequenceStepEnable+0x92>
 800a1a2:	a201      	add	r2, pc, #4	; (adr r2, 800a1a8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800a1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a8:	0800a1bd 	.word	0x0800a1bd
 800a1ac:	0800a1c7 	.word	0x0800a1c7
 800a1b0:	0800a1d1 	.word	0x0800a1d1
 800a1b4:	0800a1db 	.word	0x0800a1db
 800a1b8:	0800a1e5 	.word	0x0800a1e5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800a1bc:	7dbb      	ldrb	r3, [r7, #22]
 800a1be:	f043 0310 	orr.w	r3, r3, #16
 800a1c2:	75bb      	strb	r3, [r7, #22]
				break;
 800a1c4:	e043      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800a1c6:	7dbb      	ldrb	r3, [r7, #22]
 800a1c8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800a1cc:	75bb      	strb	r3, [r7, #22]
				break;
 800a1ce:	e03e      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800a1d0:	7dbb      	ldrb	r3, [r7, #22]
 800a1d2:	f043 0304 	orr.w	r3, r3, #4
 800a1d6:	75bb      	strb	r3, [r7, #22]
				break;
 800a1d8:	e039      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800a1da:	7dbb      	ldrb	r3, [r7, #22]
 800a1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1e0:	75bb      	strb	r3, [r7, #22]
				break;
 800a1e2:	e034      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800a1e4:	7dbb      	ldrb	r3, [r7, #22]
 800a1e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1ea:	75bb      	strb	r3, [r7, #22]
				break;
 800a1ec:	e02f      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a1ee:	23fc      	movs	r3, #252	; 0xfc
 800a1f0:	75fb      	strb	r3, [r7, #23]
 800a1f2:	e02c      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d825      	bhi.n	800a246 <VL53L0X_SetSequenceStepEnable+0xea>
 800a1fa:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800a1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a200:	0800a215 	.word	0x0800a215
 800a204:	0800a21f 	.word	0x0800a21f
 800a208:	0800a229 	.word	0x0800a229
 800a20c:	0800a233 	.word	0x0800a233
 800a210:	0800a23d 	.word	0x0800a23d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800a214:	7dbb      	ldrb	r3, [r7, #22]
 800a216:	f023 0310 	bic.w	r3, r3, #16
 800a21a:	75bb      	strb	r3, [r7, #22]
				break;
 800a21c:	e017      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800a21e:	7dbb      	ldrb	r3, [r7, #22]
 800a220:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a224:	75bb      	strb	r3, [r7, #22]
				break;
 800a226:	e012      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800a228:	7dbb      	ldrb	r3, [r7, #22]
 800a22a:	f023 0304 	bic.w	r3, r3, #4
 800a22e:	75bb      	strb	r3, [r7, #22]
				break;
 800a230:	e00d      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800a232:	7dbb      	ldrb	r3, [r7, #22]
 800a234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a238:	75bb      	strb	r3, [r7, #22]
				break;
 800a23a:	e008      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800a23c:	7dbb      	ldrb	r3, [r7, #22]
 800a23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a242:	75bb      	strb	r3, [r7, #22]
				break;
 800a244:	e003      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a246:	23fc      	movs	r3, #252	; 0xfc
 800a248:	75fb      	strb	r3, [r7, #23]
 800a24a:	e000      	b.n	800a24e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800a24c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800a24e:	7bfb      	ldrb	r3, [r7, #15]
 800a250:	7dba      	ldrb	r2, [r7, #22]
 800a252:	429a      	cmp	r2, r3
 800a254:	d01e      	beq.n	800a294 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800a256:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d107      	bne.n	800a26e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800a25e:	7dbb      	ldrb	r3, [r7, #22]
 800a260:	461a      	mov	r2, r3
 800a262:	2101      	movs	r1, #1
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fb0a 	bl	800a87e <VL53L0X_WrByte>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800a26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d103      	bne.n	800a27e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7dba      	ldrb	r2, [r7, #22]
 800a27a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800a27e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d106      	bne.n	800a294 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	613b      	str	r3, [r7, #16]
					MeasurementTimingBudgetMicroSeconds,
					MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a28c:	6939      	ldr	r1, [r7, #16]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff ff51 	bl	800a136 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <VL53L0X_SetLimitCheckEnable>:

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		uint8_t LimitCheckEnable)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	807b      	strh	r3, [r7, #2]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800a2c0:	887b      	ldrh	r3, [r7, #2]
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	d902      	bls.n	800a2cc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2c6:	23fc      	movs	r3, #252	; 0xfc
 800a2c8:	75fb      	strb	r3, [r7, #23]
 800a2ca:	e05b      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800a2cc:	787b      	ldrb	r3, [r7, #1]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d106      	bne.n	800a2e0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	73bb      	strb	r3, [r7, #14]
 800a2de:	e00a      	b.n	800a2f6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800a2e0:	887b      	ldrh	r3, [r7, #2]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	330c      	adds	r3, #12
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	613b      	str	r3, [r7, #16]
					LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800a2f6:	887b      	ldrh	r3, [r7, #2]
 800a2f8:	2b05      	cmp	r3, #5
 800a2fa:	d841      	bhi.n	800a380 <VL53L0X_SetLimitCheckEnable+0xe0>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <VL53L0X_SetLimitCheckEnable+0x64>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a31d 	.word	0x0800a31d
 800a308:	0800a327 	.word	0x0800a327
 800a30c:	0800a33d 	.word	0x0800a33d
 800a310:	0800a347 	.word	0x0800a347
 800a314:	0800a351 	.word	0x0800a351
 800a318:	0800a369 	.word	0x0800a369

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7bfa      	ldrb	r2, [r7, #15]
 800a320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
					LimitCheckEnableInt);

			break;
 800a324:	e02e      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	2144      	movs	r1, #68	; 0x44
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fabc 	bl	800a8ae <VL53L0X_WrWord>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]

			break;
 800a33a:	e023      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7bfa      	ldrb	r2, [r7, #15]
 800a340:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
					VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
					LimitCheckEnableInt);

			break;
 800a344:	e01e      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7bfa      	ldrb	r2, [r7, #15]
 800a34a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
					LimitCheckEnableInt);

			break;
 800a34e:	e019      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a356:	7b7b      	ldrb	r3, [r7, #13]
 800a358:	22fe      	movs	r2, #254	; 0xfe
 800a35a:	2160      	movs	r1, #96	; 0x60
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fb34 	bl	800a9ca <VL53L0X_UpdateByte>
 800a362:	4603      	mov	r3, r0
 800a364:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_MSRC_CONFIG_CONTROL,
					0xFE, Temp8);

			break;
 800a366:	e00d      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800a368:	7bbb      	ldrb	r3, [r7, #14]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800a36e:	7b7b      	ldrb	r3, [r7, #13]
 800a370:	22ef      	movs	r2, #239	; 0xef
 800a372:	2160      	movs	r1, #96	; 0x60
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fb28 	bl	800a9ca <VL53L0X_UpdateByte>
 800a37a:	4603      	mov	r3, r0
 800a37c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_MSRC_CONFIG_CONTROL,
					0xEF, Temp8);

			break;
 800a37e:	e001      	b.n	800a384 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a380:	23fc      	movs	r3, #252	; 0xfc
 800a382:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10f      	bne.n	800a3ac <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800a38c:	787b      	ldrb	r3, [r7, #1]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a392:	887b      	ldrh	r3, [r7, #2]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4413      	add	r3, r2
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a39e:	e005      	b.n	800a3ac <VL53L0X_SetLimitCheckEnable+0x10c>
					LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800a3a0:	887b      	ldrh	r3, [r7, #2]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a3ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <VL53L0X_StaticInit>:

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800a3b8:	b5b0      	push	{r4, r5, r7, lr}
 800a3ba:	b09e      	sub	sp, #120	; 0x78
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters;
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fb fa94 	bl	8005916 <VL53L0X_get_info_from_device>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800a3fa:	663b      	str	r3, [r7, #96]	; 0x60
			ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800a402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800a406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d80d      	bhi.n	800a42a <VL53L0X_StaticInit+0x72>
 800a40e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a412:	2b01      	cmp	r3, #1
 800a414:	d102      	bne.n	800a41c <VL53L0X_StaticInit+0x64>
			((ApertureSpads == 1) && (count > 32)) ||
 800a416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a418:	2b20      	cmp	r3, #32
 800a41a:	d806      	bhi.n	800a42a <VL53L0X_StaticInit+0x72>
 800a41c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10e      	bne.n	800a442 <VL53L0X_StaticInit+0x8a>
			((ApertureSpads == 0) && (count > 12)))
 800a424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a426:	2b0c      	cmp	r3, #12
 800a428:	d90b      	bls.n	800a442 <VL53L0X_StaticInit+0x8a>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800a42a:	f107 0218 	add.w	r2, r7, #24
 800a42e:	f107 0314 	add.w	r3, r7, #20
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff f849 	bl	80094cc <VL53L0X_perform_ref_spad_management>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a440:	e009      	b.n	800a456 <VL53L0X_StaticInit+0x9e>
				&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800a442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a446:	461a      	mov	r2, r3
 800a448:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fa4a 	bl	80098e4 <VL53L0X_set_reference_spads>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800a456:	4b94      	ldr	r3, [pc, #592]	; (800a6a8 <VL53L0X_StaticInit+0x2f0>)
 800a458:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800a45a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10f      	bne.n	800a482 <VL53L0X_StaticInit+0xca>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800a468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800a46c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <VL53L0X_StaticInit+0xc6>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a47a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a47c:	e001      	b.n	800a482 <VL53L0X_StaticInit+0xca>
					pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800a47e:	4b8a      	ldr	r3, [pc, #552]	; (800a6a8 <VL53L0X_StaticInit+0x2f0>)
 800a480:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a482:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a486:	2b00      	cmp	r3, #0
 800a488:	d106      	bne.n	800a498 <VL53L0X_StaticInit+0xe0>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800a48a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7fd fe19 	bl	80080c4 <VL53L0X_load_tuning_settings>
 800a492:	4603      	mov	r3, r0
 800a494:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800a498:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <VL53L0X_StaticInit+0xfe>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fb02 	bl	8009ab4 <VL53L0X_SetGpioConfig>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
				VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d121      	bne.n	800a502 <VL53L0X_StaticInit+0x14a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4be:	2201      	movs	r2, #1
 800a4c0:	21ff      	movs	r1, #255	; 0xff
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f9db 	bl	800a87e <VL53L0X_WrByte>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800a4ce:	f107 031a 	add.w	r3, r7, #26
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	2184      	movs	r1, #132	; 0x84
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fa26 	bl	800a928 <VL53L0X_RdWord>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	21ff      	movs	r1, #255	; 0xff
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f9c5 	bl	800a87e <VL53L0X_WrByte>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a502:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a506:	2b00      	cmp	r3, #0
 800a508:	d105      	bne.n	800a516 <VL53L0X_StaticInit+0x15e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800a50a:	8b7b      	ldrh	r3, [r7, #26]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	461a      	mov	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800a516:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d108      	bne.n	800a530 <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800a51e:	f107 031c 	add.w	r3, r7, #28
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fc fe36 	bl	8007196 <VL53L0X_GetDeviceParameters>
 800a52a:	4603      	mov	r3, r0
 800a52c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800a530:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a534:	2b00      	cmp	r3, #0
 800a536:	d110      	bne.n	800a55a <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800a538:	f107 0319 	add.w	r3, r7, #25
 800a53c:	4619      	mov	r1, r3
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fbdc 	bl	8009cfc <VL53L0X_GetFractionEnable>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800a54a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d103      	bne.n	800a55a <VL53L0X_StaticInit+0x1a2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800a552:	7e7a      	ldrb	r2, [r7, #25]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800a55a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10e      	bne.n	800a580 <VL53L0X_StaticInit+0x1c8>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f103 0410 	add.w	r4, r3, #16
 800a568:	f107 051c 	add.w	r5, r7, #28
 800a56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a56e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a578:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a57c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800a580:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a584:	2b00      	cmp	r3, #0
 800a586:	d111      	bne.n	800a5ac <VL53L0X_StaticInit+0x1f4>
		Status = VL53L0X_RdByte(Dev,
 800a588:	f107 0319 	add.w	r3, r7, #25
 800a58c:	461a      	mov	r2, r3
 800a58e:	2101      	movs	r1, #1
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f9ad 	bl	800a8f0 <VL53L0X_RdByte>
 800a596:	4603      	mov	r3, r0
 800a598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800a59c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d103      	bne.n	800a5ac <VL53L0X_StaticInit+0x1f4>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800a5a4:	7e7a      	ldrb	r2, [r7, #25]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800a5ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <VL53L0X_StaticInit+0x20c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f7ff fdcf 	bl	800a15c <VL53L0X_SetSequenceStepEnable>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a5c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <VL53L0X_StaticInit+0x224>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7ff fdc3 	bl	800a15c <VL53L0X_SetSequenceStepEnable>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800a5dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <VL53L0X_StaticInit+0x234>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a5ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <VL53L0X_StaticInit+0x250>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a5f4:	f107 0313 	add.w	r3, r7, #19
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7fc fbaf 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 800a602:	4603      	mov	r3, r0
 800a604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				Dev,
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a608:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <VL53L0X_StaticInit+0x260>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a610:	7cfa      	ldrb	r2, [r7, #19]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800a618:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d109      	bne.n	800a634 <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800a620:	f107 0313 	add.w	r3, r7, #19
 800a624:	461a      	mov	r2, r3
 800a626:	2101      	movs	r1, #1
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7fc fb99 	bl	8006d60 <VL53L0X_GetVcselPulsePeriod>
 800a62e:	4603      	mov	r3, r0
 800a630:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				Dev,
				VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
				&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a634:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <VL53L0X_StaticInit+0x28c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a63c:	7cfa      	ldrb	r2, [r7, #19]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a644:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <VL53L0X_StaticInit+0x2a8>
		Status = get_sequence_step_timeout(
 800a64c:	f107 030c 	add.w	r3, r7, #12
 800a650:	461a      	mov	r2, r3
 800a652:	2103      	movs	r1, #3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7fc fbf9 	bl	8006e4c <get_sequence_step_timeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				Dev,
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a660:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a664:	2b00      	cmp	r3, #0
 800a666:	d103      	bne.n	800a670 <VL53L0X_StaticInit+0x2b8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				PreRangeTimeoutMicroSecs,
				seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800a670:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <VL53L0X_StaticInit+0x2d4>
		Status = get_sequence_step_timeout(
 800a678:	f107 030c 	add.w	r3, r7, #12
 800a67c:	461a      	mov	r2, r3
 800a67e:	2104      	movs	r1, #4
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7fc fbe3 	bl	8006e4c <get_sequence_step_timeout>
 800a686:	4603      	mov	r3, r0
 800a688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				Dev,
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a68c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800a690:	2b00      	cmp	r3, #0
 800a692:	d103      	bne.n	800a69c <VL53L0X_StaticInit+0x2e4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				FinalRangeTimeoutMicroSecs,
				seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a69c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3770      	adds	r7, #112	; 0x70
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a8:	200001c4 	.word	0x200001c4

0800a6ac <VL53L0X_StopMeasurement>:


VL53L0X_Error VL53L0X_StopMeasurement(VL53L0X_DEV Dev)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8de 	bl	800a87e <VL53L0X_WrByte>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT);

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	21ff      	movs	r1, #255	; 0xff
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f8d7 	bl	800a87e <VL53L0X_WrByte>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f8d0 	bl	800a87e <VL53L0X_WrByte>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x91, 0x00);
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2191      	movs	r1, #145	; 0x91
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f8c9 	bl	800a87e <VL53L0X_WrByte>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f8c2 	bl	800a87e <VL53L0X_WrByte>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6fe:	2200      	movs	r2, #0
 800a700:	21ff      	movs	r1, #255	; 0xff
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f8bb 	bl	800a87e <VL53L0X_WrByte>
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800a70c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d103      	bne.n	800a71c <VL53L0X_StopMeasurement+0x70>
		/* Set PAL State to Idle */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2203      	movs	r2, #3
 800a718:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	/* Check if need to apply interrupt settings */
	if (Status == VL53L0X_ERROR_NONE)
 800a71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d105      	bne.n	800a730 <VL53L0X_StopMeasurement+0x84>
		Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 0);
 800a724:	2100      	movs	r1, #0
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7fd fdae 	bl	8008288 <VL53L0X_CheckAndLoadInterruptSettings>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <VL53L0X_GetStopCompletedStatus>:

VL53L0X_Error VL53L0X_GetStopCompletedStatus(VL53L0X_DEV Dev,
		uint32_t *pStopStatus)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a746:	2300      	movs	r3, #0
 800a748:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a74e:	2201      	movs	r2, #1
 800a750:	21ff      	movs	r1, #255	; 0xff
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f893 	bl	800a87e <VL53L0X_WrByte>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d108      	bne.n	800a776 <VL53L0X_GetStopCompletedStatus+0x3a>
		Status = VL53L0X_RdByte(Dev, 0x04, &Byte);
 800a764:	f107 030e 	add.w	r3, r7, #14
 800a768:	461a      	mov	r2, r3
 800a76a:	2104      	movs	r1, #4
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f8bf 	bl	800a8f0 <VL53L0X_RdByte>
 800a772:	4603      	mov	r3, r0
 800a774:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <VL53L0X_GetStopCompletedStatus+0x50>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x0);
 800a77e:	2200      	movs	r2, #0
 800a780:	21ff      	movs	r1, #255	; 0xff
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f87b 	bl	800a87e <VL53L0X_WrByte>
 800a788:	4603      	mov	r3, r0
 800a78a:	73fb      	strb	r3, [r7, #15]

	*pStopStatus = Byte;
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
 800a78e:	461a      	mov	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	601a      	str	r2, [r3, #0]

	if (Byte == 0) {
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d133      	bne.n	800a802 <VL53L0X_GetStopCompletedStatus+0xc6>
		Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a79a:	2201      	movs	r2, #1
 800a79c:	2180      	movs	r1, #128	; 0x80
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f86d 	bl	800a87e <VL53L0X_WrByte>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	21ff      	movs	r1, #255	; 0xff
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f866 	bl	800a87e <VL53L0X_WrByte>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f85f 	bl	800a87e <VL53L0X_WrByte>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x91,
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	2191      	movs	r1, #145	; 0x91
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f855 	bl	800a87e <VL53L0X_WrByte>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]
				PALDevDataGet(Dev, StopVariable));
		Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a7d8:	2201      	movs	r2, #1
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f84e 	bl	800a87e <VL53L0X_WrByte>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	21ff      	movs	r1, #255	; 0xff
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f847 	bl	800a87e <VL53L0X_WrByte>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2180      	movs	r1, #128	; 0x80
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f840 	bl	800a87e <VL53L0X_WrByte>
 800a7fe:	4603      	mov	r3, r0
 800a800:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a802:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <VL53L0X_WriteMulti>:

/****************** Write and read functions from I2C *************************/

VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b086      	sub	sp, #24
 800a812:	af00      	add	r7, sp, #0
 800a814:	60f8      	str	r0, [r7, #12]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
 800a81a:	460b      	mov	r3, r1
 800a81c:	72fb      	strb	r3, [r7, #11]
	int  status;

	status = VL53L0X_I2CWrite(Dev->I2cDevAddr, index, pdata, (uint16_t)count);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	b29b      	uxth	r3, r3
 800a828:	7af9      	ldrb	r1, [r7, #11]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	f000 f944 	bl	800aab8 <VL53L0X_I2CWrite>
 800a830:	4603      	mov	r3, r0
 800a832:	617b      	str	r3, [r7, #20]
	return status;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	b25b      	sxtb	r3, r3
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	460b      	mov	r3, r1
 800a84e:	72fb      	strb	r3, [r7, #11]
	int status;

	if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b3f      	cmp	r3, #63	; 0x3f
 800a854:	d902      	bls.n	800a85c <VL53L0X_ReadMulti+0x1c>
		status = VL53L0X_ERROR_INVALID_PARAMS;
 800a856:	f06f 0303 	mvn.w	r3, #3
 800a85a:	617b      	str	r3, [r7, #20]
	}

	status = VL53L0X_I2CRead(Dev->I2cDevAddr, index, pdata, (uint16_t)count);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	7af9      	ldrb	r1, [r7, #11]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	f000 f8e5 	bl	800aa38 <VL53L0X_I2CRead>
 800a86e:	4603      	mov	r3, r0
 800a870:	617b      	str	r3, [r7, #20]

	return status;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	b25b      	sxtb	r3, r3
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 800a87e:	b580      	push	{r7, lr}
 800a880:	b084      	sub	sp, #16
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	460b      	mov	r3, r1
 800a888:	70fb      	strb	r3, [r7, #3]
 800a88a:	4613      	mov	r3, r2
 800a88c:	70bb      	strb	r3, [r7, #2]
	int  status;

	status=VL53L0X_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a894:	1cba      	adds	r2, r7, #2
 800a896:	78f9      	ldrb	r1, [r7, #3]
 800a898:	2301      	movs	r3, #1
 800a89a:	f000 f90d 	bl	800aab8 <VL53L0X_I2CWrite>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	60fb      	str	r3, [r7, #12]
	return status;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	b25b      	sxtb	r3, r3
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70fb      	strb	r3, [r7, #3]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	803b      	strh	r3, [r7, #0]
	int  status;
	uint8_t buffer[2];

	buffer[0] = data >> 8;
 800a8be:	883b      	ldrh	r3, [r7, #0]
 800a8c0:	0a1b      	lsrs	r3, r3, #8
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	723b      	strb	r3, [r7, #8]
	buffer[1] = data & 0x00FF;
 800a8c8:	883b      	ldrh	r3, [r7, #0]
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	727b      	strb	r3, [r7, #9]
	status=VL53L0X_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a8d4:	f107 0208 	add.w	r2, r7, #8
 800a8d8:	78f9      	ldrb	r1, [r7, #3]
 800a8da:	2302      	movs	r3, #2
 800a8dc:	f000 f8ec 	bl	800aab8 <VL53L0X_I2CWrite>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	60fb      	str	r3, [r7, #12]
	return status;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	b25b      	sxtb	r3, r3
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <VL53L0X_RdByte>:
	return status;
}


VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	72fb      	strb	r3, [r7, #11]
	int  status;

	status = VL53L0X_I2CRead(Dev->I2cDevAddr, index, data, 1);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a904:	7af9      	ldrb	r1, [r7, #11]
 800a906:	2301      	movs	r3, #1
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f000 f895 	bl	800aa38 <VL53L0X_I2CRead>
 800a90e:	4603      	mov	r3, r0
 800a910:	617b      	str	r3, [r7, #20]

	if(status)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <VL53L0X_RdByte+0x2e>
		return -1;
 800a918:	f04f 33ff 	mov.w	r3, #4294967295
 800a91c:	e000      	b.n	800a920 <VL53L0X_RdByte+0x30>

	return 0;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b086      	sub	sp, #24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	460b      	mov	r3, r1
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	72fb      	strb	r3, [r7, #11]
	int  status;
	uint8_t buffer[2] = {0,0};
 800a936:	2300      	movs	r3, #0
 800a938:	823b      	strh	r3, [r7, #16]

	status = VL53L0X_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a940:	f107 0210 	add.w	r2, r7, #16
 800a944:	7af9      	ldrb	r1, [r7, #11]
 800a946:	2302      	movs	r3, #2
 800a948:	f000 f876 	bl	800aa38 <VL53L0X_I2CRead>
 800a94c:	4603      	mov	r3, r0
 800a94e:	617b      	str	r3, [r7, #20]
	if (!status)
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <VL53L0X_RdWord+0x42>
	{
		*data = (buffer[0] << 8) + buffer[1];
 800a956:	7c3b      	ldrb	r3, [r7, #16]
 800a958:	b29b      	uxth	r3, r3
 800a95a:	021b      	lsls	r3, r3, #8
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	7c7b      	ldrb	r3, [r7, #17]
 800a960:	b29b      	uxth	r3, r3
 800a962:	4413      	add	r3, r2
 800a964:	b29a      	uxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	801a      	strh	r2, [r3, #0]
	}
	return status;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	b25b      	sxtb	r3, r3

}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b086      	sub	sp, #24
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	60f8      	str	r0, [r7, #12]
 800a97e:	460b      	mov	r3, r1
 800a980:	607a      	str	r2, [r7, #4]
 800a982:	72fb      	strb	r3, [r7, #11]
	int status;
	uint8_t buffer[4] = {0,0,0,0};
 800a984:	2300      	movs	r3, #0
 800a986:	613b      	str	r3, [r7, #16]

	status = VL53L0X_I2CRead(Dev->I2cDevAddr, index, buffer, 4);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a98e:	f107 0210 	add.w	r2, r7, #16
 800a992:	7af9      	ldrb	r1, [r7, #11]
 800a994:	2304      	movs	r3, #4
 800a996:	f000 f84f 	bl	800aa38 <VL53L0X_I2CRead>
 800a99a:	4603      	mov	r3, r0
 800a99c:	617b      	str	r3, [r7, #20]
	if(!status)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10c      	bne.n	800a9be <VL53L0X_RdDWord+0x48>
	{
		*data = (buffer[0] << 24) + (buffer[1] << 16) + (buffer[2] << 8) + buffer[3];
 800a9a4:	7c3b      	ldrb	r3, [r7, #16]
 800a9a6:	061a      	lsls	r2, r3, #24
 800a9a8:	7c7b      	ldrb	r3, [r7, #17]
 800a9aa:	041b      	lsls	r3, r3, #16
 800a9ac:	441a      	add	r2, r3
 800a9ae:	7cbb      	ldrb	r3, [r7, #18]
 800a9b0:	021b      	lsls	r3, r3, #8
 800a9b2:	4413      	add	r3, r2
 800a9b4:	7cfa      	ldrb	r2, [r7, #19]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	601a      	str	r2, [r3, #0]
	}
	return status;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	b25b      	sxtb	r3, r3

}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	4603      	mov	r3, r0
 800a9da:	70fb      	strb	r3, [r7, #3]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70bb      	strb	r3, [r7, #2]
 800a9e0:	4613      	mov	r3, r2
 800a9e2:	707b      	strb	r3, [r7, #1]
	int  status;
	uint8_t buffer = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	72fb      	strb	r3, [r7, #11]

	/* read data direct onto buffer */
	status = VL53L0X_I2CRead(Dev->I2cDevAddr, index, &buffer,1);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800a9ee:	f107 020b 	add.w	r2, r7, #11
 800a9f2:	78f9      	ldrb	r1, [r7, #3]
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f000 f81f 	bl	800aa38 <VL53L0X_I2CRead>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	60fb      	str	r3, [r7, #12]
	if (!status)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d112      	bne.n	800aa2a <VL53L0X_UpdateByte+0x60>
	{
		buffer = (buffer & AndData) | OrData;
 800aa04:	7afa      	ldrb	r2, [r7, #11]
 800aa06:	78bb      	ldrb	r3, [r7, #2]
 800aa08:	4013      	ands	r3, r2
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	787b      	ldrb	r3, [r7, #1]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	72fb      	strb	r3, [r7, #11]
		status = VL53L0X_I2CWrite(Dev->I2cDevAddr, index, &buffer, (uint8_t)1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 015c 	ldrb.w	r0, [r3, #348]	; 0x15c
 800aa1a:	f107 020b 	add.w	r2, r7, #11
 800aa1e:	78f9      	ldrb	r1, [r7, #3]
 800aa20:	2301      	movs	r3, #1
 800aa22:	f000 f849 	bl	800aab8 <VL53L0X_I2CWrite>
 800aa26:	4603      	mov	r3, r0
 800aa28:	60fb      	str	r3, [r7, #12]
	}
	return status;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	b25b      	sxtb	r3, r3
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <VL53L0X_I2CRead>:


VL53L0X_Error VL53L0X_I2CRead(uint8_t DeviceAddr, uint8_t RegisterAddr, uint8_t* pBuffer, uint16_t NumByteToRead)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af02      	add	r7, sp, #8
 800aa3e:	603a      	str	r2, [r7, #0]
 800aa40:	461a      	mov	r2, r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	71fb      	strb	r3, [r7, #7]
 800aa46:	460b      	mov	r3, r1
 800aa48:	71bb      	strb	r3, [r7, #6]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80bb      	strh	r3, [r7, #4]
	/* Send register address */
	if (HAL_I2C_Master_Transmit(&hi2c1, DeviceAddr<<1, &RegisterAddr, 1, 1000) != HAL_OK)
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	b299      	uxth	r1, r3
 800aa56:	1dba      	adds	r2, r7, #6
 800aa58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	4813      	ldr	r0, [pc, #76]	; (800aab0 <VL53L0X_I2CRead+0x78>)
 800aa62:	f7f7 fb93 	bl	800218c <HAL_I2C_Master_Transmit>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <VL53L0X_I2CRead+0x3e>
	{
		{
			_Error_Handler(__FILE__, __LINE__);
 800aa6c:	f241 410a 	movw	r1, #5130	; 0x140a
 800aa70:	4810      	ldr	r0, [pc, #64]	; (800aab4 <VL53L0X_I2CRead+0x7c>)
 800aa72:	f7f5 ff49 	bl	8000908 <_Error_Handler>
		}
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(&hi2c1, ((DeviceAddr <<1) | 0x01), pBuffer, NumByteToRead, 1000) != HAL_OK)
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	b21b      	sxth	r3, r3
 800aa7c:	f043 0301 	orr.w	r3, r3, #1
 800aa80:	b21b      	sxth	r3, r3
 800aa82:	b299      	uxth	r1, r3
 800aa84:	88bb      	ldrh	r3, [r7, #4]
 800aa86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa8a:	9200      	str	r2, [sp, #0]
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	4808      	ldr	r0, [pc, #32]	; (800aab0 <VL53L0X_I2CRead+0x78>)
 800aa90:	f7f7 fc70 	bl	8002374 <HAL_I2C_Master_Receive>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <VL53L0X_I2CRead+0x6c>
	{
		_Error_Handler(__FILE__, __LINE__);
 800aa9a:	f241 4111 	movw	r1, #5137	; 0x1411
 800aa9e:	4805      	ldr	r0, [pc, #20]	; (800aab4 <VL53L0X_I2CRead+0x7c>)
 800aaa0:	f7f5 ff32 	bl	8000908 <_Error_Handler>
	}
	return 0;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20000348 	.word	0x20000348
 800aab4:	0800c490 	.word	0x0800c490

0800aab8 <VL53L0X_I2CWrite>:

VL53L0X_Error VL53L0X_I2CWrite(uint8_t DeviceAddr, uint8_t RegisterAddr, uint8_t* pBuffer, uint16_t NumByteToWrite)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	603a      	str	r2, [r7, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	71fb      	strb	r3, [r7, #7]
 800aac6:	460b      	mov	r3, r1
 800aac8:	71bb      	strb	r3, [r7, #6]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80bb      	strh	r3, [r7, #4]
	/* Try to transmit via I2C */
	if(HAL_I2C_Mem_Write(&hi2c1, DeviceAddr<<1, RegisterAddr, RegisterAddr>0xFF ? I2C_MEMADD_SIZE_16BIT : I2C_MEMADD_SIZE_8BIT, pBuffer, NumByteToWrite, 1000) != HAL_OK)
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	b299      	uxth	r1, r3
 800aad6:	79bb      	ldrb	r3, [r7, #6]
 800aad8:	b29a      	uxth	r2, r3
 800aada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	88bb      	ldrh	r3, [r7, #4]
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	2301      	movs	r3, #1
 800aaea:	4808      	ldr	r0, [pc, #32]	; (800ab0c <VL53L0X_I2CWrite+0x54>)
 800aaec:	f7f7 fd38 	bl	8002560 <HAL_I2C_Mem_Write>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d004      	beq.n	800ab00 <VL53L0X_I2CWrite+0x48>
	{
		_Error_Handler(__FILE__, __LINE__);
 800aaf6:	f241 411b 	movw	r1, #5147	; 0x141b
 800aafa:	4805      	ldr	r0, [pc, #20]	; (800ab10 <VL53L0X_I2CWrite+0x58>)
 800aafc:	f7f5 ff04 	bl	8000908 <_Error_Handler>
	}
	return 0;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000348 	.word	0x20000348
 800ab10:	0800c490 	.word	0x0800c490

0800ab14 <VL53L0X_ReadID>:


int VL53L0X_ReadID(VL53L0X_DEV Dev)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	int status = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]
	uint16_t rl_id=0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	817b      	strh	r3, [r7, #10]

	status = VL53L0X_RdWord(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &rl_id);
 800ab24:	f107 030a 	add.w	r3, r7, #10
 800ab28:	461a      	mov	r2, r3
 800ab2a:	21c0      	movs	r1, #192	; 0xc0
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff fefb 	bl	800a928 <VL53L0X_RdWord>
 800ab32:	4603      	mov	r3, r0
 800ab34:	60fb      	str	r3, [r7, #12]
	if (rl_id == 0xEEAA)
 800ab36:	897b      	ldrh	r3, [r7, #10]
 800ab38:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d101      	bne.n	800ab44 <VL53L0X_ReadID+0x30>
		return status;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	e001      	b.n	800ab48 <VL53L0X_ReadID+0x34>

	return -1;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <VL53L0X_WaitStopCompleted>:

	return Status;
}

VL53L0X_Error VL53L0X_WaitStopCompleted(VL53L0X_DEV Dev)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	75fb      	strb	r3, [r7, #23]
	uint32_t StopCompleted=0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]
	uint32_t LoopNb;

	// Wait until it finished
	// use timeout to avoid deadlock
	if (Status == VL53L0X_ERROR_NONE) {
 800ab60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d120      	bne.n	800abaa <VL53L0X_WaitStopCompleted+0x5a>
		LoopNb = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_GetStopCompletedStatus(Dev, &StopCompleted);
 800ab6c:	f107 030c 	add.w	r3, r7, #12
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fde2 	bl	800a73c <VL53L0X_GetStopCompletedStatus>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75fb      	strb	r3, [r7, #23]
			if ((StopCompleted == 0x00) || Status != VL53L0X_ERROR_NONE) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00d      	beq.n	800ab9e <VL53L0X_WaitStopCompleted+0x4e>
 800ab82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d109      	bne.n	800ab9e <VL53L0X_WaitStopCompleted+0x4e>
				break;
			}
			LoopNb = LoopNb + 1;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	613b      	str	r3, [r7, #16]
			VL53L0X_PollingDelay(Dev);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7fc fe86 	bl	80078a2 <VL53L0X_PollingDelay>
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ab9c:	d3e6      	bcc.n	800ab6c <VL53L0X_WaitStopCompleted+0x1c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800aba4:	d301      	bcc.n	800abaa <VL53L0X_WaitStopCompleted+0x5a>
			Status = VL53L0X_ERROR_TIME_OUT;
 800aba6:	23f9      	movs	r3, #249	; 0xf9
 800aba8:	75fb      	strb	r3, [r7, #23]
		}

	}

	return Status;
 800abaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <VL53L0X_IsPresent>:

int VL53L0X_IsPresent(VL53L0X_DEV Dev)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
	int status;

	status=VL53L0X_ReadID(Dev);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff ffa8 	bl	800ab14 <VL53L0X_ReadID>
 800abc4:	60f8      	str	r0, [r7, #12]
	return status;
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <VL53L0X_InitSensor>:

int VL53L0X_InitSensor(VL53L0X_DEV Dev, uint8_t NewAddr)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b09c      	sub	sp, #112	; 0x70
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
	int status;

	HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_RESET); //shut down the VL53L0X sensor.
 800abdc:	2200      	movs	r2, #0
 800abde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abe2:	482c      	ldr	r0, [pc, #176]	; (800ac94 <VL53L0X_InitSensor+0xc4>)
 800abe4:	f7f7 fa10 	bl	8002008 <HAL_GPIO_WritePin>
	HAL_Delay(100); //100
 800abe8:	2064      	movs	r0, #100	; 0x64
 800abea:	f7f6 ff59 	bl	8001aa0 <HAL_Delay>

	HAL_GPIO_WritePin(VL_XSHUT_GPIO_Port, VL_XSHUT_Pin, GPIO_PIN_SET); //start up the sensor.
 800abee:	2201      	movs	r2, #1
 800abf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abf4:	4827      	ldr	r0, [pc, #156]	; (800ac94 <VL53L0X_InitSensor+0xc4>)
 800abf6:	f7f7 fa07 	bl	8002008 <HAL_GPIO_WritePin>
	HAL_Delay(100);  //24
 800abfa:	2064      	movs	r0, #100	; 0x64
 800abfc:	f7f6 ff50 	bl	8001aa0 <HAL_Delay>

	status=VL53L0X_IsPresent(Dev);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff ffd8 	bl	800abb6 <VL53L0X_IsPresent>
 800ac06:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(!status)
 800ac08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d13d      	bne.n	800ac8a <VL53L0X_InitSensor+0xba>
	{
		VL53L0X_DataInit(Dev);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fc fbb4 	bl	800737c <VL53L0X_DataInit>
		if(status != VL53L0X_ERROR_NONE)
 800ac14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <VL53L0X_InitSensor+0x54>
		{
			printf("Failed to init VL53L0X sensor!\n\r");
 800ac1a:	481f      	ldr	r0, [pc, #124]	; (800ac98 <VL53L0X_InitSensor+0xc8>)
 800ac1c:	f000 f992 	bl	800af44 <iprintf>
			return status;
 800ac20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac22:	e033      	b.n	800ac8c <VL53L0X_InitSensor+0xbc>


		VL53L0X_DeviceInfo_t DeviceInfo;

		// deduce silicon version
		status = VL53L0X_GetDeviceInfo(Dev, &DeviceInfo);
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7fc fdc4 	bl	80077b8 <VL53L0X_GetDeviceInfo>
 800ac30:	4603      	mov	r3, r0
 800ac32:	66fb      	str	r3, [r7, #108]	; 0x6c
		if(status != VL53L0X_ERROR_NONE)
 800ac34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <VL53L0X_InitSensor+0x74>
		{
			printf("Failed to init VL53L0X sensor!\n\r");
 800ac3a:	4817      	ldr	r0, [pc, #92]	; (800ac98 <VL53L0X_InitSensor+0xc8>)
 800ac3c:	f000 f982 	bl	800af44 <iprintf>
			return status;
 800ac40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac42:	e023      	b.n	800ac8c <VL53L0X_InitSensor+0xbc>
		}

		status=VL53L0X_Prepare(Dev);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7fa fda8 	bl	800579a <VL53L0X_Prepare>
 800ac4a:	66f8      	str	r0, [r7, #108]	; 0x6c
		if(status != VL53L0X_ERROR_NONE)
 800ac4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d004      	beq.n	800ac5c <VL53L0X_InitSensor+0x8c>
		{
			printf("Failed to prepare VL53L0X!\n\r");
 800ac52:	4812      	ldr	r0, [pc, #72]	; (800ac9c <VL53L0X_InitSensor+0xcc>)
 800ac54:	f000 f976 	bl	800af44 <iprintf>
			return status;
 800ac58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5a:	e017      	b.n	800ac8c <VL53L0X_InitSensor+0xbc>
		}


		if(NewAddr!=VL53L0x_DEFAULT_DEVICE_ADDRESS)
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	2b52      	cmp	r3, #82	; 0x52
 800ac60:	d00d      	beq.n	800ac7e <VL53L0X_InitSensor+0xae>
		{
			status=SetDeviceAddress(Dev, NewAddr);
 800ac62:	78fb      	ldrb	r3, [r7, #3]
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7fa fdf8 	bl	800585c <SetDeviceAddress>
 800ac6c:	66f8      	str	r0, [r7, #108]	; 0x6c
			if(status)
 800ac6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <VL53L0X_InitSensor+0xba>
			{
				printf("Failed to change I2C address!\n\r");
 800ac74:	480a      	ldr	r0, [pc, #40]	; (800aca0 <VL53L0X_InitSensor+0xd0>)
 800ac76:	f000 f965 	bl	800af44 <iprintf>
				return status;
 800ac7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7c:	e006      	b.n	800ac8c <VL53L0X_InitSensor+0xbc>
			}
		}
		else
		{
			printf("Invalid new address!\n\r");
 800ac7e:	4809      	ldr	r0, [pc, #36]	; (800aca4 <VL53L0X_InitSensor+0xd4>)
 800ac80:	f000 f960 	bl	800af44 <iprintf>
			return VL53L0X_ERROR_INVALID_PARAMS;
 800ac84:	f06f 0303 	mvn.w	r3, #3
 800ac88:	e000      	b.n	800ac8c <VL53L0X_InitSensor+0xbc>
		}
	}
	return status;
 800ac8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3770      	adds	r7, #112	; 0x70
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	48000800 	.word	0x48000800
 800ac98:	0800c4b4 	.word	0x0800c4b4
 800ac9c:	0800c4d8 	.word	0x0800c4d8
 800aca0:	0800c4f8 	.word	0x0800c4f8
 800aca4:	0800c518 	.word	0x0800c518

0800aca8 <VL53L0X_StartMeasurementSimplified>:




int VL53L0X_StartMeasurementSimplified(VL53L0X_DEV Dev, OperatingMode operating_mode, void (*fptr)(void))
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	460b      	mov	r3, r1
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	72fb      	strb	r3, [r7, #11]
	UNUSED(fptr);
	int Status = VL53L0X_ERROR_NONE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t VhvSettings;
	uint8_t PhaseCal;
	// *** from mass market cube expansion v1.1, ranging with satellites.
	// default settings, for normal range.
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800acba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800acbe:	623b      	str	r3, [r7, #32]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800acc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800acc4:	61fb      	str	r3, [r7, #28]
	uint32_t timingBudget = 33000;
 800acc6:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800acca:	61bb      	str	r3, [r7, #24]
	uint8_t preRangeVcselPeriod = 14;
 800accc:	230e      	movs	r3, #14
 800acce:	75fb      	strb	r3, [r7, #23]
	uint8_t finalRangeVcselPeriod = 10;
 800acd0:	230a      	movs	r3, #10
 800acd2:	75bb      	strb	r3, [r7, #22]


	if (operating_mode == range_single_shot_polling)
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d169      	bne.n	800adae <VL53L0X_StartMeasurementSimplified+0x106>
	{
		// singelshot, polled ranging
		if(Status == VL53L0X_ERROR_NONE)
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d105      	bne.n	800acec <VL53L0X_StartMeasurementSimplified+0x44>
		{
			// no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
			Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800ace0:	2100      	movs	r1, #0
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7fd f98c 	bl	8008000 <VL53L0X_SetDeviceMode>
 800ace8:	4603      	mov	r3, r0
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
		}

		// Enable/Disable Sigma and Signal check
		if (Status == VL53L0X_ERROR_NONE) {
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <VL53L0X_StartMeasurementSimplified+0x58>
			Status = VL53L0X_SetLimitCheckEnable(Dev,
 800acf2:	2201      	movs	r2, #1
 800acf4:	2100      	movs	r1, #0
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff fad2 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 800acfc:	4603      	mov	r3, r0
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
		}
		if (Status == VL53L0X_ERROR_NONE) {
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <VL53L0X_StartMeasurementSimplified+0x6c>
			Status = VL53L0X_SetLimitCheckEnable(Dev,
 800ad06:	2201      	movs	r2, #1
 800ad08:	2101      	movs	r1, #1
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f7ff fac8 	bl	800a2a0 <VL53L0X_SetLimitCheckEnable>
 800ad10:	4603      	mov	r3, r0
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24

		/* Ranging configuration */
		//*
		//        switch(rangingConfig) {
		//        case LONG_RANGE:
		signalLimit = (FixPoint1616_t)(0.1*65536);
 800ad14:	f641 1399 	movw	r3, #6553	; 0x1999
 800ad18:	623b      	str	r3, [r7, #32]
		sigmaLimit = (FixPoint1616_t)(60*65536);
 800ad1a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800ad1e:	61fb      	str	r3, [r7, #28]
		timingBudget = 33000;
 800ad20:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800ad24:	61bb      	str	r3, [r7, #24]
		preRangeVcselPeriod = 18;
 800ad26:	2312      	movs	r3, #18
 800ad28:	75fb      	strb	r3, [r7, #23]
		finalRangeVcselPeriod = 14;
 800ad2a:	230e      	movs	r3, #14
 800ad2c:	75bb      	strb	r3, [r7, #22]
        default:
        	debug_printf("Not Supported");
        }
		 */

		if (Status == VL53L0X_ERROR_NONE) {
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <VL53L0X_StartMeasurementSimplified+0x9a>
			Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	2101      	movs	r1, #1
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f7fc fabd 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24
					VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <VL53L0X_StartMeasurementSimplified+0xae>
			Status = VL53L0X_SetLimitCheckValue(Dev,
 800ad48:	69fa      	ldr	r2, [r7, #28]
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7fc fab3 	bl	80072b8 <VL53L0X_SetLimitCheckValue>
 800ad52:	4603      	mov	r3, r0
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d105      	bne.n	800ad68 <VL53L0X_StartMeasurementSimplified+0xc0>
			Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, timingBudget);
 800ad5c:	69b9      	ldr	r1, [r7, #24]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7ff f9e9 	bl	800a136 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ad64:	4603      	mov	r3, r0
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d107      	bne.n	800ad7e <VL53L0X_StartMeasurementSimplified+0xd6>
			Status = VL53L0X_SetVcselPulsePeriod(Dev,
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	461a      	mov	r2, r3
 800ad72:	2100      	movs	r1, #0
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7fb ffa4 	bl	8006cc2 <VL53L0X_SetVcselPulsePeriod>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	627b      	str	r3, [r7, #36]	; 0x24
					VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d107      	bne.n	800ad94 <VL53L0X_StartMeasurementSimplified+0xec>
			Status = VL53L0X_SetVcselPulsePeriod(Dev,
 800ad84:	7dbb      	ldrb	r3, [r7, #22]
 800ad86:	461a      	mov	r2, r3
 800ad88:	2101      	movs	r1, #1
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7fb ff99 	bl	8006cc2 <VL53L0X_SetVcselPulsePeriod>
 800ad90:	4603      	mov	r3, r0
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <VL53L0X_StartMeasurementSimplified+0x106>
			Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800ad9a:	f107 0214 	add.w	r2, r7, #20
 800ad9e:	f107 0315 	add.w	r3, r7, #21
 800ada2:	4619      	mov	r1, r3
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f7fe fe42 	bl	8009a2e <VL53L0X_PerformRefCalibration>
 800adaa:	4603      	mov	r3, r0
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
		}

	}

	if (operating_mode == range_continuous_polling)
 800adae:	7afb      	ldrb	r3, [r7, #11]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d116      	bne.n	800ade2 <VL53L0X_StartMeasurementSimplified+0x13a>
	{
		if(Status == VL53L0X_ERROR_NONE)
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d108      	bne.n	800adcc <VL53L0X_StartMeasurementSimplified+0x124>
		{
			printf ("Call of VL53L0X_SetDeviceMode\n");
 800adba:	480c      	ldr	r0, [pc, #48]	; (800adec <VL53L0X_StartMeasurementSimplified+0x144>)
 800adbc:	f000 f948 	bl	800b050 <puts>
			Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING); // Setup in continuous ranging mode
 800adc0:	2101      	movs	r1, #1
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7fd f91c 	bl	8008000 <VL53L0X_SetDeviceMode>
 800adc8:	4603      	mov	r3, r0
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
		}

		if(Status == VL53L0X_ERROR_NONE)
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	d107      	bne.n	800ade2 <VL53L0X_StartMeasurementSimplified+0x13a>
		{
			printf ("Call of VL53L0X_StartMeasurement\n");
 800add2:	4807      	ldr	r0, [pc, #28]	; (800adf0 <VL53L0X_StartMeasurementSimplified+0x148>)
 800add4:	f000 f93c 	bl	800b050 <puts>
			Status = VL53L0X_StartMeasurement(Dev);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7fd fabb 	bl	8008354 <VL53L0X_StartMeasurement>
 800adde:	4603      	mov	r3, r0
 800ade0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}

	return Status;
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3728      	adds	r7, #40	; 0x28
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0800c530 	.word	0x0800c530
 800adf0:	0800c550 	.word	0x0800c550

0800adf4 <VL53L0X_GetMeasurementSimplified>:


int VL53L0X_GetMeasurementSimplified(VL53L0X_DEV Dev, OperatingMode operating_mode, VL53L0X_RangingMeasurementData_t *Data)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	460b      	mov	r3, r1
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	72fb      	strb	r3, [r7, #11]
	int Status = VL53L0X_ERROR_NONE;
 800ae02:	2300      	movs	r3, #0
 800ae04:	617b      	str	r3, [r7, #20]

	if (operating_mode == range_single_shot_polling)
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d105      	bne.n	800ae18 <VL53L0X_GetMeasurementSimplified+0x24>
	{
		Status = VL53L0X_PerformSingleRangingMeasurement(Dev, Data);
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f7fe fac2 	bl	8009398 <VL53L0X_PerformSingleRangingMeasurement>
 800ae14:	4603      	mov	r3, r0
 800ae16:	617b      	str	r3, [r7, #20]
	}

	if (operating_mode == range_continuous_polling)
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d117      	bne.n	800ae4e <VL53L0X_GetMeasurementSimplified+0x5a>
	{
		if (Status == VL53L0X_ERROR_NONE)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <VL53L0X_GetMeasurementSimplified+0x3a>
			Status = VL53L0X_measurement_poll_for_completion(Dev);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7fc fd4b 	bl	80078c0 <VL53L0X_measurement_poll_for_completion>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	617b      	str	r3, [r7, #20]

		if(Status == VL53L0X_ERROR_NONE)
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10c      	bne.n	800ae4e <VL53L0X_GetMeasurementSimplified+0x5a>
		{
			Status = VL53L0X_GetRangingMeasurementData(Dev, Data);
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7fe f98a 	bl	8009150 <VL53L0X_GetRangingMeasurementData>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	617b      	str	r3, [r7, #20]

			// Clear the interrupt
			VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 800ae40:	2104      	movs	r1, #4
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7fc fd6c 	bl	8007920 <VL53L0X_ClearInterruptMask>
			VL53L0X_PollingDelay(Dev);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7fc fd2a 	bl	80078a2 <VL53L0X_PollingDelay>
		}
	}


	return Status;
 800ae4e:	697b      	ldr	r3, [r7, #20]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <VL53L0X_StopMeasurementSimplified>:


int VL53L0X_StopMeasurementSimplified(VL53L0X_DEV Dev, OperatingMode operating_mode)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
	int status = VL53L0X_ERROR_NONE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]
	// don't need to stop for a singleshot range!
	if (operating_mode==range_single_shot_polling)
	{
	}

	if (operating_mode==range_continuous_interrupt || operating_mode==range_continuous_polling)
 800ae68:	78fb      	ldrb	r3, [r7, #3]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d002      	beq.n	800ae74 <VL53L0X_StopMeasurementSimplified+0x1c>
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d11e      	bne.n	800aeb2 <VL53L0X_StopMeasurementSimplified+0x5a>
	{
		// continuous mode
		if(status == VL53L0X_ERROR_NONE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d107      	bne.n	800ae8a <VL53L0X_StopMeasurementSimplified+0x32>
		{
			printf ("Call of VL53L0X_StopMeasurement\n");
 800ae7a:	4810      	ldr	r0, [pc, #64]	; (800aebc <VL53L0X_StopMeasurementSimplified+0x64>)
 800ae7c:	f000 f8e8 	bl	800b050 <puts>
			status = VL53L0X_StopMeasurement(Dev);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fc13 	bl	800a6ac <VL53L0X_StopMeasurement>
 800ae86:	4603      	mov	r3, r0
 800ae88:	60fb      	str	r3, [r7, #12]
		}

		if(status == VL53L0X_ERROR_NONE)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d107      	bne.n	800aea0 <VL53L0X_StopMeasurementSimplified+0x48>
		{
			printf ("Wait Stop to be competed\n");
 800ae90:	480b      	ldr	r0, [pc, #44]	; (800aec0 <VL53L0X_StopMeasurementSimplified+0x68>)
 800ae92:	f000 f8dd 	bl	800b050 <puts>
			status = VL53L0X_WaitStopCompleted(Dev);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fe5a 	bl	800ab50 <VL53L0X_WaitStopCompleted>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	60fb      	str	r3, [r7, #12]
		}

		if(status == VL53L0X_ERROR_NONE)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d105      	bne.n	800aeb2 <VL53L0X_StopMeasurementSimplified+0x5a>
			status = VL53L0X_ClearInterruptMask(Dev,
 800aea6:	2104      	movs	r1, #4
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7fc fd39 	bl	8007920 <VL53L0X_ClearInterruptMask>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	60fb      	str	r3, [r7, #12]
					VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
	}

	return status;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	0800c574 	.word	0x0800c574
 800aec0:	0800c594 	.word	0x0800c594

0800aec4 <__errno>:
 800aec4:	4b01      	ldr	r3, [pc, #4]	; (800aecc <__errno+0x8>)
 800aec6:	6818      	ldr	r0, [r3, #0]
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200002c8 	.word	0x200002c8

0800aed0 <__libc_init_array>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	4d0d      	ldr	r5, [pc, #52]	; (800af08 <__libc_init_array+0x38>)
 800aed4:	4c0d      	ldr	r4, [pc, #52]	; (800af0c <__libc_init_array+0x3c>)
 800aed6:	1b64      	subs	r4, r4, r5
 800aed8:	10a4      	asrs	r4, r4, #2
 800aeda:	2600      	movs	r6, #0
 800aedc:	42a6      	cmp	r6, r4
 800aede:	d109      	bne.n	800aef4 <__libc_init_array+0x24>
 800aee0:	4d0b      	ldr	r5, [pc, #44]	; (800af10 <__libc_init_array+0x40>)
 800aee2:	4c0c      	ldr	r4, [pc, #48]	; (800af14 <__libc_init_array+0x44>)
 800aee4:	f001 fa08 	bl	800c2f8 <_init>
 800aee8:	1b64      	subs	r4, r4, r5
 800aeea:	10a4      	asrs	r4, r4, #2
 800aeec:	2600      	movs	r6, #0
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	d105      	bne.n	800aefe <__libc_init_array+0x2e>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef8:	4798      	blx	r3
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7ee      	b.n	800aedc <__libc_init_array+0xc>
 800aefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800af02:	4798      	blx	r3
 800af04:	3601      	adds	r6, #1
 800af06:	e7f2      	b.n	800aeee <__libc_init_array+0x1e>
 800af08:	0800c6ac 	.word	0x0800c6ac
 800af0c:	0800c6ac 	.word	0x0800c6ac
 800af10:	0800c6ac 	.word	0x0800c6ac
 800af14:	0800c6b0 	.word	0x0800c6b0

0800af18 <memcpy>:
 800af18:	440a      	add	r2, r1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af20:	d100      	bne.n	800af24 <memcpy+0xc>
 800af22:	4770      	bx	lr
 800af24:	b510      	push	{r4, lr}
 800af26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af2e:	4291      	cmp	r1, r2
 800af30:	d1f9      	bne.n	800af26 <memcpy+0xe>
 800af32:	bd10      	pop	{r4, pc}

0800af34 <memset>:
 800af34:	4402      	add	r2, r0
 800af36:	4603      	mov	r3, r0
 800af38:	4293      	cmp	r3, r2
 800af3a:	d100      	bne.n	800af3e <memset+0xa>
 800af3c:	4770      	bx	lr
 800af3e:	f803 1b01 	strb.w	r1, [r3], #1
 800af42:	e7f9      	b.n	800af38 <memset+0x4>

0800af44 <iprintf>:
 800af44:	b40f      	push	{r0, r1, r2, r3}
 800af46:	4b0a      	ldr	r3, [pc, #40]	; (800af70 <iprintf+0x2c>)
 800af48:	b513      	push	{r0, r1, r4, lr}
 800af4a:	681c      	ldr	r4, [r3, #0]
 800af4c:	b124      	cbz	r4, 800af58 <iprintf+0x14>
 800af4e:	69a3      	ldr	r3, [r4, #24]
 800af50:	b913      	cbnz	r3, 800af58 <iprintf+0x14>
 800af52:	4620      	mov	r0, r4
 800af54:	f000 fa86 	bl	800b464 <__sinit>
 800af58:	ab05      	add	r3, sp, #20
 800af5a:	9a04      	ldr	r2, [sp, #16]
 800af5c:	68a1      	ldr	r1, [r4, #8]
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fdeb 	bl	800bb3c <_vfiprintf_r>
 800af66:	b002      	add	sp, #8
 800af68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af6c:	b004      	add	sp, #16
 800af6e:	4770      	bx	lr
 800af70:	200002c8 	.word	0x200002c8

0800af74 <_puts_r>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	460e      	mov	r6, r1
 800af78:	4605      	mov	r5, r0
 800af7a:	b118      	cbz	r0, 800af84 <_puts_r+0x10>
 800af7c:	6983      	ldr	r3, [r0, #24]
 800af7e:	b90b      	cbnz	r3, 800af84 <_puts_r+0x10>
 800af80:	f000 fa70 	bl	800b464 <__sinit>
 800af84:	69ab      	ldr	r3, [r5, #24]
 800af86:	68ac      	ldr	r4, [r5, #8]
 800af88:	b913      	cbnz	r3, 800af90 <_puts_r+0x1c>
 800af8a:	4628      	mov	r0, r5
 800af8c:	f000 fa6a 	bl	800b464 <__sinit>
 800af90:	4b2c      	ldr	r3, [pc, #176]	; (800b044 <_puts_r+0xd0>)
 800af92:	429c      	cmp	r4, r3
 800af94:	d120      	bne.n	800afd8 <_puts_r+0x64>
 800af96:	686c      	ldr	r4, [r5, #4]
 800af98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af9a:	07db      	lsls	r3, r3, #31
 800af9c:	d405      	bmi.n	800afaa <_puts_r+0x36>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	0598      	lsls	r0, r3, #22
 800afa2:	d402      	bmi.n	800afaa <_puts_r+0x36>
 800afa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afa6:	f000 fafb 	bl	800b5a0 <__retarget_lock_acquire_recursive>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	0719      	lsls	r1, r3, #28
 800afae:	d51d      	bpl.n	800afec <_puts_r+0x78>
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	b1db      	cbz	r3, 800afec <_puts_r+0x78>
 800afb4:	3e01      	subs	r6, #1
 800afb6:	68a3      	ldr	r3, [r4, #8]
 800afb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	bb39      	cbnz	r1, 800b012 <_puts_r+0x9e>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	da38      	bge.n	800b038 <_puts_r+0xc4>
 800afc6:	4622      	mov	r2, r4
 800afc8:	210a      	movs	r1, #10
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 f870 	bl	800b0b0 <__swbuf_r>
 800afd0:	3001      	adds	r0, #1
 800afd2:	d011      	beq.n	800aff8 <_puts_r+0x84>
 800afd4:	250a      	movs	r5, #10
 800afd6:	e011      	b.n	800affc <_puts_r+0x88>
 800afd8:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <_puts_r+0xd4>)
 800afda:	429c      	cmp	r4, r3
 800afdc:	d101      	bne.n	800afe2 <_puts_r+0x6e>
 800afde:	68ac      	ldr	r4, [r5, #8]
 800afe0:	e7da      	b.n	800af98 <_puts_r+0x24>
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <_puts_r+0xd8>)
 800afe4:	429c      	cmp	r4, r3
 800afe6:	bf08      	it	eq
 800afe8:	68ec      	ldreq	r4, [r5, #12]
 800afea:	e7d5      	b.n	800af98 <_puts_r+0x24>
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 f8b0 	bl	800b154 <__swsetup_r>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d0dd      	beq.n	800afb4 <_puts_r+0x40>
 800aff8:	f04f 35ff 	mov.w	r5, #4294967295
 800affc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800affe:	07da      	lsls	r2, r3, #31
 800b000:	d405      	bmi.n	800b00e <_puts_r+0x9a>
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	059b      	lsls	r3, r3, #22
 800b006:	d402      	bmi.n	800b00e <_puts_r+0x9a>
 800b008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b00a:	f000 faca 	bl	800b5a2 <__retarget_lock_release_recursive>
 800b00e:	4628      	mov	r0, r5
 800b010:	bd70      	pop	{r4, r5, r6, pc}
 800b012:	2b00      	cmp	r3, #0
 800b014:	da04      	bge.n	800b020 <_puts_r+0xac>
 800b016:	69a2      	ldr	r2, [r4, #24]
 800b018:	429a      	cmp	r2, r3
 800b01a:	dc06      	bgt.n	800b02a <_puts_r+0xb6>
 800b01c:	290a      	cmp	r1, #10
 800b01e:	d004      	beq.n	800b02a <_puts_r+0xb6>
 800b020:	6823      	ldr	r3, [r4, #0]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	6022      	str	r2, [r4, #0]
 800b026:	7019      	strb	r1, [r3, #0]
 800b028:	e7c5      	b.n	800afb6 <_puts_r+0x42>
 800b02a:	4622      	mov	r2, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 f83f 	bl	800b0b0 <__swbuf_r>
 800b032:	3001      	adds	r0, #1
 800b034:	d1bf      	bne.n	800afb6 <_puts_r+0x42>
 800b036:	e7df      	b.n	800aff8 <_puts_r+0x84>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	250a      	movs	r5, #10
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	6022      	str	r2, [r4, #0]
 800b040:	701d      	strb	r5, [r3, #0]
 800b042:	e7db      	b.n	800affc <_puts_r+0x88>
 800b044:	0800c630 	.word	0x0800c630
 800b048:	0800c650 	.word	0x0800c650
 800b04c:	0800c610 	.word	0x0800c610

0800b050 <puts>:
 800b050:	4b02      	ldr	r3, [pc, #8]	; (800b05c <puts+0xc>)
 800b052:	4601      	mov	r1, r0
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f7ff bf8d 	b.w	800af74 <_puts_r>
 800b05a:	bf00      	nop
 800b05c:	200002c8 	.word	0x200002c8

0800b060 <siprintf>:
 800b060:	b40e      	push	{r1, r2, r3}
 800b062:	b500      	push	{lr}
 800b064:	b09c      	sub	sp, #112	; 0x70
 800b066:	ab1d      	add	r3, sp, #116	; 0x74
 800b068:	9002      	str	r0, [sp, #8]
 800b06a:	9006      	str	r0, [sp, #24]
 800b06c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b070:	4809      	ldr	r0, [pc, #36]	; (800b098 <siprintf+0x38>)
 800b072:	9107      	str	r1, [sp, #28]
 800b074:	9104      	str	r1, [sp, #16]
 800b076:	4909      	ldr	r1, [pc, #36]	; (800b09c <siprintf+0x3c>)
 800b078:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07c:	9105      	str	r1, [sp, #20]
 800b07e:	6800      	ldr	r0, [r0, #0]
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	a902      	add	r1, sp, #8
 800b084:	f000 fc30 	bl	800b8e8 <_svfiprintf_r>
 800b088:	9b02      	ldr	r3, [sp, #8]
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	b01c      	add	sp, #112	; 0x70
 800b090:	f85d eb04 	ldr.w	lr, [sp], #4
 800b094:	b003      	add	sp, #12
 800b096:	4770      	bx	lr
 800b098:	200002c8 	.word	0x200002c8
 800b09c:	ffff0208 	.word	0xffff0208

0800b0a0 <strcpy>:
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a6:	f803 2b01 	strb.w	r2, [r3], #1
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	d1f9      	bne.n	800b0a2 <strcpy+0x2>
 800b0ae:	4770      	bx	lr

0800b0b0 <__swbuf_r>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	b118      	cbz	r0, 800b0c2 <__swbuf_r+0x12>
 800b0ba:	6983      	ldr	r3, [r0, #24]
 800b0bc:	b90b      	cbnz	r3, 800b0c2 <__swbuf_r+0x12>
 800b0be:	f000 f9d1 	bl	800b464 <__sinit>
 800b0c2:	4b21      	ldr	r3, [pc, #132]	; (800b148 <__swbuf_r+0x98>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	d12b      	bne.n	800b120 <__swbuf_r+0x70>
 800b0c8:	686c      	ldr	r4, [r5, #4]
 800b0ca:	69a3      	ldr	r3, [r4, #24]
 800b0cc:	60a3      	str	r3, [r4, #8]
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	071a      	lsls	r2, r3, #28
 800b0d2:	d52f      	bpl.n	800b134 <__swbuf_r+0x84>
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	b36b      	cbz	r3, 800b134 <__swbuf_r+0x84>
 800b0d8:	6923      	ldr	r3, [r4, #16]
 800b0da:	6820      	ldr	r0, [r4, #0]
 800b0dc:	1ac0      	subs	r0, r0, r3
 800b0de:	6963      	ldr	r3, [r4, #20]
 800b0e0:	b2f6      	uxtb	r6, r6
 800b0e2:	4283      	cmp	r3, r0
 800b0e4:	4637      	mov	r7, r6
 800b0e6:	dc04      	bgt.n	800b0f2 <__swbuf_r+0x42>
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 f926 	bl	800b33c <_fflush_r>
 800b0f0:	bb30      	cbnz	r0, 800b140 <__swbuf_r+0x90>
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	60a3      	str	r3, [r4, #8]
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	6022      	str	r2, [r4, #0]
 800b0fe:	701e      	strb	r6, [r3, #0]
 800b100:	6963      	ldr	r3, [r4, #20]
 800b102:	3001      	adds	r0, #1
 800b104:	4283      	cmp	r3, r0
 800b106:	d004      	beq.n	800b112 <__swbuf_r+0x62>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	07db      	lsls	r3, r3, #31
 800b10c:	d506      	bpl.n	800b11c <__swbuf_r+0x6c>
 800b10e:	2e0a      	cmp	r6, #10
 800b110:	d104      	bne.n	800b11c <__swbuf_r+0x6c>
 800b112:	4621      	mov	r1, r4
 800b114:	4628      	mov	r0, r5
 800b116:	f000 f911 	bl	800b33c <_fflush_r>
 800b11a:	b988      	cbnz	r0, 800b140 <__swbuf_r+0x90>
 800b11c:	4638      	mov	r0, r7
 800b11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b120:	4b0a      	ldr	r3, [pc, #40]	; (800b14c <__swbuf_r+0x9c>)
 800b122:	429c      	cmp	r4, r3
 800b124:	d101      	bne.n	800b12a <__swbuf_r+0x7a>
 800b126:	68ac      	ldr	r4, [r5, #8]
 800b128:	e7cf      	b.n	800b0ca <__swbuf_r+0x1a>
 800b12a:	4b09      	ldr	r3, [pc, #36]	; (800b150 <__swbuf_r+0xa0>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	bf08      	it	eq
 800b130:	68ec      	ldreq	r4, [r5, #12]
 800b132:	e7ca      	b.n	800b0ca <__swbuf_r+0x1a>
 800b134:	4621      	mov	r1, r4
 800b136:	4628      	mov	r0, r5
 800b138:	f000 f80c 	bl	800b154 <__swsetup_r>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d0cb      	beq.n	800b0d8 <__swbuf_r+0x28>
 800b140:	f04f 37ff 	mov.w	r7, #4294967295
 800b144:	e7ea      	b.n	800b11c <__swbuf_r+0x6c>
 800b146:	bf00      	nop
 800b148:	0800c630 	.word	0x0800c630
 800b14c:	0800c650 	.word	0x0800c650
 800b150:	0800c610 	.word	0x0800c610

0800b154 <__swsetup_r>:
 800b154:	4b32      	ldr	r3, [pc, #200]	; (800b220 <__swsetup_r+0xcc>)
 800b156:	b570      	push	{r4, r5, r6, lr}
 800b158:	681d      	ldr	r5, [r3, #0]
 800b15a:	4606      	mov	r6, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	b125      	cbz	r5, 800b16a <__swsetup_r+0x16>
 800b160:	69ab      	ldr	r3, [r5, #24]
 800b162:	b913      	cbnz	r3, 800b16a <__swsetup_r+0x16>
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f97d 	bl	800b464 <__sinit>
 800b16a:	4b2e      	ldr	r3, [pc, #184]	; (800b224 <__swsetup_r+0xd0>)
 800b16c:	429c      	cmp	r4, r3
 800b16e:	d10f      	bne.n	800b190 <__swsetup_r+0x3c>
 800b170:	686c      	ldr	r4, [r5, #4]
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	0719      	lsls	r1, r3, #28
 800b17a:	d42c      	bmi.n	800b1d6 <__swsetup_r+0x82>
 800b17c:	06dd      	lsls	r5, r3, #27
 800b17e:	d411      	bmi.n	800b1a4 <__swsetup_r+0x50>
 800b180:	2309      	movs	r3, #9
 800b182:	6033      	str	r3, [r6, #0]
 800b184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	f04f 30ff 	mov.w	r0, #4294967295
 800b18e:	e03e      	b.n	800b20e <__swsetup_r+0xba>
 800b190:	4b25      	ldr	r3, [pc, #148]	; (800b228 <__swsetup_r+0xd4>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d101      	bne.n	800b19a <__swsetup_r+0x46>
 800b196:	68ac      	ldr	r4, [r5, #8]
 800b198:	e7eb      	b.n	800b172 <__swsetup_r+0x1e>
 800b19a:	4b24      	ldr	r3, [pc, #144]	; (800b22c <__swsetup_r+0xd8>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	bf08      	it	eq
 800b1a0:	68ec      	ldreq	r4, [r5, #12]
 800b1a2:	e7e6      	b.n	800b172 <__swsetup_r+0x1e>
 800b1a4:	0758      	lsls	r0, r3, #29
 800b1a6:	d512      	bpl.n	800b1ce <__swsetup_r+0x7a>
 800b1a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1aa:	b141      	cbz	r1, 800b1be <__swsetup_r+0x6a>
 800b1ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b0:	4299      	cmp	r1, r3
 800b1b2:	d002      	beq.n	800b1ba <__swsetup_r+0x66>
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	f000 fa5b 	bl	800b670 <_free_r>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6063      	str	r3, [r4, #4]
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f043 0308 	orr.w	r3, r3, #8
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	b94b      	cbnz	r3, 800b1ee <__swsetup_r+0x9a>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e4:	d003      	beq.n	800b1ee <__swsetup_r+0x9a>
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 fa01 	bl	800b5f0 <__smakebuf_r>
 800b1ee:	89a0      	ldrh	r0, [r4, #12]
 800b1f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1f4:	f010 0301 	ands.w	r3, r0, #1
 800b1f8:	d00a      	beq.n	800b210 <__swsetup_r+0xbc>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	6963      	ldr	r3, [r4, #20]
 800b200:	425b      	negs	r3, r3
 800b202:	61a3      	str	r3, [r4, #24]
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b943      	cbnz	r3, 800b21a <__swsetup_r+0xc6>
 800b208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b20c:	d1ba      	bne.n	800b184 <__swsetup_r+0x30>
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	0781      	lsls	r1, r0, #30
 800b212:	bf58      	it	pl
 800b214:	6963      	ldrpl	r3, [r4, #20]
 800b216:	60a3      	str	r3, [r4, #8]
 800b218:	e7f4      	b.n	800b204 <__swsetup_r+0xb0>
 800b21a:	2000      	movs	r0, #0
 800b21c:	e7f7      	b.n	800b20e <__swsetup_r+0xba>
 800b21e:	bf00      	nop
 800b220:	200002c8 	.word	0x200002c8
 800b224:	0800c630 	.word	0x0800c630
 800b228:	0800c650 	.word	0x0800c650
 800b22c:	0800c610 	.word	0x0800c610

0800b230 <__sflush_r>:
 800b230:	898a      	ldrh	r2, [r1, #12]
 800b232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b236:	4605      	mov	r5, r0
 800b238:	0710      	lsls	r0, r2, #28
 800b23a:	460c      	mov	r4, r1
 800b23c:	d458      	bmi.n	800b2f0 <__sflush_r+0xc0>
 800b23e:	684b      	ldr	r3, [r1, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc05      	bgt.n	800b250 <__sflush_r+0x20>
 800b244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc02      	bgt.n	800b250 <__sflush_r+0x20>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b252:	2e00      	cmp	r6, #0
 800b254:	d0f9      	beq.n	800b24a <__sflush_r+0x1a>
 800b256:	2300      	movs	r3, #0
 800b258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b25c:	682f      	ldr	r7, [r5, #0]
 800b25e:	602b      	str	r3, [r5, #0]
 800b260:	d032      	beq.n	800b2c8 <__sflush_r+0x98>
 800b262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	075a      	lsls	r2, r3, #29
 800b268:	d505      	bpl.n	800b276 <__sflush_r+0x46>
 800b26a:	6863      	ldr	r3, [r4, #4]
 800b26c:	1ac0      	subs	r0, r0, r3
 800b26e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b270:	b10b      	cbz	r3, 800b276 <__sflush_r+0x46>
 800b272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b274:	1ac0      	subs	r0, r0, r3
 800b276:	2300      	movs	r3, #0
 800b278:	4602      	mov	r2, r0
 800b27a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b27c:	6a21      	ldr	r1, [r4, #32]
 800b27e:	4628      	mov	r0, r5
 800b280:	47b0      	blx	r6
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	d106      	bne.n	800b296 <__sflush_r+0x66>
 800b288:	6829      	ldr	r1, [r5, #0]
 800b28a:	291d      	cmp	r1, #29
 800b28c:	d82c      	bhi.n	800b2e8 <__sflush_r+0xb8>
 800b28e:	4a2a      	ldr	r2, [pc, #168]	; (800b338 <__sflush_r+0x108>)
 800b290:	40ca      	lsrs	r2, r1
 800b292:	07d6      	lsls	r6, r2, #31
 800b294:	d528      	bpl.n	800b2e8 <__sflush_r+0xb8>
 800b296:	2200      	movs	r2, #0
 800b298:	6062      	str	r2, [r4, #4]
 800b29a:	04d9      	lsls	r1, r3, #19
 800b29c:	6922      	ldr	r2, [r4, #16]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	d504      	bpl.n	800b2ac <__sflush_r+0x7c>
 800b2a2:	1c42      	adds	r2, r0, #1
 800b2a4:	d101      	bne.n	800b2aa <__sflush_r+0x7a>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	b903      	cbnz	r3, 800b2ac <__sflush_r+0x7c>
 800b2aa:	6560      	str	r0, [r4, #84]	; 0x54
 800b2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ae:	602f      	str	r7, [r5, #0]
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	d0ca      	beq.n	800b24a <__sflush_r+0x1a>
 800b2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d002      	beq.n	800b2c2 <__sflush_r+0x92>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f9d7 	bl	800b670 <_free_r>
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800b2c6:	e7c1      	b.n	800b24c <__sflush_r+0x1c>
 800b2c8:	6a21      	ldr	r1, [r4, #32]
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b0      	blx	r6
 800b2d0:	1c41      	adds	r1, r0, #1
 800b2d2:	d1c7      	bne.n	800b264 <__sflush_r+0x34>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c4      	beq.n	800b264 <__sflush_r+0x34>
 800b2da:	2b1d      	cmp	r3, #29
 800b2dc:	d001      	beq.n	800b2e2 <__sflush_r+0xb2>
 800b2de:	2b16      	cmp	r3, #22
 800b2e0:	d101      	bne.n	800b2e6 <__sflush_r+0xb6>
 800b2e2:	602f      	str	r7, [r5, #0]
 800b2e4:	e7b1      	b.n	800b24a <__sflush_r+0x1a>
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ec:	81a3      	strh	r3, [r4, #12]
 800b2ee:	e7ad      	b.n	800b24c <__sflush_r+0x1c>
 800b2f0:	690f      	ldr	r7, [r1, #16]
 800b2f2:	2f00      	cmp	r7, #0
 800b2f4:	d0a9      	beq.n	800b24a <__sflush_r+0x1a>
 800b2f6:	0793      	lsls	r3, r2, #30
 800b2f8:	680e      	ldr	r6, [r1, #0]
 800b2fa:	bf08      	it	eq
 800b2fc:	694b      	ldreq	r3, [r1, #20]
 800b2fe:	600f      	str	r7, [r1, #0]
 800b300:	bf18      	it	ne
 800b302:	2300      	movne	r3, #0
 800b304:	eba6 0807 	sub.w	r8, r6, r7
 800b308:	608b      	str	r3, [r1, #8]
 800b30a:	f1b8 0f00 	cmp.w	r8, #0
 800b30e:	dd9c      	ble.n	800b24a <__sflush_r+0x1a>
 800b310:	6a21      	ldr	r1, [r4, #32]
 800b312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b314:	4643      	mov	r3, r8
 800b316:	463a      	mov	r2, r7
 800b318:	4628      	mov	r0, r5
 800b31a:	47b0      	blx	r6
 800b31c:	2800      	cmp	r0, #0
 800b31e:	dc06      	bgt.n	800b32e <__sflush_r+0xfe>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b326:	81a3      	strh	r3, [r4, #12]
 800b328:	f04f 30ff 	mov.w	r0, #4294967295
 800b32c:	e78e      	b.n	800b24c <__sflush_r+0x1c>
 800b32e:	4407      	add	r7, r0
 800b330:	eba8 0800 	sub.w	r8, r8, r0
 800b334:	e7e9      	b.n	800b30a <__sflush_r+0xda>
 800b336:	bf00      	nop
 800b338:	20400001 	.word	0x20400001

0800b33c <_fflush_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b913      	cbnz	r3, 800b34c <_fflush_r+0x10>
 800b346:	2500      	movs	r5, #0
 800b348:	4628      	mov	r0, r5
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	b118      	cbz	r0, 800b356 <_fflush_r+0x1a>
 800b34e:	6983      	ldr	r3, [r0, #24]
 800b350:	b90b      	cbnz	r3, 800b356 <_fflush_r+0x1a>
 800b352:	f000 f887 	bl	800b464 <__sinit>
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <_fflush_r+0x6c>)
 800b358:	429c      	cmp	r4, r3
 800b35a:	d11b      	bne.n	800b394 <_fflush_r+0x58>
 800b35c:	686c      	ldr	r4, [r5, #4]
 800b35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0ef      	beq.n	800b346 <_fflush_r+0xa>
 800b366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b368:	07d0      	lsls	r0, r2, #31
 800b36a:	d404      	bmi.n	800b376 <_fflush_r+0x3a>
 800b36c:	0599      	lsls	r1, r3, #22
 800b36e:	d402      	bmi.n	800b376 <_fflush_r+0x3a>
 800b370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b372:	f000 f915 	bl	800b5a0 <__retarget_lock_acquire_recursive>
 800b376:	4628      	mov	r0, r5
 800b378:	4621      	mov	r1, r4
 800b37a:	f7ff ff59 	bl	800b230 <__sflush_r>
 800b37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b380:	07da      	lsls	r2, r3, #31
 800b382:	4605      	mov	r5, r0
 800b384:	d4e0      	bmi.n	800b348 <_fflush_r+0xc>
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	059b      	lsls	r3, r3, #22
 800b38a:	d4dd      	bmi.n	800b348 <_fflush_r+0xc>
 800b38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38e:	f000 f908 	bl	800b5a2 <__retarget_lock_release_recursive>
 800b392:	e7d9      	b.n	800b348 <_fflush_r+0xc>
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <_fflush_r+0x70>)
 800b396:	429c      	cmp	r4, r3
 800b398:	d101      	bne.n	800b39e <_fflush_r+0x62>
 800b39a:	68ac      	ldr	r4, [r5, #8]
 800b39c:	e7df      	b.n	800b35e <_fflush_r+0x22>
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <_fflush_r+0x74>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	bf08      	it	eq
 800b3a4:	68ec      	ldreq	r4, [r5, #12]
 800b3a6:	e7da      	b.n	800b35e <_fflush_r+0x22>
 800b3a8:	0800c630 	.word	0x0800c630
 800b3ac:	0800c650 	.word	0x0800c650
 800b3b0:	0800c610 	.word	0x0800c610

0800b3b4 <std>:
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	b510      	push	{r4, lr}
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800b3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3c2:	6083      	str	r3, [r0, #8]
 800b3c4:	8181      	strh	r1, [r0, #12]
 800b3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c8:	81c2      	strh	r2, [r0, #14]
 800b3ca:	6183      	str	r3, [r0, #24]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	305c      	adds	r0, #92	; 0x5c
 800b3d2:	f7ff fdaf 	bl	800af34 <memset>
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <std+0x38>)
 800b3d8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <std+0x3c>)
 800b3dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3de:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <std+0x40>)
 800b3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3e2:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <std+0x44>)
 800b3e4:	6224      	str	r4, [r4, #32]
 800b3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	bf00      	nop
 800b3ec:	0800c0e5 	.word	0x0800c0e5
 800b3f0:	0800c107 	.word	0x0800c107
 800b3f4:	0800c13f 	.word	0x0800c13f
 800b3f8:	0800c163 	.word	0x0800c163

0800b3fc <_cleanup_r>:
 800b3fc:	4901      	ldr	r1, [pc, #4]	; (800b404 <_cleanup_r+0x8>)
 800b3fe:	f000 b8af 	b.w	800b560 <_fwalk_reent>
 800b402:	bf00      	nop
 800b404:	0800b33d 	.word	0x0800b33d

0800b408 <__sfmoreglue>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	2268      	movs	r2, #104	; 0x68
 800b40c:	1e4d      	subs	r5, r1, #1
 800b40e:	4355      	muls	r5, r2
 800b410:	460e      	mov	r6, r1
 800b412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b416:	f000 f997 	bl	800b748 <_malloc_r>
 800b41a:	4604      	mov	r4, r0
 800b41c:	b140      	cbz	r0, 800b430 <__sfmoreglue+0x28>
 800b41e:	2100      	movs	r1, #0
 800b420:	e9c0 1600 	strd	r1, r6, [r0]
 800b424:	300c      	adds	r0, #12
 800b426:	60a0      	str	r0, [r4, #8]
 800b428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b42c:	f7ff fd82 	bl	800af34 <memset>
 800b430:	4620      	mov	r0, r4
 800b432:	bd70      	pop	{r4, r5, r6, pc}

0800b434 <__sfp_lock_acquire>:
 800b434:	4801      	ldr	r0, [pc, #4]	; (800b43c <__sfp_lock_acquire+0x8>)
 800b436:	f000 b8b3 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b43a:	bf00      	nop
 800b43c:	20000619 	.word	0x20000619

0800b440 <__sfp_lock_release>:
 800b440:	4801      	ldr	r0, [pc, #4]	; (800b448 <__sfp_lock_release+0x8>)
 800b442:	f000 b8ae 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b446:	bf00      	nop
 800b448:	20000619 	.word	0x20000619

0800b44c <__sinit_lock_acquire>:
 800b44c:	4801      	ldr	r0, [pc, #4]	; (800b454 <__sinit_lock_acquire+0x8>)
 800b44e:	f000 b8a7 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b452:	bf00      	nop
 800b454:	2000061a 	.word	0x2000061a

0800b458 <__sinit_lock_release>:
 800b458:	4801      	ldr	r0, [pc, #4]	; (800b460 <__sinit_lock_release+0x8>)
 800b45a:	f000 b8a2 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b45e:	bf00      	nop
 800b460:	2000061a 	.word	0x2000061a

0800b464 <__sinit>:
 800b464:	b510      	push	{r4, lr}
 800b466:	4604      	mov	r4, r0
 800b468:	f7ff fff0 	bl	800b44c <__sinit_lock_acquire>
 800b46c:	69a3      	ldr	r3, [r4, #24]
 800b46e:	b11b      	cbz	r3, 800b478 <__sinit+0x14>
 800b470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b474:	f7ff bff0 	b.w	800b458 <__sinit_lock_release>
 800b478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b47c:	6523      	str	r3, [r4, #80]	; 0x50
 800b47e:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <__sinit+0x68>)
 800b480:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <__sinit+0x6c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	62a2      	str	r2, [r4, #40]	; 0x28
 800b486:	42a3      	cmp	r3, r4
 800b488:	bf04      	itt	eq
 800b48a:	2301      	moveq	r3, #1
 800b48c:	61a3      	streq	r3, [r4, #24]
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 f820 	bl	800b4d4 <__sfp>
 800b494:	6060      	str	r0, [r4, #4]
 800b496:	4620      	mov	r0, r4
 800b498:	f000 f81c 	bl	800b4d4 <__sfp>
 800b49c:	60a0      	str	r0, [r4, #8]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 f818 	bl	800b4d4 <__sfp>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	60e0      	str	r0, [r4, #12]
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	6860      	ldr	r0, [r4, #4]
 800b4ac:	f7ff ff82 	bl	800b3b4 <std>
 800b4b0:	68a0      	ldr	r0, [r4, #8]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	2109      	movs	r1, #9
 800b4b6:	f7ff ff7d 	bl	800b3b4 <std>
 800b4ba:	68e0      	ldr	r0, [r4, #12]
 800b4bc:	2202      	movs	r2, #2
 800b4be:	2112      	movs	r1, #18
 800b4c0:	f7ff ff78 	bl	800b3b4 <std>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	61a3      	str	r3, [r4, #24]
 800b4c8:	e7d2      	b.n	800b470 <__sinit+0xc>
 800b4ca:	bf00      	nop
 800b4cc:	0800c60c 	.word	0x0800c60c
 800b4d0:	0800b3fd 	.word	0x0800b3fd

0800b4d4 <__sfp>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	4607      	mov	r7, r0
 800b4d8:	f7ff ffac 	bl	800b434 <__sfp_lock_acquire>
 800b4dc:	4b1e      	ldr	r3, [pc, #120]	; (800b558 <__sfp+0x84>)
 800b4de:	681e      	ldr	r6, [r3, #0]
 800b4e0:	69b3      	ldr	r3, [r6, #24]
 800b4e2:	b913      	cbnz	r3, 800b4ea <__sfp+0x16>
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff ffbd 	bl	800b464 <__sinit>
 800b4ea:	3648      	adds	r6, #72	; 0x48
 800b4ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	d503      	bpl.n	800b4fc <__sfp+0x28>
 800b4f4:	6833      	ldr	r3, [r6, #0]
 800b4f6:	b30b      	cbz	r3, 800b53c <__sfp+0x68>
 800b4f8:	6836      	ldr	r6, [r6, #0]
 800b4fa:	e7f7      	b.n	800b4ec <__sfp+0x18>
 800b4fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b500:	b9d5      	cbnz	r5, 800b538 <__sfp+0x64>
 800b502:	4b16      	ldr	r3, [pc, #88]	; (800b55c <__sfp+0x88>)
 800b504:	60e3      	str	r3, [r4, #12]
 800b506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b50a:	6665      	str	r5, [r4, #100]	; 0x64
 800b50c:	f000 f847 	bl	800b59e <__retarget_lock_init_recursive>
 800b510:	f7ff ff96 	bl	800b440 <__sfp_lock_release>
 800b514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b51c:	6025      	str	r5, [r4, #0]
 800b51e:	61a5      	str	r5, [r4, #24]
 800b520:	2208      	movs	r2, #8
 800b522:	4629      	mov	r1, r5
 800b524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b528:	f7ff fd04 	bl	800af34 <memset>
 800b52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b534:	4620      	mov	r0, r4
 800b536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b538:	3468      	adds	r4, #104	; 0x68
 800b53a:	e7d9      	b.n	800b4f0 <__sfp+0x1c>
 800b53c:	2104      	movs	r1, #4
 800b53e:	4638      	mov	r0, r7
 800b540:	f7ff ff62 	bl	800b408 <__sfmoreglue>
 800b544:	4604      	mov	r4, r0
 800b546:	6030      	str	r0, [r6, #0]
 800b548:	2800      	cmp	r0, #0
 800b54a:	d1d5      	bne.n	800b4f8 <__sfp+0x24>
 800b54c:	f7ff ff78 	bl	800b440 <__sfp_lock_release>
 800b550:	230c      	movs	r3, #12
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	e7ee      	b.n	800b534 <__sfp+0x60>
 800b556:	bf00      	nop
 800b558:	0800c60c 	.word	0x0800c60c
 800b55c:	ffff0001 	.word	0xffff0001

0800b560 <_fwalk_reent>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	4606      	mov	r6, r0
 800b566:	4688      	mov	r8, r1
 800b568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b56c:	2700      	movs	r7, #0
 800b56e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b572:	f1b9 0901 	subs.w	r9, r9, #1
 800b576:	d505      	bpl.n	800b584 <_fwalk_reent+0x24>
 800b578:	6824      	ldr	r4, [r4, #0]
 800b57a:	2c00      	cmp	r4, #0
 800b57c:	d1f7      	bne.n	800b56e <_fwalk_reent+0xe>
 800b57e:	4638      	mov	r0, r7
 800b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b584:	89ab      	ldrh	r3, [r5, #12]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d907      	bls.n	800b59a <_fwalk_reent+0x3a>
 800b58a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b58e:	3301      	adds	r3, #1
 800b590:	d003      	beq.n	800b59a <_fwalk_reent+0x3a>
 800b592:	4629      	mov	r1, r5
 800b594:	4630      	mov	r0, r6
 800b596:	47c0      	blx	r8
 800b598:	4307      	orrs	r7, r0
 800b59a:	3568      	adds	r5, #104	; 0x68
 800b59c:	e7e9      	b.n	800b572 <_fwalk_reent+0x12>

0800b59e <__retarget_lock_init_recursive>:
 800b59e:	4770      	bx	lr

0800b5a0 <__retarget_lock_acquire_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <__retarget_lock_release_recursive>:
 800b5a2:	4770      	bx	lr

0800b5a4 <__swhatbuf_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	460e      	mov	r6, r1
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	b096      	sub	sp, #88	; 0x58
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	da08      	bge.n	800b5c8 <__swhatbuf_r+0x24>
 800b5b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	602a      	str	r2, [r5, #0]
 800b5be:	061a      	lsls	r2, r3, #24
 800b5c0:	d410      	bmi.n	800b5e4 <__swhatbuf_r+0x40>
 800b5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c6:	e00e      	b.n	800b5e6 <__swhatbuf_r+0x42>
 800b5c8:	466a      	mov	r2, sp
 800b5ca:	f000 fdf1 	bl	800c1b0 <_fstat_r>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	dbf1      	blt.n	800b5b6 <__swhatbuf_r+0x12>
 800b5d2:	9a01      	ldr	r2, [sp, #4]
 800b5d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5dc:	425a      	negs	r2, r3
 800b5de:	415a      	adcs	r2, r3
 800b5e0:	602a      	str	r2, [r5, #0]
 800b5e2:	e7ee      	b.n	800b5c2 <__swhatbuf_r+0x1e>
 800b5e4:	2340      	movs	r3, #64	; 0x40
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	b016      	add	sp, #88	; 0x58
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b5f0 <__smakebuf_r>:
 800b5f0:	898b      	ldrh	r3, [r1, #12]
 800b5f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5f4:	079d      	lsls	r5, r3, #30
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	d507      	bpl.n	800b60c <__smakebuf_r+0x1c>
 800b5fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	6123      	str	r3, [r4, #16]
 800b604:	2301      	movs	r3, #1
 800b606:	6163      	str	r3, [r4, #20]
 800b608:	b002      	add	sp, #8
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	ab01      	add	r3, sp, #4
 800b60e:	466a      	mov	r2, sp
 800b610:	f7ff ffc8 	bl	800b5a4 <__swhatbuf_r>
 800b614:	9900      	ldr	r1, [sp, #0]
 800b616:	4605      	mov	r5, r0
 800b618:	4630      	mov	r0, r6
 800b61a:	f000 f895 	bl	800b748 <_malloc_r>
 800b61e:	b948      	cbnz	r0, 800b634 <__smakebuf_r+0x44>
 800b620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b624:	059a      	lsls	r2, r3, #22
 800b626:	d4ef      	bmi.n	800b608 <__smakebuf_r+0x18>
 800b628:	f023 0303 	bic.w	r3, r3, #3
 800b62c:	f043 0302 	orr.w	r3, r3, #2
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	e7e3      	b.n	800b5fc <__smakebuf_r+0xc>
 800b634:	4b0d      	ldr	r3, [pc, #52]	; (800b66c <__smakebuf_r+0x7c>)
 800b636:	62b3      	str	r3, [r6, #40]	; 0x28
 800b638:	89a3      	ldrh	r3, [r4, #12]
 800b63a:	6020      	str	r0, [r4, #0]
 800b63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b640:	81a3      	strh	r3, [r4, #12]
 800b642:	9b00      	ldr	r3, [sp, #0]
 800b644:	6163      	str	r3, [r4, #20]
 800b646:	9b01      	ldr	r3, [sp, #4]
 800b648:	6120      	str	r0, [r4, #16]
 800b64a:	b15b      	cbz	r3, 800b664 <__smakebuf_r+0x74>
 800b64c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b650:	4630      	mov	r0, r6
 800b652:	f000 fdbf 	bl	800c1d4 <_isatty_r>
 800b656:	b128      	cbz	r0, 800b664 <__smakebuf_r+0x74>
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	f023 0303 	bic.w	r3, r3, #3
 800b65e:	f043 0301 	orr.w	r3, r3, #1
 800b662:	81a3      	strh	r3, [r4, #12]
 800b664:	89a0      	ldrh	r0, [r4, #12]
 800b666:	4305      	orrs	r5, r0
 800b668:	81a5      	strh	r5, [r4, #12]
 800b66a:	e7cd      	b.n	800b608 <__smakebuf_r+0x18>
 800b66c:	0800b3fd 	.word	0x0800b3fd

0800b670 <_free_r>:
 800b670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b672:	2900      	cmp	r1, #0
 800b674:	d044      	beq.n	800b700 <_free_r+0x90>
 800b676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b67a:	9001      	str	r0, [sp, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f1a1 0404 	sub.w	r4, r1, #4
 800b682:	bfb8      	it	lt
 800b684:	18e4      	addlt	r4, r4, r3
 800b686:	f000 fde1 	bl	800c24c <__malloc_lock>
 800b68a:	4a1e      	ldr	r2, [pc, #120]	; (800b704 <_free_r+0x94>)
 800b68c:	9801      	ldr	r0, [sp, #4]
 800b68e:	6813      	ldr	r3, [r2, #0]
 800b690:	b933      	cbnz	r3, 800b6a0 <_free_r+0x30>
 800b692:	6063      	str	r3, [r4, #4]
 800b694:	6014      	str	r4, [r2, #0]
 800b696:	b003      	add	sp, #12
 800b698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b69c:	f000 bddc 	b.w	800c258 <__malloc_unlock>
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d908      	bls.n	800b6b6 <_free_r+0x46>
 800b6a4:	6825      	ldr	r5, [r4, #0]
 800b6a6:	1961      	adds	r1, r4, r5
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	bf01      	itttt	eq
 800b6ac:	6819      	ldreq	r1, [r3, #0]
 800b6ae:	685b      	ldreq	r3, [r3, #4]
 800b6b0:	1949      	addeq	r1, r1, r5
 800b6b2:	6021      	streq	r1, [r4, #0]
 800b6b4:	e7ed      	b.n	800b692 <_free_r+0x22>
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	b10b      	cbz	r3, 800b6c0 <_free_r+0x50>
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	d9fa      	bls.n	800b6b6 <_free_r+0x46>
 800b6c0:	6811      	ldr	r1, [r2, #0]
 800b6c2:	1855      	adds	r5, r2, r1
 800b6c4:	42a5      	cmp	r5, r4
 800b6c6:	d10b      	bne.n	800b6e0 <_free_r+0x70>
 800b6c8:	6824      	ldr	r4, [r4, #0]
 800b6ca:	4421      	add	r1, r4
 800b6cc:	1854      	adds	r4, r2, r1
 800b6ce:	42a3      	cmp	r3, r4
 800b6d0:	6011      	str	r1, [r2, #0]
 800b6d2:	d1e0      	bne.n	800b696 <_free_r+0x26>
 800b6d4:	681c      	ldr	r4, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	6053      	str	r3, [r2, #4]
 800b6da:	4421      	add	r1, r4
 800b6dc:	6011      	str	r1, [r2, #0]
 800b6de:	e7da      	b.n	800b696 <_free_r+0x26>
 800b6e0:	d902      	bls.n	800b6e8 <_free_r+0x78>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	e7d6      	b.n	800b696 <_free_r+0x26>
 800b6e8:	6825      	ldr	r5, [r4, #0]
 800b6ea:	1961      	adds	r1, r4, r5
 800b6ec:	428b      	cmp	r3, r1
 800b6ee:	bf04      	itt	eq
 800b6f0:	6819      	ldreq	r1, [r3, #0]
 800b6f2:	685b      	ldreq	r3, [r3, #4]
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	bf04      	itt	eq
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	6054      	str	r4, [r2, #4]
 800b6fe:	e7ca      	b.n	800b696 <_free_r+0x26>
 800b700:	b003      	add	sp, #12
 800b702:	bd30      	pop	{r4, r5, pc}
 800b704:	2000061c 	.word	0x2000061c

0800b708 <sbrk_aligned>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4e0e      	ldr	r6, [pc, #56]	; (800b744 <sbrk_aligned+0x3c>)
 800b70c:	460c      	mov	r4, r1
 800b70e:	6831      	ldr	r1, [r6, #0]
 800b710:	4605      	mov	r5, r0
 800b712:	b911      	cbnz	r1, 800b71a <sbrk_aligned+0x12>
 800b714:	f000 fcd6 	bl	800c0c4 <_sbrk_r>
 800b718:	6030      	str	r0, [r6, #0]
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 fcd1 	bl	800c0c4 <_sbrk_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d00a      	beq.n	800b73c <sbrk_aligned+0x34>
 800b726:	1cc4      	adds	r4, r0, #3
 800b728:	f024 0403 	bic.w	r4, r4, #3
 800b72c:	42a0      	cmp	r0, r4
 800b72e:	d007      	beq.n	800b740 <sbrk_aligned+0x38>
 800b730:	1a21      	subs	r1, r4, r0
 800b732:	4628      	mov	r0, r5
 800b734:	f000 fcc6 	bl	800c0c4 <_sbrk_r>
 800b738:	3001      	adds	r0, #1
 800b73a:	d101      	bne.n	800b740 <sbrk_aligned+0x38>
 800b73c:	f04f 34ff 	mov.w	r4, #4294967295
 800b740:	4620      	mov	r0, r4
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	20000620 	.word	0x20000620

0800b748 <_malloc_r>:
 800b748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74c:	1ccd      	adds	r5, r1, #3
 800b74e:	f025 0503 	bic.w	r5, r5, #3
 800b752:	3508      	adds	r5, #8
 800b754:	2d0c      	cmp	r5, #12
 800b756:	bf38      	it	cc
 800b758:	250c      	movcc	r5, #12
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	4607      	mov	r7, r0
 800b75e:	db01      	blt.n	800b764 <_malloc_r+0x1c>
 800b760:	42a9      	cmp	r1, r5
 800b762:	d905      	bls.n	800b770 <_malloc_r+0x28>
 800b764:	230c      	movs	r3, #12
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	2600      	movs	r6, #0
 800b76a:	4630      	mov	r0, r6
 800b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b770:	4e2e      	ldr	r6, [pc, #184]	; (800b82c <_malloc_r+0xe4>)
 800b772:	f000 fd6b 	bl	800c24c <__malloc_lock>
 800b776:	6833      	ldr	r3, [r6, #0]
 800b778:	461c      	mov	r4, r3
 800b77a:	bb34      	cbnz	r4, 800b7ca <_malloc_r+0x82>
 800b77c:	4629      	mov	r1, r5
 800b77e:	4638      	mov	r0, r7
 800b780:	f7ff ffc2 	bl	800b708 <sbrk_aligned>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	4604      	mov	r4, r0
 800b788:	d14d      	bne.n	800b826 <_malloc_r+0xde>
 800b78a:	6834      	ldr	r4, [r6, #0]
 800b78c:	4626      	mov	r6, r4
 800b78e:	2e00      	cmp	r6, #0
 800b790:	d140      	bne.n	800b814 <_malloc_r+0xcc>
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	4631      	mov	r1, r6
 800b796:	4638      	mov	r0, r7
 800b798:	eb04 0803 	add.w	r8, r4, r3
 800b79c:	f000 fc92 	bl	800c0c4 <_sbrk_r>
 800b7a0:	4580      	cmp	r8, r0
 800b7a2:	d13a      	bne.n	800b81a <_malloc_r+0xd2>
 800b7a4:	6821      	ldr	r1, [r4, #0]
 800b7a6:	3503      	adds	r5, #3
 800b7a8:	1a6d      	subs	r5, r5, r1
 800b7aa:	f025 0503 	bic.w	r5, r5, #3
 800b7ae:	3508      	adds	r5, #8
 800b7b0:	2d0c      	cmp	r5, #12
 800b7b2:	bf38      	it	cc
 800b7b4:	250c      	movcc	r5, #12
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7ff ffa5 	bl	800b708 <sbrk_aligned>
 800b7be:	3001      	adds	r0, #1
 800b7c0:	d02b      	beq.n	800b81a <_malloc_r+0xd2>
 800b7c2:	6823      	ldr	r3, [r4, #0]
 800b7c4:	442b      	add	r3, r5
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	e00e      	b.n	800b7e8 <_malloc_r+0xa0>
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	1b52      	subs	r2, r2, r5
 800b7ce:	d41e      	bmi.n	800b80e <_malloc_r+0xc6>
 800b7d0:	2a0b      	cmp	r2, #11
 800b7d2:	d916      	bls.n	800b802 <_malloc_r+0xba>
 800b7d4:	1961      	adds	r1, r4, r5
 800b7d6:	42a3      	cmp	r3, r4
 800b7d8:	6025      	str	r5, [r4, #0]
 800b7da:	bf18      	it	ne
 800b7dc:	6059      	strne	r1, [r3, #4]
 800b7de:	6863      	ldr	r3, [r4, #4]
 800b7e0:	bf08      	it	eq
 800b7e2:	6031      	streq	r1, [r6, #0]
 800b7e4:	5162      	str	r2, [r4, r5]
 800b7e6:	604b      	str	r3, [r1, #4]
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	f104 060b 	add.w	r6, r4, #11
 800b7ee:	f000 fd33 	bl	800c258 <__malloc_unlock>
 800b7f2:	f026 0607 	bic.w	r6, r6, #7
 800b7f6:	1d23      	adds	r3, r4, #4
 800b7f8:	1af2      	subs	r2, r6, r3
 800b7fa:	d0b6      	beq.n	800b76a <_malloc_r+0x22>
 800b7fc:	1b9b      	subs	r3, r3, r6
 800b7fe:	50a3      	str	r3, [r4, r2]
 800b800:	e7b3      	b.n	800b76a <_malloc_r+0x22>
 800b802:	6862      	ldr	r2, [r4, #4]
 800b804:	42a3      	cmp	r3, r4
 800b806:	bf0c      	ite	eq
 800b808:	6032      	streq	r2, [r6, #0]
 800b80a:	605a      	strne	r2, [r3, #4]
 800b80c:	e7ec      	b.n	800b7e8 <_malloc_r+0xa0>
 800b80e:	4623      	mov	r3, r4
 800b810:	6864      	ldr	r4, [r4, #4]
 800b812:	e7b2      	b.n	800b77a <_malloc_r+0x32>
 800b814:	4634      	mov	r4, r6
 800b816:	6876      	ldr	r6, [r6, #4]
 800b818:	e7b9      	b.n	800b78e <_malloc_r+0x46>
 800b81a:	230c      	movs	r3, #12
 800b81c:	603b      	str	r3, [r7, #0]
 800b81e:	4638      	mov	r0, r7
 800b820:	f000 fd1a 	bl	800c258 <__malloc_unlock>
 800b824:	e7a1      	b.n	800b76a <_malloc_r+0x22>
 800b826:	6025      	str	r5, [r4, #0]
 800b828:	e7de      	b.n	800b7e8 <_malloc_r+0xa0>
 800b82a:	bf00      	nop
 800b82c:	2000061c 	.word	0x2000061c

0800b830 <__ssputs_r>:
 800b830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b834:	688e      	ldr	r6, [r1, #8]
 800b836:	429e      	cmp	r6, r3
 800b838:	4682      	mov	sl, r0
 800b83a:	460c      	mov	r4, r1
 800b83c:	4690      	mov	r8, r2
 800b83e:	461f      	mov	r7, r3
 800b840:	d838      	bhi.n	800b8b4 <__ssputs_r+0x84>
 800b842:	898a      	ldrh	r2, [r1, #12]
 800b844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b848:	d032      	beq.n	800b8b0 <__ssputs_r+0x80>
 800b84a:	6825      	ldr	r5, [r4, #0]
 800b84c:	6909      	ldr	r1, [r1, #16]
 800b84e:	eba5 0901 	sub.w	r9, r5, r1
 800b852:	6965      	ldr	r5, [r4, #20]
 800b854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b85c:	3301      	adds	r3, #1
 800b85e:	444b      	add	r3, r9
 800b860:	106d      	asrs	r5, r5, #1
 800b862:	429d      	cmp	r5, r3
 800b864:	bf38      	it	cc
 800b866:	461d      	movcc	r5, r3
 800b868:	0553      	lsls	r3, r2, #21
 800b86a:	d531      	bpl.n	800b8d0 <__ssputs_r+0xa0>
 800b86c:	4629      	mov	r1, r5
 800b86e:	f7ff ff6b 	bl	800b748 <_malloc_r>
 800b872:	4606      	mov	r6, r0
 800b874:	b950      	cbnz	r0, 800b88c <__ssputs_r+0x5c>
 800b876:	230c      	movs	r3, #12
 800b878:	f8ca 3000 	str.w	r3, [sl]
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b882:	81a3      	strh	r3, [r4, #12]
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88c:	6921      	ldr	r1, [r4, #16]
 800b88e:	464a      	mov	r2, r9
 800b890:	f7ff fb42 	bl	800af18 <memcpy>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	6126      	str	r6, [r4, #16]
 800b8a2:	6165      	str	r5, [r4, #20]
 800b8a4:	444e      	add	r6, r9
 800b8a6:	eba5 0509 	sub.w	r5, r5, r9
 800b8aa:	6026      	str	r6, [r4, #0]
 800b8ac:	60a5      	str	r5, [r4, #8]
 800b8ae:	463e      	mov	r6, r7
 800b8b0:	42be      	cmp	r6, r7
 800b8b2:	d900      	bls.n	800b8b6 <__ssputs_r+0x86>
 800b8b4:	463e      	mov	r6, r7
 800b8b6:	6820      	ldr	r0, [r4, #0]
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	4641      	mov	r1, r8
 800b8bc:	f000 fcac 	bl	800c218 <memmove>
 800b8c0:	68a3      	ldr	r3, [r4, #8]
 800b8c2:	1b9b      	subs	r3, r3, r6
 800b8c4:	60a3      	str	r3, [r4, #8]
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	4433      	add	r3, r6
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	e7db      	b.n	800b888 <__ssputs_r+0x58>
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	f000 fcc7 	bl	800c264 <_realloc_r>
 800b8d6:	4606      	mov	r6, r0
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d1e1      	bne.n	800b8a0 <__ssputs_r+0x70>
 800b8dc:	6921      	ldr	r1, [r4, #16]
 800b8de:	4650      	mov	r0, sl
 800b8e0:	f7ff fec6 	bl	800b670 <_free_r>
 800b8e4:	e7c7      	b.n	800b876 <__ssputs_r+0x46>
	...

0800b8e8 <_svfiprintf_r>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	4698      	mov	r8, r3
 800b8ee:	898b      	ldrh	r3, [r1, #12]
 800b8f0:	061b      	lsls	r3, r3, #24
 800b8f2:	b09d      	sub	sp, #116	; 0x74
 800b8f4:	4607      	mov	r7, r0
 800b8f6:	460d      	mov	r5, r1
 800b8f8:	4614      	mov	r4, r2
 800b8fa:	d50e      	bpl.n	800b91a <_svfiprintf_r+0x32>
 800b8fc:	690b      	ldr	r3, [r1, #16]
 800b8fe:	b963      	cbnz	r3, 800b91a <_svfiprintf_r+0x32>
 800b900:	2140      	movs	r1, #64	; 0x40
 800b902:	f7ff ff21 	bl	800b748 <_malloc_r>
 800b906:	6028      	str	r0, [r5, #0]
 800b908:	6128      	str	r0, [r5, #16]
 800b90a:	b920      	cbnz	r0, 800b916 <_svfiprintf_r+0x2e>
 800b90c:	230c      	movs	r3, #12
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	e0d1      	b.n	800baba <_svfiprintf_r+0x1d2>
 800b916:	2340      	movs	r3, #64	; 0x40
 800b918:	616b      	str	r3, [r5, #20]
 800b91a:	2300      	movs	r3, #0
 800b91c:	9309      	str	r3, [sp, #36]	; 0x24
 800b91e:	2320      	movs	r3, #32
 800b920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b924:	f8cd 800c 	str.w	r8, [sp, #12]
 800b928:	2330      	movs	r3, #48	; 0x30
 800b92a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bad4 <_svfiprintf_r+0x1ec>
 800b92e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b932:	f04f 0901 	mov.w	r9, #1
 800b936:	4623      	mov	r3, r4
 800b938:	469a      	mov	sl, r3
 800b93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b93e:	b10a      	cbz	r2, 800b944 <_svfiprintf_r+0x5c>
 800b940:	2a25      	cmp	r2, #37	; 0x25
 800b942:	d1f9      	bne.n	800b938 <_svfiprintf_r+0x50>
 800b944:	ebba 0b04 	subs.w	fp, sl, r4
 800b948:	d00b      	beq.n	800b962 <_svfiprintf_r+0x7a>
 800b94a:	465b      	mov	r3, fp
 800b94c:	4622      	mov	r2, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	4638      	mov	r0, r7
 800b952:	f7ff ff6d 	bl	800b830 <__ssputs_r>
 800b956:	3001      	adds	r0, #1
 800b958:	f000 80aa 	beq.w	800bab0 <_svfiprintf_r+0x1c8>
 800b95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b95e:	445a      	add	r2, fp
 800b960:	9209      	str	r2, [sp, #36]	; 0x24
 800b962:	f89a 3000 	ldrb.w	r3, [sl]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f000 80a2 	beq.w	800bab0 <_svfiprintf_r+0x1c8>
 800b96c:	2300      	movs	r3, #0
 800b96e:	f04f 32ff 	mov.w	r2, #4294967295
 800b972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b976:	f10a 0a01 	add.w	sl, sl, #1
 800b97a:	9304      	str	r3, [sp, #16]
 800b97c:	9307      	str	r3, [sp, #28]
 800b97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b982:	931a      	str	r3, [sp, #104]	; 0x68
 800b984:	4654      	mov	r4, sl
 800b986:	2205      	movs	r2, #5
 800b988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98c:	4851      	ldr	r0, [pc, #324]	; (800bad4 <_svfiprintf_r+0x1ec>)
 800b98e:	f7f4 fc27 	bl	80001e0 <memchr>
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	b9d8      	cbnz	r0, 800b9ce <_svfiprintf_r+0xe6>
 800b996:	06d0      	lsls	r0, r2, #27
 800b998:	bf44      	itt	mi
 800b99a:	2320      	movmi	r3, #32
 800b99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a0:	0711      	lsls	r1, r2, #28
 800b9a2:	bf44      	itt	mi
 800b9a4:	232b      	movmi	r3, #43	; 0x2b
 800b9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b0:	d015      	beq.n	800b9de <_svfiprintf_r+0xf6>
 800b9b2:	9a07      	ldr	r2, [sp, #28]
 800b9b4:	4654      	mov	r4, sl
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	f04f 0c0a 	mov.w	ip, #10
 800b9bc:	4621      	mov	r1, r4
 800b9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c2:	3b30      	subs	r3, #48	; 0x30
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	d94e      	bls.n	800ba66 <_svfiprintf_r+0x17e>
 800b9c8:	b1b0      	cbz	r0, 800b9f8 <_svfiprintf_r+0x110>
 800b9ca:	9207      	str	r2, [sp, #28]
 800b9cc:	e014      	b.n	800b9f8 <_svfiprintf_r+0x110>
 800b9ce:	eba0 0308 	sub.w	r3, r0, r8
 800b9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	46a2      	mov	sl, r4
 800b9dc:	e7d2      	b.n	800b984 <_svfiprintf_r+0x9c>
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	1d19      	adds	r1, r3, #4
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	9103      	str	r1, [sp, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bfbb      	ittet	lt
 800b9ea:	425b      	neglt	r3, r3
 800b9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f0:	9307      	strge	r3, [sp, #28]
 800b9f2:	9307      	strlt	r3, [sp, #28]
 800b9f4:	bfb8      	it	lt
 800b9f6:	9204      	strlt	r2, [sp, #16]
 800b9f8:	7823      	ldrb	r3, [r4, #0]
 800b9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b9fc:	d10c      	bne.n	800ba18 <_svfiprintf_r+0x130>
 800b9fe:	7863      	ldrb	r3, [r4, #1]
 800ba00:	2b2a      	cmp	r3, #42	; 0x2a
 800ba02:	d135      	bne.n	800ba70 <_svfiprintf_r+0x188>
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	1d1a      	adds	r2, r3, #4
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	9203      	str	r2, [sp, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfb8      	it	lt
 800ba10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba14:	3402      	adds	r4, #2
 800ba16:	9305      	str	r3, [sp, #20]
 800ba18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bae4 <_svfiprintf_r+0x1fc>
 800ba1c:	7821      	ldrb	r1, [r4, #0]
 800ba1e:	2203      	movs	r2, #3
 800ba20:	4650      	mov	r0, sl
 800ba22:	f7f4 fbdd 	bl	80001e0 <memchr>
 800ba26:	b140      	cbz	r0, 800ba3a <_svfiprintf_r+0x152>
 800ba28:	2340      	movs	r3, #64	; 0x40
 800ba2a:	eba0 000a 	sub.w	r0, r0, sl
 800ba2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ba32:	9b04      	ldr	r3, [sp, #16]
 800ba34:	4303      	orrs	r3, r0
 800ba36:	3401      	adds	r4, #1
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba3e:	4826      	ldr	r0, [pc, #152]	; (800bad8 <_svfiprintf_r+0x1f0>)
 800ba40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba44:	2206      	movs	r2, #6
 800ba46:	f7f4 fbcb 	bl	80001e0 <memchr>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d038      	beq.n	800bac0 <_svfiprintf_r+0x1d8>
 800ba4e:	4b23      	ldr	r3, [pc, #140]	; (800badc <_svfiprintf_r+0x1f4>)
 800ba50:	bb1b      	cbnz	r3, 800ba9a <_svfiprintf_r+0x1b2>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	3307      	adds	r3, #7
 800ba56:	f023 0307 	bic.w	r3, r3, #7
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba60:	4433      	add	r3, r6
 800ba62:	9309      	str	r3, [sp, #36]	; 0x24
 800ba64:	e767      	b.n	800b936 <_svfiprintf_r+0x4e>
 800ba66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	e7a5      	b.n	800b9bc <_svfiprintf_r+0xd4>
 800ba70:	2300      	movs	r3, #0
 800ba72:	3401      	adds	r4, #1
 800ba74:	9305      	str	r3, [sp, #20]
 800ba76:	4619      	mov	r1, r3
 800ba78:	f04f 0c0a 	mov.w	ip, #10
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba82:	3a30      	subs	r2, #48	; 0x30
 800ba84:	2a09      	cmp	r2, #9
 800ba86:	d903      	bls.n	800ba90 <_svfiprintf_r+0x1a8>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0c5      	beq.n	800ba18 <_svfiprintf_r+0x130>
 800ba8c:	9105      	str	r1, [sp, #20]
 800ba8e:	e7c3      	b.n	800ba18 <_svfiprintf_r+0x130>
 800ba90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba94:	4604      	mov	r4, r0
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7f0      	b.n	800ba7c <_svfiprintf_r+0x194>
 800ba9a:	ab03      	add	r3, sp, #12
 800ba9c:	9300      	str	r3, [sp, #0]
 800ba9e:	462a      	mov	r2, r5
 800baa0:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <_svfiprintf_r+0x1f8>)
 800baa2:	a904      	add	r1, sp, #16
 800baa4:	4638      	mov	r0, r7
 800baa6:	f3af 8000 	nop.w
 800baaa:	1c42      	adds	r2, r0, #1
 800baac:	4606      	mov	r6, r0
 800baae:	d1d6      	bne.n	800ba5e <_svfiprintf_r+0x176>
 800bab0:	89ab      	ldrh	r3, [r5, #12]
 800bab2:	065b      	lsls	r3, r3, #25
 800bab4:	f53f af2c 	bmi.w	800b910 <_svfiprintf_r+0x28>
 800bab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baba:	b01d      	add	sp, #116	; 0x74
 800babc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac0:	ab03      	add	r3, sp, #12
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	462a      	mov	r2, r5
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <_svfiprintf_r+0x1f8>)
 800bac8:	a904      	add	r1, sp, #16
 800baca:	4638      	mov	r0, r7
 800bacc:	f000 f9d4 	bl	800be78 <_printf_i>
 800bad0:	e7eb      	b.n	800baaa <_svfiprintf_r+0x1c2>
 800bad2:	bf00      	nop
 800bad4:	0800c670 	.word	0x0800c670
 800bad8:	0800c67a 	.word	0x0800c67a
 800badc:	00000000 	.word	0x00000000
 800bae0:	0800b831 	.word	0x0800b831
 800bae4:	0800c676 	.word	0x0800c676

0800bae8 <__sfputc_r>:
 800bae8:	6893      	ldr	r3, [r2, #8]
 800baea:	3b01      	subs	r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	b410      	push	{r4}
 800baf0:	6093      	str	r3, [r2, #8]
 800baf2:	da08      	bge.n	800bb06 <__sfputc_r+0x1e>
 800baf4:	6994      	ldr	r4, [r2, #24]
 800baf6:	42a3      	cmp	r3, r4
 800baf8:	db01      	blt.n	800bafe <__sfputc_r+0x16>
 800bafa:	290a      	cmp	r1, #10
 800bafc:	d103      	bne.n	800bb06 <__sfputc_r+0x1e>
 800bafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb02:	f7ff bad5 	b.w	800b0b0 <__swbuf_r>
 800bb06:	6813      	ldr	r3, [r2, #0]
 800bb08:	1c58      	adds	r0, r3, #1
 800bb0a:	6010      	str	r0, [r2, #0]
 800bb0c:	7019      	strb	r1, [r3, #0]
 800bb0e:	4608      	mov	r0, r1
 800bb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <__sfputs_r>:
 800bb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb18:	4606      	mov	r6, r0
 800bb1a:	460f      	mov	r7, r1
 800bb1c:	4614      	mov	r4, r2
 800bb1e:	18d5      	adds	r5, r2, r3
 800bb20:	42ac      	cmp	r4, r5
 800bb22:	d101      	bne.n	800bb28 <__sfputs_r+0x12>
 800bb24:	2000      	movs	r0, #0
 800bb26:	e007      	b.n	800bb38 <__sfputs_r+0x22>
 800bb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2c:	463a      	mov	r2, r7
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f7ff ffda 	bl	800bae8 <__sfputc_r>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d1f3      	bne.n	800bb20 <__sfputs_r+0xa>
 800bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb3c <_vfiprintf_r>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	460d      	mov	r5, r1
 800bb42:	b09d      	sub	sp, #116	; 0x74
 800bb44:	4614      	mov	r4, r2
 800bb46:	4698      	mov	r8, r3
 800bb48:	4606      	mov	r6, r0
 800bb4a:	b118      	cbz	r0, 800bb54 <_vfiprintf_r+0x18>
 800bb4c:	6983      	ldr	r3, [r0, #24]
 800bb4e:	b90b      	cbnz	r3, 800bb54 <_vfiprintf_r+0x18>
 800bb50:	f7ff fc88 	bl	800b464 <__sinit>
 800bb54:	4b89      	ldr	r3, [pc, #548]	; (800bd7c <_vfiprintf_r+0x240>)
 800bb56:	429d      	cmp	r5, r3
 800bb58:	d11b      	bne.n	800bb92 <_vfiprintf_r+0x56>
 800bb5a:	6875      	ldr	r5, [r6, #4]
 800bb5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5e:	07d9      	lsls	r1, r3, #31
 800bb60:	d405      	bmi.n	800bb6e <_vfiprintf_r+0x32>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d402      	bmi.n	800bb6e <_vfiprintf_r+0x32>
 800bb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb6a:	f7ff fd19 	bl	800b5a0 <__retarget_lock_acquire_recursive>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	071b      	lsls	r3, r3, #28
 800bb72:	d501      	bpl.n	800bb78 <_vfiprintf_r+0x3c>
 800bb74:	692b      	ldr	r3, [r5, #16]
 800bb76:	b9eb      	cbnz	r3, 800bbb4 <_vfiprintf_r+0x78>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7ff faea 	bl	800b154 <__swsetup_r>
 800bb80:	b1c0      	cbz	r0, 800bbb4 <_vfiprintf_r+0x78>
 800bb82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb84:	07dc      	lsls	r4, r3, #31
 800bb86:	d50e      	bpl.n	800bba6 <_vfiprintf_r+0x6a>
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	b01d      	add	sp, #116	; 0x74
 800bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb92:	4b7b      	ldr	r3, [pc, #492]	; (800bd80 <_vfiprintf_r+0x244>)
 800bb94:	429d      	cmp	r5, r3
 800bb96:	d101      	bne.n	800bb9c <_vfiprintf_r+0x60>
 800bb98:	68b5      	ldr	r5, [r6, #8]
 800bb9a:	e7df      	b.n	800bb5c <_vfiprintf_r+0x20>
 800bb9c:	4b79      	ldr	r3, [pc, #484]	; (800bd84 <_vfiprintf_r+0x248>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	bf08      	it	eq
 800bba2:	68f5      	ldreq	r5, [r6, #12]
 800bba4:	e7da      	b.n	800bb5c <_vfiprintf_r+0x20>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	0598      	lsls	r0, r3, #22
 800bbaa:	d4ed      	bmi.n	800bb88 <_vfiprintf_r+0x4c>
 800bbac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbae:	f7ff fcf8 	bl	800b5a2 <__retarget_lock_release_recursive>
 800bbb2:	e7e9      	b.n	800bb88 <_vfiprintf_r+0x4c>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbc2:	2330      	movs	r3, #48	; 0x30
 800bbc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd88 <_vfiprintf_r+0x24c>
 800bbc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbcc:	f04f 0901 	mov.w	r9, #1
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	469a      	mov	sl, r3
 800bbd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd8:	b10a      	cbz	r2, 800bbde <_vfiprintf_r+0xa2>
 800bbda:	2a25      	cmp	r2, #37	; 0x25
 800bbdc:	d1f9      	bne.n	800bbd2 <_vfiprintf_r+0x96>
 800bbde:	ebba 0b04 	subs.w	fp, sl, r4
 800bbe2:	d00b      	beq.n	800bbfc <_vfiprintf_r+0xc0>
 800bbe4:	465b      	mov	r3, fp
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7ff ff93 	bl	800bb16 <__sfputs_r>
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f000 80aa 	beq.w	800bd4a <_vfiprintf_r+0x20e>
 800bbf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbf8:	445a      	add	r2, fp
 800bbfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bbfc:	f89a 3000 	ldrb.w	r3, [sl]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80a2 	beq.w	800bd4a <_vfiprintf_r+0x20e>
 800bc06:	2300      	movs	r3, #0
 800bc08:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc10:	f10a 0a01 	add.w	sl, sl, #1
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc1c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc1e:	4654      	mov	r4, sl
 800bc20:	2205      	movs	r2, #5
 800bc22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc26:	4858      	ldr	r0, [pc, #352]	; (800bd88 <_vfiprintf_r+0x24c>)
 800bc28:	f7f4 fada 	bl	80001e0 <memchr>
 800bc2c:	9a04      	ldr	r2, [sp, #16]
 800bc2e:	b9d8      	cbnz	r0, 800bc68 <_vfiprintf_r+0x12c>
 800bc30:	06d1      	lsls	r1, r2, #27
 800bc32:	bf44      	itt	mi
 800bc34:	2320      	movmi	r3, #32
 800bc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc3a:	0713      	lsls	r3, r2, #28
 800bc3c:	bf44      	itt	mi
 800bc3e:	232b      	movmi	r3, #43	; 0x2b
 800bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4a:	d015      	beq.n	800bc78 <_vfiprintf_r+0x13c>
 800bc4c:	9a07      	ldr	r2, [sp, #28]
 800bc4e:	4654      	mov	r4, sl
 800bc50:	2000      	movs	r0, #0
 800bc52:	f04f 0c0a 	mov.w	ip, #10
 800bc56:	4621      	mov	r1, r4
 800bc58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc5c:	3b30      	subs	r3, #48	; 0x30
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d94e      	bls.n	800bd00 <_vfiprintf_r+0x1c4>
 800bc62:	b1b0      	cbz	r0, 800bc92 <_vfiprintf_r+0x156>
 800bc64:	9207      	str	r2, [sp, #28]
 800bc66:	e014      	b.n	800bc92 <_vfiprintf_r+0x156>
 800bc68:	eba0 0308 	sub.w	r3, r0, r8
 800bc6c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc70:	4313      	orrs	r3, r2
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	46a2      	mov	sl, r4
 800bc76:	e7d2      	b.n	800bc1e <_vfiprintf_r+0xe2>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	1d19      	adds	r1, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	9103      	str	r1, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfbb      	ittet	lt
 800bc84:	425b      	neglt	r3, r3
 800bc86:	f042 0202 	orrlt.w	r2, r2, #2
 800bc8a:	9307      	strge	r3, [sp, #28]
 800bc8c:	9307      	strlt	r3, [sp, #28]
 800bc8e:	bfb8      	it	lt
 800bc90:	9204      	strlt	r2, [sp, #16]
 800bc92:	7823      	ldrb	r3, [r4, #0]
 800bc94:	2b2e      	cmp	r3, #46	; 0x2e
 800bc96:	d10c      	bne.n	800bcb2 <_vfiprintf_r+0x176>
 800bc98:	7863      	ldrb	r3, [r4, #1]
 800bc9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9c:	d135      	bne.n	800bd0a <_vfiprintf_r+0x1ce>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	9203      	str	r2, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bfb8      	it	lt
 800bcaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcae:	3402      	adds	r4, #2
 800bcb0:	9305      	str	r3, [sp, #20]
 800bcb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd98 <_vfiprintf_r+0x25c>
 800bcb6:	7821      	ldrb	r1, [r4, #0]
 800bcb8:	2203      	movs	r2, #3
 800bcba:	4650      	mov	r0, sl
 800bcbc:	f7f4 fa90 	bl	80001e0 <memchr>
 800bcc0:	b140      	cbz	r0, 800bcd4 <_vfiprintf_r+0x198>
 800bcc2:	2340      	movs	r3, #64	; 0x40
 800bcc4:	eba0 000a 	sub.w	r0, r0, sl
 800bcc8:	fa03 f000 	lsl.w	r0, r3, r0
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	4303      	orrs	r3, r0
 800bcd0:	3401      	adds	r4, #1
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd8:	482c      	ldr	r0, [pc, #176]	; (800bd8c <_vfiprintf_r+0x250>)
 800bcda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcde:	2206      	movs	r2, #6
 800bce0:	f7f4 fa7e 	bl	80001e0 <memchr>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d03f      	beq.n	800bd68 <_vfiprintf_r+0x22c>
 800bce8:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <_vfiprintf_r+0x254>)
 800bcea:	bb1b      	cbnz	r3, 800bd34 <_vfiprintf_r+0x1f8>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	3307      	adds	r3, #7
 800bcf0:	f023 0307 	bic.w	r3, r3, #7
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	9303      	str	r3, [sp, #12]
 800bcf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcfa:	443b      	add	r3, r7
 800bcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfe:	e767      	b.n	800bbd0 <_vfiprintf_r+0x94>
 800bd00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd04:	460c      	mov	r4, r1
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7a5      	b.n	800bc56 <_vfiprintf_r+0x11a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	3401      	adds	r4, #1
 800bd0e:	9305      	str	r3, [sp, #20]
 800bd10:	4619      	mov	r1, r3
 800bd12:	f04f 0c0a 	mov.w	ip, #10
 800bd16:	4620      	mov	r0, r4
 800bd18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd1c:	3a30      	subs	r2, #48	; 0x30
 800bd1e:	2a09      	cmp	r2, #9
 800bd20:	d903      	bls.n	800bd2a <_vfiprintf_r+0x1ee>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c5      	beq.n	800bcb2 <_vfiprintf_r+0x176>
 800bd26:	9105      	str	r1, [sp, #20]
 800bd28:	e7c3      	b.n	800bcb2 <_vfiprintf_r+0x176>
 800bd2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd2e:	4604      	mov	r4, r0
 800bd30:	2301      	movs	r3, #1
 800bd32:	e7f0      	b.n	800bd16 <_vfiprintf_r+0x1da>
 800bd34:	ab03      	add	r3, sp, #12
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	462a      	mov	r2, r5
 800bd3a:	4b16      	ldr	r3, [pc, #88]	; (800bd94 <_vfiprintf_r+0x258>)
 800bd3c:	a904      	add	r1, sp, #16
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f3af 8000 	nop.w
 800bd44:	4607      	mov	r7, r0
 800bd46:	1c78      	adds	r0, r7, #1
 800bd48:	d1d6      	bne.n	800bcf8 <_vfiprintf_r+0x1bc>
 800bd4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd4c:	07d9      	lsls	r1, r3, #31
 800bd4e:	d405      	bmi.n	800bd5c <_vfiprintf_r+0x220>
 800bd50:	89ab      	ldrh	r3, [r5, #12]
 800bd52:	059a      	lsls	r2, r3, #22
 800bd54:	d402      	bmi.n	800bd5c <_vfiprintf_r+0x220>
 800bd56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd58:	f7ff fc23 	bl	800b5a2 <__retarget_lock_release_recursive>
 800bd5c:	89ab      	ldrh	r3, [r5, #12]
 800bd5e:	065b      	lsls	r3, r3, #25
 800bd60:	f53f af12 	bmi.w	800bb88 <_vfiprintf_r+0x4c>
 800bd64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd66:	e711      	b.n	800bb8c <_vfiprintf_r+0x50>
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <_vfiprintf_r+0x258>)
 800bd70:	a904      	add	r1, sp, #16
 800bd72:	4630      	mov	r0, r6
 800bd74:	f000 f880 	bl	800be78 <_printf_i>
 800bd78:	e7e4      	b.n	800bd44 <_vfiprintf_r+0x208>
 800bd7a:	bf00      	nop
 800bd7c:	0800c630 	.word	0x0800c630
 800bd80:	0800c650 	.word	0x0800c650
 800bd84:	0800c610 	.word	0x0800c610
 800bd88:	0800c670 	.word	0x0800c670
 800bd8c:	0800c67a 	.word	0x0800c67a
 800bd90:	00000000 	.word	0x00000000
 800bd94:	0800bb17 	.word	0x0800bb17
 800bd98:	0800c676 	.word	0x0800c676

0800bd9c <_printf_common>:
 800bd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda0:	4616      	mov	r6, r2
 800bda2:	4699      	mov	r9, r3
 800bda4:	688a      	ldr	r2, [r1, #8]
 800bda6:	690b      	ldr	r3, [r1, #16]
 800bda8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdac:	4293      	cmp	r3, r2
 800bdae:	bfb8      	it	lt
 800bdb0:	4613      	movlt	r3, r2
 800bdb2:	6033      	str	r3, [r6, #0]
 800bdb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bdb8:	4607      	mov	r7, r0
 800bdba:	460c      	mov	r4, r1
 800bdbc:	b10a      	cbz	r2, 800bdc2 <_printf_common+0x26>
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	6033      	str	r3, [r6, #0]
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	0699      	lsls	r1, r3, #26
 800bdc6:	bf42      	ittt	mi
 800bdc8:	6833      	ldrmi	r3, [r6, #0]
 800bdca:	3302      	addmi	r3, #2
 800bdcc:	6033      	strmi	r3, [r6, #0]
 800bdce:	6825      	ldr	r5, [r4, #0]
 800bdd0:	f015 0506 	ands.w	r5, r5, #6
 800bdd4:	d106      	bne.n	800bde4 <_printf_common+0x48>
 800bdd6:	f104 0a19 	add.w	sl, r4, #25
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	6832      	ldr	r2, [r6, #0]
 800bdde:	1a9b      	subs	r3, r3, r2
 800bde0:	42ab      	cmp	r3, r5
 800bde2:	dc26      	bgt.n	800be32 <_printf_common+0x96>
 800bde4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bde8:	1e13      	subs	r3, r2, #0
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	bf18      	it	ne
 800bdee:	2301      	movne	r3, #1
 800bdf0:	0692      	lsls	r2, r2, #26
 800bdf2:	d42b      	bmi.n	800be4c <_printf_common+0xb0>
 800bdf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	47c0      	blx	r8
 800bdfe:	3001      	adds	r0, #1
 800be00:	d01e      	beq.n	800be40 <_printf_common+0xa4>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	68e5      	ldr	r5, [r4, #12]
 800be06:	6832      	ldr	r2, [r6, #0]
 800be08:	f003 0306 	and.w	r3, r3, #6
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	bf08      	it	eq
 800be10:	1aad      	subeq	r5, r5, r2
 800be12:	68a3      	ldr	r3, [r4, #8]
 800be14:	6922      	ldr	r2, [r4, #16]
 800be16:	bf0c      	ite	eq
 800be18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be1c:	2500      	movne	r5, #0
 800be1e:	4293      	cmp	r3, r2
 800be20:	bfc4      	itt	gt
 800be22:	1a9b      	subgt	r3, r3, r2
 800be24:	18ed      	addgt	r5, r5, r3
 800be26:	2600      	movs	r6, #0
 800be28:	341a      	adds	r4, #26
 800be2a:	42b5      	cmp	r5, r6
 800be2c:	d11a      	bne.n	800be64 <_printf_common+0xc8>
 800be2e:	2000      	movs	r0, #0
 800be30:	e008      	b.n	800be44 <_printf_common+0xa8>
 800be32:	2301      	movs	r3, #1
 800be34:	4652      	mov	r2, sl
 800be36:	4649      	mov	r1, r9
 800be38:	4638      	mov	r0, r7
 800be3a:	47c0      	blx	r8
 800be3c:	3001      	adds	r0, #1
 800be3e:	d103      	bne.n	800be48 <_printf_common+0xac>
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be48:	3501      	adds	r5, #1
 800be4a:	e7c6      	b.n	800bdda <_printf_common+0x3e>
 800be4c:	18e1      	adds	r1, r4, r3
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	2030      	movs	r0, #48	; 0x30
 800be52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be56:	4422      	add	r2, r4
 800be58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be60:	3302      	adds	r3, #2
 800be62:	e7c7      	b.n	800bdf4 <_printf_common+0x58>
 800be64:	2301      	movs	r3, #1
 800be66:	4622      	mov	r2, r4
 800be68:	4649      	mov	r1, r9
 800be6a:	4638      	mov	r0, r7
 800be6c:	47c0      	blx	r8
 800be6e:	3001      	adds	r0, #1
 800be70:	d0e6      	beq.n	800be40 <_printf_common+0xa4>
 800be72:	3601      	adds	r6, #1
 800be74:	e7d9      	b.n	800be2a <_printf_common+0x8e>
	...

0800be78 <_printf_i>:
 800be78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	7e0f      	ldrb	r7, [r1, #24]
 800be7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be80:	2f78      	cmp	r7, #120	; 0x78
 800be82:	4691      	mov	r9, r2
 800be84:	4680      	mov	r8, r0
 800be86:	460c      	mov	r4, r1
 800be88:	469a      	mov	sl, r3
 800be8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be8e:	d807      	bhi.n	800bea0 <_printf_i+0x28>
 800be90:	2f62      	cmp	r7, #98	; 0x62
 800be92:	d80a      	bhi.n	800beaa <_printf_i+0x32>
 800be94:	2f00      	cmp	r7, #0
 800be96:	f000 80d8 	beq.w	800c04a <_printf_i+0x1d2>
 800be9a:	2f58      	cmp	r7, #88	; 0x58
 800be9c:	f000 80a3 	beq.w	800bfe6 <_printf_i+0x16e>
 800bea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bea8:	e03a      	b.n	800bf20 <_printf_i+0xa8>
 800beaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800beae:	2b15      	cmp	r3, #21
 800beb0:	d8f6      	bhi.n	800bea0 <_printf_i+0x28>
 800beb2:	a101      	add	r1, pc, #4	; (adr r1, 800beb8 <_printf_i+0x40>)
 800beb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800beb8:	0800bf11 	.word	0x0800bf11
 800bebc:	0800bf25 	.word	0x0800bf25
 800bec0:	0800bea1 	.word	0x0800bea1
 800bec4:	0800bea1 	.word	0x0800bea1
 800bec8:	0800bea1 	.word	0x0800bea1
 800becc:	0800bea1 	.word	0x0800bea1
 800bed0:	0800bf25 	.word	0x0800bf25
 800bed4:	0800bea1 	.word	0x0800bea1
 800bed8:	0800bea1 	.word	0x0800bea1
 800bedc:	0800bea1 	.word	0x0800bea1
 800bee0:	0800bea1 	.word	0x0800bea1
 800bee4:	0800c031 	.word	0x0800c031
 800bee8:	0800bf55 	.word	0x0800bf55
 800beec:	0800c013 	.word	0x0800c013
 800bef0:	0800bea1 	.word	0x0800bea1
 800bef4:	0800bea1 	.word	0x0800bea1
 800bef8:	0800c053 	.word	0x0800c053
 800befc:	0800bea1 	.word	0x0800bea1
 800bf00:	0800bf55 	.word	0x0800bf55
 800bf04:	0800bea1 	.word	0x0800bea1
 800bf08:	0800bea1 	.word	0x0800bea1
 800bf0c:	0800c01b 	.word	0x0800c01b
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	1d1a      	adds	r2, r3, #4
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	602a      	str	r2, [r5, #0]
 800bf18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf20:	2301      	movs	r3, #1
 800bf22:	e0a3      	b.n	800c06c <_printf_i+0x1f4>
 800bf24:	6820      	ldr	r0, [r4, #0]
 800bf26:	6829      	ldr	r1, [r5, #0]
 800bf28:	0606      	lsls	r6, r0, #24
 800bf2a:	f101 0304 	add.w	r3, r1, #4
 800bf2e:	d50a      	bpl.n	800bf46 <_printf_i+0xce>
 800bf30:	680e      	ldr	r6, [r1, #0]
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	da03      	bge.n	800bf40 <_printf_i+0xc8>
 800bf38:	232d      	movs	r3, #45	; 0x2d
 800bf3a:	4276      	negs	r6, r6
 800bf3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf40:	485e      	ldr	r0, [pc, #376]	; (800c0bc <_printf_i+0x244>)
 800bf42:	230a      	movs	r3, #10
 800bf44:	e019      	b.n	800bf7a <_printf_i+0x102>
 800bf46:	680e      	ldr	r6, [r1, #0]
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf4e:	bf18      	it	ne
 800bf50:	b236      	sxthne	r6, r6
 800bf52:	e7ef      	b.n	800bf34 <_printf_i+0xbc>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	6820      	ldr	r0, [r4, #0]
 800bf58:	1d19      	adds	r1, r3, #4
 800bf5a:	6029      	str	r1, [r5, #0]
 800bf5c:	0601      	lsls	r1, r0, #24
 800bf5e:	d501      	bpl.n	800bf64 <_printf_i+0xec>
 800bf60:	681e      	ldr	r6, [r3, #0]
 800bf62:	e002      	b.n	800bf6a <_printf_i+0xf2>
 800bf64:	0646      	lsls	r6, r0, #25
 800bf66:	d5fb      	bpl.n	800bf60 <_printf_i+0xe8>
 800bf68:	881e      	ldrh	r6, [r3, #0]
 800bf6a:	4854      	ldr	r0, [pc, #336]	; (800c0bc <_printf_i+0x244>)
 800bf6c:	2f6f      	cmp	r7, #111	; 0x6f
 800bf6e:	bf0c      	ite	eq
 800bf70:	2308      	moveq	r3, #8
 800bf72:	230a      	movne	r3, #10
 800bf74:	2100      	movs	r1, #0
 800bf76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf7a:	6865      	ldr	r5, [r4, #4]
 800bf7c:	60a5      	str	r5, [r4, #8]
 800bf7e:	2d00      	cmp	r5, #0
 800bf80:	bfa2      	ittt	ge
 800bf82:	6821      	ldrge	r1, [r4, #0]
 800bf84:	f021 0104 	bicge.w	r1, r1, #4
 800bf88:	6021      	strge	r1, [r4, #0]
 800bf8a:	b90e      	cbnz	r6, 800bf90 <_printf_i+0x118>
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	d04d      	beq.n	800c02c <_printf_i+0x1b4>
 800bf90:	4615      	mov	r5, r2
 800bf92:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf96:	fb03 6711 	mls	r7, r3, r1, r6
 800bf9a:	5dc7      	ldrb	r7, [r0, r7]
 800bf9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfa0:	4637      	mov	r7, r6
 800bfa2:	42bb      	cmp	r3, r7
 800bfa4:	460e      	mov	r6, r1
 800bfa6:	d9f4      	bls.n	800bf92 <_printf_i+0x11a>
 800bfa8:	2b08      	cmp	r3, #8
 800bfaa:	d10b      	bne.n	800bfc4 <_printf_i+0x14c>
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	07de      	lsls	r6, r3, #31
 800bfb0:	d508      	bpl.n	800bfc4 <_printf_i+0x14c>
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	6861      	ldr	r1, [r4, #4]
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	bfde      	ittt	le
 800bfba:	2330      	movle	r3, #48	; 0x30
 800bfbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfc4:	1b52      	subs	r2, r2, r5
 800bfc6:	6122      	str	r2, [r4, #16]
 800bfc8:	f8cd a000 	str.w	sl, [sp]
 800bfcc:	464b      	mov	r3, r9
 800bfce:	aa03      	add	r2, sp, #12
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	f7ff fee2 	bl	800bd9c <_printf_common>
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d14c      	bne.n	800c076 <_printf_i+0x1fe>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b004      	add	sp, #16
 800bfe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe6:	4835      	ldr	r0, [pc, #212]	; (800c0bc <_printf_i+0x244>)
 800bfe8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfec:	6829      	ldr	r1, [r5, #0]
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bff4:	6029      	str	r1, [r5, #0]
 800bff6:	061d      	lsls	r5, r3, #24
 800bff8:	d514      	bpl.n	800c024 <_printf_i+0x1ac>
 800bffa:	07df      	lsls	r7, r3, #31
 800bffc:	bf44      	itt	mi
 800bffe:	f043 0320 	orrmi.w	r3, r3, #32
 800c002:	6023      	strmi	r3, [r4, #0]
 800c004:	b91e      	cbnz	r6, 800c00e <_printf_i+0x196>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	f023 0320 	bic.w	r3, r3, #32
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	2310      	movs	r3, #16
 800c010:	e7b0      	b.n	800bf74 <_printf_i+0xfc>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	f043 0320 	orr.w	r3, r3, #32
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	2378      	movs	r3, #120	; 0x78
 800c01c:	4828      	ldr	r0, [pc, #160]	; (800c0c0 <_printf_i+0x248>)
 800c01e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c022:	e7e3      	b.n	800bfec <_printf_i+0x174>
 800c024:	0659      	lsls	r1, r3, #25
 800c026:	bf48      	it	mi
 800c028:	b2b6      	uxthmi	r6, r6
 800c02a:	e7e6      	b.n	800bffa <_printf_i+0x182>
 800c02c:	4615      	mov	r5, r2
 800c02e:	e7bb      	b.n	800bfa8 <_printf_i+0x130>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	6826      	ldr	r6, [r4, #0]
 800c034:	6961      	ldr	r1, [r4, #20]
 800c036:	1d18      	adds	r0, r3, #4
 800c038:	6028      	str	r0, [r5, #0]
 800c03a:	0635      	lsls	r5, r6, #24
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	d501      	bpl.n	800c044 <_printf_i+0x1cc>
 800c040:	6019      	str	r1, [r3, #0]
 800c042:	e002      	b.n	800c04a <_printf_i+0x1d2>
 800c044:	0670      	lsls	r0, r6, #25
 800c046:	d5fb      	bpl.n	800c040 <_printf_i+0x1c8>
 800c048:	8019      	strh	r1, [r3, #0]
 800c04a:	2300      	movs	r3, #0
 800c04c:	6123      	str	r3, [r4, #16]
 800c04e:	4615      	mov	r5, r2
 800c050:	e7ba      	b.n	800bfc8 <_printf_i+0x150>
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	1d1a      	adds	r2, r3, #4
 800c056:	602a      	str	r2, [r5, #0]
 800c058:	681d      	ldr	r5, [r3, #0]
 800c05a:	6862      	ldr	r2, [r4, #4]
 800c05c:	2100      	movs	r1, #0
 800c05e:	4628      	mov	r0, r5
 800c060:	f7f4 f8be 	bl	80001e0 <memchr>
 800c064:	b108      	cbz	r0, 800c06a <_printf_i+0x1f2>
 800c066:	1b40      	subs	r0, r0, r5
 800c068:	6060      	str	r0, [r4, #4]
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	6123      	str	r3, [r4, #16]
 800c06e:	2300      	movs	r3, #0
 800c070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c074:	e7a8      	b.n	800bfc8 <_printf_i+0x150>
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	462a      	mov	r2, r5
 800c07a:	4649      	mov	r1, r9
 800c07c:	4640      	mov	r0, r8
 800c07e:	47d0      	blx	sl
 800c080:	3001      	adds	r0, #1
 800c082:	d0ab      	beq.n	800bfdc <_printf_i+0x164>
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	079b      	lsls	r3, r3, #30
 800c088:	d413      	bmi.n	800c0b2 <_printf_i+0x23a>
 800c08a:	68e0      	ldr	r0, [r4, #12]
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	4298      	cmp	r0, r3
 800c090:	bfb8      	it	lt
 800c092:	4618      	movlt	r0, r3
 800c094:	e7a4      	b.n	800bfe0 <_printf_i+0x168>
 800c096:	2301      	movs	r3, #1
 800c098:	4632      	mov	r2, r6
 800c09a:	4649      	mov	r1, r9
 800c09c:	4640      	mov	r0, r8
 800c09e:	47d0      	blx	sl
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d09b      	beq.n	800bfdc <_printf_i+0x164>
 800c0a4:	3501      	adds	r5, #1
 800c0a6:	68e3      	ldr	r3, [r4, #12]
 800c0a8:	9903      	ldr	r1, [sp, #12]
 800c0aa:	1a5b      	subs	r3, r3, r1
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	dcf2      	bgt.n	800c096 <_printf_i+0x21e>
 800c0b0:	e7eb      	b.n	800c08a <_printf_i+0x212>
 800c0b2:	2500      	movs	r5, #0
 800c0b4:	f104 0619 	add.w	r6, r4, #25
 800c0b8:	e7f5      	b.n	800c0a6 <_printf_i+0x22e>
 800c0ba:	bf00      	nop
 800c0bc:	0800c681 	.word	0x0800c681
 800c0c0:	0800c692 	.word	0x0800c692

0800c0c4 <_sbrk_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	; (800c0e0 <_sbrk_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f5 f86a 	bl	80011a8 <_sbrk>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_sbrk_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_sbrk_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20000624 	.word	0x20000624

0800c0e4 <__sread>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f8ea 	bl	800c2c4 <_read_r>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	bfab      	itete	ge
 800c0f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0f8:	181b      	addge	r3, r3, r0
 800c0fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0fe:	bfac      	ite	ge
 800c100:	6563      	strge	r3, [r4, #84]	; 0x54
 800c102:	81a3      	strhlt	r3, [r4, #12]
 800c104:	bd10      	pop	{r4, pc}

0800c106 <__swrite>:
 800c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10a:	461f      	mov	r7, r3
 800c10c:	898b      	ldrh	r3, [r1, #12]
 800c10e:	05db      	lsls	r3, r3, #23
 800c110:	4605      	mov	r5, r0
 800c112:	460c      	mov	r4, r1
 800c114:	4616      	mov	r6, r2
 800c116:	d505      	bpl.n	800c124 <__swrite+0x1e>
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	2302      	movs	r3, #2
 800c11e:	2200      	movs	r2, #0
 800c120:	f000 f868 	bl	800c1f4 <_lseek_r>
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c12a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c12e:	81a3      	strh	r3, [r4, #12]
 800c130:	4632      	mov	r2, r6
 800c132:	463b      	mov	r3, r7
 800c134:	4628      	mov	r0, r5
 800c136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13a:	f000 b817 	b.w	800c16c <_write_r>

0800c13e <__sseek>:
 800c13e:	b510      	push	{r4, lr}
 800c140:	460c      	mov	r4, r1
 800c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c146:	f000 f855 	bl	800c1f4 <_lseek_r>
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	bf15      	itete	ne
 800c150:	6560      	strne	r0, [r4, #84]	; 0x54
 800c152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c15a:	81a3      	strheq	r3, [r4, #12]
 800c15c:	bf18      	it	ne
 800c15e:	81a3      	strhne	r3, [r4, #12]
 800c160:	bd10      	pop	{r4, pc}

0800c162 <__sclose>:
 800c162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c166:	f000 b813 	b.w	800c190 <_close_r>
	...

0800c16c <_write_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	; (800c18c <_write_r+0x20>)
 800c170:	4604      	mov	r4, r0
 800c172:	4608      	mov	r0, r1
 800c174:	4611      	mov	r1, r2
 800c176:	2200      	movs	r2, #0
 800c178:	602a      	str	r2, [r5, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	f7f4 fa02 	bl	8000584 <_write>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_write_r+0x1e>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_write_r+0x1e>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	20000624 	.word	0x20000624

0800c190 <_close_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d06      	ldr	r5, [pc, #24]	; (800c1ac <_close_r+0x1c>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7f4 ffcf 	bl	800113e <_close>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_close_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_close_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	20000624 	.word	0x20000624

0800c1b0 <_fstat_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4d07      	ldr	r5, [pc, #28]	; (800c1d0 <_fstat_r+0x20>)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	602b      	str	r3, [r5, #0]
 800c1be:	f7f4 ffca 	bl	8001156 <_fstat>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	d102      	bne.n	800c1cc <_fstat_r+0x1c>
 800c1c6:	682b      	ldr	r3, [r5, #0]
 800c1c8:	b103      	cbz	r3, 800c1cc <_fstat_r+0x1c>
 800c1ca:	6023      	str	r3, [r4, #0]
 800c1cc:	bd38      	pop	{r3, r4, r5, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000624 	.word	0x20000624

0800c1d4 <_isatty_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d06      	ldr	r5, [pc, #24]	; (800c1f0 <_isatty_r+0x1c>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	602b      	str	r3, [r5, #0]
 800c1e0:	f7f4 ffc9 	bl	8001176 <_isatty>
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	d102      	bne.n	800c1ee <_isatty_r+0x1a>
 800c1e8:	682b      	ldr	r3, [r5, #0]
 800c1ea:	b103      	cbz	r3, 800c1ee <_isatty_r+0x1a>
 800c1ec:	6023      	str	r3, [r4, #0]
 800c1ee:	bd38      	pop	{r3, r4, r5, pc}
 800c1f0:	20000624 	.word	0x20000624

0800c1f4 <_lseek_r>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4d07      	ldr	r5, [pc, #28]	; (800c214 <_lseek_r+0x20>)
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4608      	mov	r0, r1
 800c1fc:	4611      	mov	r1, r2
 800c1fe:	2200      	movs	r2, #0
 800c200:	602a      	str	r2, [r5, #0]
 800c202:	461a      	mov	r2, r3
 800c204:	f7f4 ffc2 	bl	800118c <_lseek>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_lseek_r+0x1e>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_lseek_r+0x1e>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	20000624 	.word	0x20000624

0800c218 <memmove>:
 800c218:	4288      	cmp	r0, r1
 800c21a:	b510      	push	{r4, lr}
 800c21c:	eb01 0402 	add.w	r4, r1, r2
 800c220:	d902      	bls.n	800c228 <memmove+0x10>
 800c222:	4284      	cmp	r4, r0
 800c224:	4623      	mov	r3, r4
 800c226:	d807      	bhi.n	800c238 <memmove+0x20>
 800c228:	1e43      	subs	r3, r0, #1
 800c22a:	42a1      	cmp	r1, r4
 800c22c:	d008      	beq.n	800c240 <memmove+0x28>
 800c22e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c232:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c236:	e7f8      	b.n	800c22a <memmove+0x12>
 800c238:	4402      	add	r2, r0
 800c23a:	4601      	mov	r1, r0
 800c23c:	428a      	cmp	r2, r1
 800c23e:	d100      	bne.n	800c242 <memmove+0x2a>
 800c240:	bd10      	pop	{r4, pc}
 800c242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c24a:	e7f7      	b.n	800c23c <memmove+0x24>

0800c24c <__malloc_lock>:
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__malloc_lock+0x8>)
 800c24e:	f7ff b9a7 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800c252:	bf00      	nop
 800c254:	20000618 	.word	0x20000618

0800c258 <__malloc_unlock>:
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <__malloc_unlock+0x8>)
 800c25a:	f7ff b9a2 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800c25e:	bf00      	nop
 800c260:	20000618 	.word	0x20000618

0800c264 <_realloc_r>:
 800c264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c268:	4680      	mov	r8, r0
 800c26a:	4614      	mov	r4, r2
 800c26c:	460e      	mov	r6, r1
 800c26e:	b921      	cbnz	r1, 800c27a <_realloc_r+0x16>
 800c270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c274:	4611      	mov	r1, r2
 800c276:	f7ff ba67 	b.w	800b748 <_malloc_r>
 800c27a:	b92a      	cbnz	r2, 800c288 <_realloc_r+0x24>
 800c27c:	f7ff f9f8 	bl	800b670 <_free_r>
 800c280:	4625      	mov	r5, r4
 800c282:	4628      	mov	r0, r5
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c288:	f000 f82e 	bl	800c2e8 <_malloc_usable_size_r>
 800c28c:	4284      	cmp	r4, r0
 800c28e:	4607      	mov	r7, r0
 800c290:	d802      	bhi.n	800c298 <_realloc_r+0x34>
 800c292:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c296:	d812      	bhi.n	800c2be <_realloc_r+0x5a>
 800c298:	4621      	mov	r1, r4
 800c29a:	4640      	mov	r0, r8
 800c29c:	f7ff fa54 	bl	800b748 <_malloc_r>
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d0ed      	beq.n	800c282 <_realloc_r+0x1e>
 800c2a6:	42bc      	cmp	r4, r7
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	bf28      	it	cs
 800c2ae:	463a      	movcs	r2, r7
 800c2b0:	f7fe fe32 	bl	800af18 <memcpy>
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	f7ff f9da 	bl	800b670 <_free_r>
 800c2bc:	e7e1      	b.n	800c282 <_realloc_r+0x1e>
 800c2be:	4635      	mov	r5, r6
 800c2c0:	e7df      	b.n	800c282 <_realloc_r+0x1e>
	...

0800c2c4 <_read_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4d07      	ldr	r5, [pc, #28]	; (800c2e4 <_read_r+0x20>)
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	602a      	str	r2, [r5, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f7f4 ff16 	bl	8001104 <_read>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_read_r+0x1e>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_read_r+0x1e>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	20000624 	.word	0x20000624

0800c2e8 <_malloc_usable_size_r>:
 800c2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ec:	1f18      	subs	r0, r3, #4
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bfbc      	itt	lt
 800c2f2:	580b      	ldrlt	r3, [r1, r0]
 800c2f4:	18c0      	addlt	r0, r0, r3
 800c2f6:	4770      	bx	lr

0800c2f8 <_init>:
 800c2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fa:	bf00      	nop
 800c2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fe:	bc08      	pop	{r3}
 800c300:	469e      	mov	lr, r3
 800c302:	4770      	bx	lr

0800c304 <_fini>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	bf00      	nop
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr
