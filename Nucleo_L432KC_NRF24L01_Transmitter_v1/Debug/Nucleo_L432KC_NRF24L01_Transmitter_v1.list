
Nucleo_L432KC_NRF24L01_Transmitter_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004224  08004224  00014224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800434c  0800434c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800434c  0800434c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004354  08004354  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800435c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08004368  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004368  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1c3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f07  00000000  00000000  0002e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  00030108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020995  00000000  00000000  000319a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a17f  00000000  00000000  00052335  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2c01  00000000  00000000  0005c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000333c  00000000  00000000  0011f130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800420c 	.word	0x0800420c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800420c 	.word	0x0800420c

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <nRF24_CSN_L>:

static inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
}

static inline void nRF24_CSN_L() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2110      	movs	r1, #16
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f000 fe96 	bl	8001218 <HAL_GPIO_WritePin>
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2110      	movs	r1, #16
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 fe8c 	bl	8001218 <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af02      	add	r7, sp, #8
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi1,&data,&result,1,2000)!=HAL_OK) {
 800050e:	f107 020f 	add.w	r2, r7, #15
 8000512:	1df9      	adds	r1, r7, #7
 8000514:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <nRF24_LL_RW+0x34>)
 800051e:	f002 f8fe 	bl	800271e <HAL_SPI_TransmitReceive>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <nRF24_LL_RW+0x28>
        Error_Handler();
 8000528:	f003 fa9a 	bl	8003a60 <Error_Handler>
    };
    return result;
 800052c:	7bfb      	ldrb	r3, [r7, #15]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c

0800053c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000546:	f7ff ffc9 	bl	80004dc <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	f003 031f 	and.w	r3, r3, #31
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ffd6 	bl	8000504 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000558:	20ff      	movs	r0, #255	; 0xff
 800055a:	f7ff ffd3 	bl	8000504 <nRF24_LL_RW>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000562:	f7ff ffc5 	bl	80004f0 <nRF24_CSN_H>

	return value;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000580:	f7ff ffac 	bl	80004dc <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b1f      	cmp	r3, #31
 8000588:	d810      	bhi.n	80005ac <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	f003 031f 	and.w	r3, r3, #31
 8000592:	b25b      	sxtb	r3, r3
 8000594:	f043 0320 	orr.w	r3, r3, #32
 8000598:	b25b      	sxtb	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffb1 	bl	8000504 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ffad 	bl	8000504 <nRF24_LL_RW>
 80005aa:	e013      	b.n	80005d4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ffa8 	bl	8000504 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2be1      	cmp	r3, #225	; 0xe1
 80005b8:	d00c      	beq.n	80005d4 <nRF24_WriteReg+0x64>
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2be2      	cmp	r3, #226	; 0xe2
 80005be:	d009      	beq.n	80005d4 <nRF24_WriteReg+0x64>
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2be3      	cmp	r3, #227	; 0xe3
 80005c4:	d006      	beq.n	80005d4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2bff      	cmp	r3, #255	; 0xff
 80005ca:	d003      	beq.n	80005d4 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff98 	bl	8000504 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80005d4:	f7ff ff8c 	bl	80004f0 <nRF24_CSN_H>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80005f0:	f7ff ff74 	bl	80004dc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff84 	bl	8000504 <nRF24_LL_RW>
	while (count--) {
 80005fc:	e007      	b.n	800060e <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80005fe:	683c      	ldr	r4, [r7, #0]
 8000600:	1c63      	adds	r3, r4, #1
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	20ff      	movs	r0, #255	; 0xff
 8000606:	f7ff ff7d 	bl	8000504 <nRF24_LL_RW>
 800060a:	4603      	mov	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	71ba      	strb	r2, [r7, #6]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f2      	bne.n	80005fe <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000618:	f7ff ff6a 	bl	80004f0 <nRF24_CSN_H>
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}

08000624 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000634:	f7ff ff52 	bl	80004dc <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff62 	bl	8000504 <nRF24_LL_RW>
	while (count--) {
 8000640:	e006      	b.n	8000650 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	603a      	str	r2, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff5a 	bl	8000504 <nRF24_LL_RW>
	while (count--) {
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	1e5a      	subs	r2, r3, #1
 8000654:	71ba      	strb	r2, [r7, #6]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1f3      	bne.n	8000642 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800065a:	f7ff ff49 	bl	80004f0 <nRF24_CSN_H>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800066a:	2108      	movs	r1, #8
 800066c:	2000      	movs	r0, #0
 800066e:	f7ff ff7f 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000672:	213f      	movs	r1, #63	; 0x3f
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ff7b 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800067a:	2103      	movs	r1, #3
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff ff77 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000682:	2103      	movs	r1, #3
 8000684:	2003      	movs	r0, #3
 8000686:	f7ff ff73 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800068a:	2103      	movs	r1, #3
 800068c:	2004      	movs	r0, #4
 800068e:	f7ff ff6f 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000692:	2102      	movs	r1, #2
 8000694:	2005      	movs	r0, #5
 8000696:	f7ff ff6b 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800069a:	210e      	movs	r1, #14
 800069c:	2006      	movs	r0, #6
 800069e:	f7ff ff67 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80006a2:	2100      	movs	r1, #0
 80006a4:	2007      	movs	r0, #7
 80006a6:	f7ff ff63 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2011      	movs	r0, #17
 80006ae:	f7ff ff5f 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2012      	movs	r0, #18
 80006b6:	f7ff ff5b 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2013      	movs	r0, #19
 80006be:	f7ff ff57 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80006c2:	2100      	movs	r1, #0
 80006c4:	2014      	movs	r0, #20
 80006c6:	f7ff ff53 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2015      	movs	r0, #21
 80006ce:	f7ff ff4f 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80006d2:	2100      	movs	r1, #0
 80006d4:	2016      	movs	r0, #22
 80006d6:	f7ff ff4b 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80006da:	2100      	movs	r1, #0
 80006dc:	201c      	movs	r0, #28
 80006de:	f7ff ff47 	bl	8000570 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80006e2:	2100      	movs	r1, #0
 80006e4:	201d      	movs	r0, #29
 80006e6:	f7ff ff43 	bl	8000570 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80006ea:	f000 f9e9 	bl	8000ac0 <nRF24_FlushRX>
	nRF24_FlushTX();
 80006ee:	f000 f9df 	bl	8000ab0 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80006f2:	f000 f9ed 	bl	8000ad0 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80006f6:	f7ff fefb 	bl	80004f0 <nRF24_CSN_H>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <nRF24_Check+0x58>)
 8000708:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800070a:	2205      	movs	r2, #5
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	2030      	movs	r0, #48	; 0x30
 8000710:	f7ff ff88 	bl	8000624 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000714:	463b      	mov	r3, r7
 8000716:	2205      	movs	r2, #5
 8000718:	4619      	mov	r1, r3
 800071a:	2010      	movs	r0, #16
 800071c:	f7ff ff60 	bl	80005e0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e010      	b.n	8000748 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	4413      	add	r3, r2
 800072e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1c59      	adds	r1, r3, #1
 8000736:	60b9      	str	r1, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d001      	beq.n	8000742 <nRF24_Check+0x42>
 800073e:	2300      	movs	r3, #0
 8000740:	e006      	b.n	8000750 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3301      	adds	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d9eb      	bls.n	8000726 <nRF24_Check+0x26>
	}

	return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	08004224 	.word	0x08004224

0800075c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fee8 	bl	800053c <nRF24_ReadReg>
 800076c:	4603      	mov	r3, r0
 800076e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d104      	bne.n	8000780 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e003      	b.n	8000788 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f023 0302 	bic.w	r3, r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	4619      	mov	r1, r3
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff feef 	bl	8000570 <nRF24_WriteReg>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fec9 	bl	800053c <nRF24_ReadReg>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	b25a      	sxtb	r2, r3
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fece 	bl	8000570 <nRF24_WriteReg>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80007e6:	201d      	movs	r0, #29
 80007e8:	f7ff fea8 	bl	800053c <nRF24_ReadReg>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00c      	beq.n	8000810 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	201d      	movs	r0, #29
 8000802:	f7ff feb5 	bl	8000570 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000806:	211f      	movs	r1, #31
 8000808:	201c      	movs	r0, #28
 800080a:	f7ff feb1 	bl	8000570 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 800080e:	e00b      	b.n	8000828 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f023 0304 	bic.w	r3, r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4619      	mov	r1, r3
 800081a:	201d      	movs	r0, #29
 800081c:	f7ff fea8 	bl	8000570 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000820:	2100      	movs	r1, #0
 8000822:	201c      	movs	r0, #28
 8000824:	f7ff fea4 	bl	8000570 <nRF24_WriteReg>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800083a:	201d      	movs	r0, #29
 800083c:	f7ff fe7e 	bl	800053c <nRF24_ReadReg>
 8000840:	4603      	mov	r3, r0
 8000842:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d008      	beq.n	800085c <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	201d      	movs	r0, #29
 8000856:	f7ff fe8b 	bl	8000570 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 800085a:	e007      	b.n	800086c <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	f023 0302 	bic.w	r3, r3, #2
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4619      	mov	r1, r3
 8000866:	201d      	movs	r0, #29
 8000868:	f7ff fe82 	bl	8000570 <nRF24_WriteReg>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe5c 	bl	800053c <nRF24_ReadReg>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f023 030c 	bic.w	r3, r3, #12
 800088e:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	f003 030c 	and.w	r3, r3, #12
 8000898:	b25a      	sxtb	r2, r3
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4313      	orrs	r3, r2
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4619      	mov	r1, r3
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fe61 	bl	8000570 <nRF24_WriteReg>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4619      	mov	r1, r3
 80008c4:	2005      	movs	r0, #5
 80008c6:	f7ff fe53 	bl	8000570 <nRF24_WriteReg>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <nRF24_SetAutoRetr>:
// Set automatic retransmission parameters
// input:
//   ard - auto retransmit delay, one of nRF24_ARD_xx values
//   arc - count of auto retransmits, value form 0 to 15
// note: zero arc value means that the automatic retransmission disabled
void nRF24_SetAutoRetr(uint8_t ard, uint8_t arc) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	460a      	mov	r2, r1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4613      	mov	r3, r2
 80008e0:	71bb      	strb	r3, [r7, #6]
	// Set auto retransmit settings (SETUP_RETR register)
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, (uint8_t)((ard << 4) | (arc & nRF24_MASK_RETR_ARC)));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	4313      	orrs	r3, r2
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	2004      	movs	r0, #4
 80008fc:	f7ff fe38 	bl	8000570 <nRF24_WriteReg>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3b02      	subs	r3, #2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	2003      	movs	r0, #3
 800091c:	f7ff fe28 	bl	8000570 <nRF24_WriteReg>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b06      	cmp	r3, #6
 8000938:	d83e      	bhi.n	80009b8 <nRF24_SetAddr+0x90>
 800093a:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <nRF24_SetAddr+0x18>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	0800095d 	.word	0x0800095d
 8000944:	0800095d 	.word	0x0800095d
 8000948:	080009a5 	.word	0x080009a5
 800094c:	080009a5 	.word	0x080009a5
 8000950:	080009a5 	.word	0x080009a5
 8000954:	080009a5 	.word	0x080009a5
 8000958:	0800095d 	.word	0x0800095d
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800095c:	2003      	movs	r0, #3
 800095e:	f7ff fded 	bl	800053c <nRF24_ReadReg>
 8000962:	4603      	mov	r3, r0
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	4413      	add	r3, r2
 800096e:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000970:	f7ff fdb4 	bl	80004dc <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <nRF24_SetAddr+0x9c>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fdbf 	bl	8000504 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	603a      	str	r2, [r7, #0]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdb8 	bl	8000504 <nRF24_LL_RW>
			} while (addr_width--);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	73fa      	strb	r2, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f3      	bne.n	8000986 <nRF24_SetAddr+0x5e>
			nRF24_CSN_H();
 800099e:	f7ff fda7 	bl	80004f0 <nRF24_CSN_H>
			break;
 80009a2:	e00a      	b.n	80009ba <nRF24_SetAddr+0x92>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <nRF24_SetAddr+0x9c>)
 80009a8:	5cd2      	ldrb	r2, [r2, r3]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4610      	mov	r0, r2
 80009b2:	f7ff fddd 	bl	8000570 <nRF24_WriteReg>
			break;
 80009b6:	e000      	b.n	80009ba <nRF24_SetAddr+0x92>
		default:
			// Incorrect pipe number -> do nothing
			break;
 80009b8:	bf00      	nop
	}
}
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080042f8 	.word	0x080042f8

080009c8 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80009d2:	2006      	movs	r0, #6
 80009d4:	f7ff fdb2 	bl	800053c <nRF24_ReadReg>
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	f023 0306 	bic.w	r3, r3, #6
 80009e2:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4619      	mov	r1, r3
 80009f0:	2006      	movs	r0, #6
 80009f2:	f7ff fdbd 	bl	8000570 <nRF24_WriteReg>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f7ff fd97 	bl	800053c <nRF24_ReadReg>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a18:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4619      	mov	r1, r3
 8000a26:	2006      	movs	r0, #6
 8000a28:	f7ff fda2 	bl	8000570 <nRF24_WriteReg>
}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <nRF24_EnableAA>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Set bit in EN_AA register
	reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fd7c 	bl	800053c <nRF24_ReadReg>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
	reg |= (1 << pipe);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff fd85 	bl	8000570 <nRF24_WriteReg>
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <nRF24_GetStatus>:
	}
}

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f7ff fd62 	bl	800053c <nRF24_ReadReg>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <nRF24_GetRetransmitCounters>:

// Get auto retransmit statistic
// return: value of OBSERVE_TX register which contains two counters encoded in nibbles:
//   high - lost packets count (max value 15, can be reseted by write to RF_CH register)
//   low  - retransmitted packets count (max value 15, reseted when new transmission starts)
uint8_t nRF24_GetRetransmitCounters(void) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_OBSERVE_TX));
 8000a82:	2008      	movs	r0, #8
 8000a84:	f7ff fd5a 	bl	800053c <nRF24_ReadReg>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <nRF24_ResetPLOS>:

// Reset packet lost counter (PLOS_CNT bits in OBSERVER_TX register)
void nRF24_ResetPLOS(void) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
	uint8_t reg;

	// The PLOS counter is reset after write to RF_CH register
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
 8000a94:	2005      	movs	r0, #5
 8000a96:	f7ff fd51 	bl	800053c <nRF24_ReadReg>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f7ff fd64 	bl	8000570 <nRF24_WriteReg>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <nRF24_FlushTX>:

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8000ab4:	21ff      	movs	r1, #255	; 0xff
 8000ab6:	20e1      	movs	r0, #225	; 0xe1
 8000ab8:	f7ff fd5a 	bl	8000570 <nRF24_WriteReg>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000ac4:	21ff      	movs	r1, #255	; 0xff
 8000ac6:	20e2      	movs	r0, #226	; 0xe2
 8000ac8:	f7ff fd52 	bl	8000570 <nRF24_WriteReg>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff fd30 	bl	800053c <nRF24_ReadReg>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000ae6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2007      	movs	r0, #7
 8000aee:	f7ff fd3f 	bl	8000570 <nRF24_WriteReg>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	20a0      	movs	r0, #160	; 0xa0
 8000b0e:	f7ff fd89 	bl	8000624 <nRF24_WriteMBReg>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <nRF24_GetRxDplPayloadWidth>:

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8000b20:	f7ff fcdc 	bl	80004dc <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000b24:	2060      	movs	r0, #96	; 0x60
 8000b26:	f7ff fced 	bl	8000504 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000b2a:	20ff      	movs	r0, #255	; 0xff
 8000b2c:	f7ff fcea 	bl	8000504 <nRF24_LL_RW>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8000b34:	f7ff fcdc 	bl	80004f0 <nRF24_CSN_H>

	return value;
 8000b38:	79fb      	ldrb	r3, [r7, #7]

}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8000b52:	2007      	movs	r0, #7
 8000b54:	f7ff fcf2 	bl	800053c <nRF24_ReadReg>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	105b      	asrs	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d829      	bhi.n	8000bbe <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00f      	beq.n	8000b90 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8000b70:	f7ff ffd3 	bl	8000b1a <nRF24_GetRxDplPayloadWidth>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b20      	cmp	r3, #32
 8000b82:	d90f      	bls.n	8000ba4 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8000b8a:	f7ff ff99 	bl	8000ac0 <nRF24_FlushRX>
 8000b8e:	e009      	b.n	8000ba4 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <nRF24_ReadPayloadGeneric+0x8c>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcd0 	bl	800053c <nRF24_ReadReg>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68f9      	ldr	r1, [r7, #12]
 8000bb4:	2061      	movs	r0, #97	; 0x61
 8000bb6:	f7ff fd13 	bl	80005e0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	e003      	b.n	8000bc6 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8000bc4:	23ff      	movs	r3, #255	; 0xff
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	080042f0 	.word	0x080042f0

08000bd4 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffae 	bl	8000b44 <nRF24_ReadPayloadGeneric>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f95f 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 f80e 	bl	8000c24 <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d002      	beq.n	8000c14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	e001      	b.n	8000c18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c14:	f003 f97e 	bl	8003f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c18:	79fb      	ldrb	r3, [r7, #7]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d023      	beq.n	8000c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_InitTick+0x70>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f96b 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d809      	bhi.n	8000c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f935 	bl	8000ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_InitTick+0x74>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e007      	b.n	8000c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e001      	b.n	8000c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000004 	.word	0x20000004
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000000 	.word	0x20000000

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	20000028 	.word	0x20000028

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000028 	.word	0x20000028

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_Delay+0x40>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000004 	.word	0x20000004

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e148      	b.n	80011e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 813a 	beq.w	80011e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d00b      	beq.n	8000f8c <HAL_GPIO_Init+0x48>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f80:	2b11      	cmp	r3, #17
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b12      	cmp	r3, #18
 8000f8a:	d130      	bne.n	8000fee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 0201 	and.w	r2, r3, #1
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0xea>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b12      	cmp	r3, #18
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8094 	beq.w	80011e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b52      	ldr	r3, [pc, #328]	; (8001204 <HAL_GPIO_Init+0x2c0>)
 80010ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010bc:	4a51      	ldr	r2, [pc, #324]	; (8001204 <HAL_GPIO_Init+0x2c0>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6613      	str	r3, [r2, #96]	; 0x60
 80010c4:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <HAL_GPIO_Init+0x2c0>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x2c4>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010fa:	d00d      	beq.n	8001118 <HAL_GPIO_Init+0x1d4>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a43      	ldr	r2, [pc, #268]	; (800120c <HAL_GPIO_Init+0x2c8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d007      	beq.n	8001114 <HAL_GPIO_Init+0x1d0>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a42      	ldr	r2, [pc, #264]	; (8001210 <HAL_GPIO_Init+0x2cc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d101      	bne.n	8001110 <HAL_GPIO_Init+0x1cc>
 800110c:	2302      	movs	r3, #2
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x1d6>
 8001110:	2307      	movs	r3, #7
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x1d6>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x1d6>
 8001118:	2300      	movs	r3, #0
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800112a:	4937      	ldr	r1, [pc, #220]	; (8001208 <HAL_GPIO_Init+0x2c4>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001138:	4b36      	ldr	r3, [pc, #216]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800115c:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001186:	4a23      	ldr	r2, [pc, #140]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_GPIO_Init+0x2d0>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f aeaf 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4013      	ands	r3, r2
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43d9      	mvns	r1, r3
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	400b      	ands	r3, r1
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	4013      	ands	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f806 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40007000 	.word	0x40007000

080012e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <HAL_PWREx_GetVoltageRange+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800130e:	d130      	bne.n	8001372 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d038      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2232      	movs	r2, #50	; 0x32
 8001334:	fb02 f303 	mul.w	r3, r2, r3
 8001338:	4a1b      	ldr	r2, [pc, #108]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001344:	e002      	b.n	800134c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001358:	d102      	bne.n	8001360 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f2      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800136c:	d110      	bne.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e00f      	b.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137e:	d007      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001388:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40007000 	.word	0x40007000
 80013a4:	20000008 	.word	0x20000008
 80013a8:	431bde83 	.word	0x431bde83

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f000 bc11 	b.w	8001be2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c0:	4ba0      	ldr	r3, [pc, #640]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ca:	4b9e      	ldr	r3, [pc, #632]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80e4 	beq.w	80015aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d007      	beq.n	80013f8 <HAL_RCC_OscConfig+0x4c>
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b0c      	cmp	r3, #12
 80013ec:	f040 808b 	bne.w	8001506 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	f040 8087 	bne.w	8001506 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f8:	4b92      	ldr	r3, [pc, #584]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_OscConfig+0x64>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e3e8      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	4b8b      	ldr	r3, [pc, #556]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_RCC_OscConfig+0x7e>
 8001420:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001428:	e005      	b.n	8001436 <HAL_RCC_OscConfig+0x8a>
 800142a:	4b86      	ldr	r3, [pc, #536]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800142c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001436:	4293      	cmp	r3, r2
 8001438:	d223      	bcs.n	8001482 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fd78 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e3c9      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144e:	4b7d      	ldr	r3, [pc, #500]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7c      	ldr	r2, [pc, #496]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4977      	ldr	r1, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	4972      	ldr	r1, [pc, #456]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
 8001480:	e025      	b.n	80014ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001482:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	496a      	ldr	r1, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a0:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	4965      	ldr	r1, [pc, #404]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fd38 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e389      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014ce:	f000 fc6f 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80014d2:	4601      	mov	r1, r0
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <HAL_RCC_OscConfig+0x29c>)
 80014e0:	5cd3      	ldrb	r3, [r2, r3]
 80014e2:	f003 031f 	and.w	r3, r3, #31
 80014e6:	fa21 f303 	lsr.w	r3, r1, r3
 80014ea:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x2a0>)
 80014ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x2a4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fb96 	bl	8000c24 <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d052      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	e36d      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d032      	beq.n	8001574 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151a:	f7ff fbd3 	bl	8000cc4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001522:	f7ff fbcf 	bl	8000cc4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e356      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001534:	4b43      	ldr	r3, [pc, #268]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001540:	4b40      	ldr	r3, [pc, #256]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	493a      	ldr	r1, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4935      	ldr	r1, [pc, #212]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e01a      	b.n	80015aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a32      	ldr	r2, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001580:	f7ff fba0 	bl	8000cc4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001588:	f7ff fb9c 	bl	8000cc4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e323      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1dc>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d073      	beq.n	800169e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x21c>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d10e      	bne.n	80015e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b03      	cmp	r3, #3
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d063      	beq.n	800169c <HAL_RCC_OscConfig+0x2f0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d15f      	bne.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e300      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x24c>
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0x288>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x270>
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x288>
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_RCC_OscConfig+0x298>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb42 	bl	8000cc4 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001642:	e010      	b.n	8001666 <HAL_RCC_OscConfig+0x2ba>
 8001644:	40021000 	.word	0x40021000
 8001648:	08004304 	.word	0x08004304
 800164c:	20000008 	.word	0x20000008
 8001650:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff fb36 	bl	8000cc4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2bd      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001666:	4baf      	ldr	r3, [pc, #700]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb26 	bl	8000cc4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fb22 	bl	8000cc4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e2a9      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168e:	4ba5      	ldr	r3, [pc, #660]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x2d0>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d060      	beq.n	800176c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x310>
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d116      	bne.n	80016ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	4b99      	ldr	r3, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x328>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e286      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b93      	ldr	r3, [pc, #588]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	061b      	lsls	r3, r3, #24
 80016e2:	4990      	ldr	r1, [pc, #576]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e8:	e040      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a8b      	ldr	r2, [pc, #556]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fae1 	bl	8000cc4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fadd 	bl	8000cc4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e264      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001718:	4b82      	ldr	r3, [pc, #520]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	497c      	ldr	r1, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a79      	ldr	r2, [pc, #484]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fabd 	bl	8000cc4 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fab9 	bl	8000cc4 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e240      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001760:	4b70      	ldr	r3, [pc, #448]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01c      	beq.n	80017ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fa98 	bl	8000cc4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fa94 	bl	8000cc4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e21b      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017aa:	4b5e      	ldr	r3, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x3ec>
 80017b8:	e01b      	b.n	80017f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fa7b 	bl	8000cc4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa77 	bl	8000cc4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1fe      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e4:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80a6 	beq.w	800194c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001804:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	4a43      	ldr	r2, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	; 0x58
 800181c:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a3a      	ldr	r2, [pc, #232]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001844:	f7ff fa3e 	bl	8000cc4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff fa3a 	bl	8000cc4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e1c1      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_RCC_OscConfig+0x57c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_RCC_OscConfig+0x4d8>
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001882:	e024      	b.n	80018ce <HAL_RCC_OscConfig+0x522>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b05      	cmp	r3, #5
 800188a:	d110      	bne.n	80018ae <HAL_RCC_OscConfig+0x502>
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a24      	ldr	r2, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a20      	ldr	r2, [pc, #128]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	e00f      	b.n	80018ce <HAL_RCC_OscConfig+0x522>
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f023 0304 	bic.w	r3, r3, #4
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9f5 	bl	8000cc4 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f9f1 	bl	8000cc4 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e176      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ed      	beq.n	80018de <HAL_RCC_OscConfig+0x532>
 8001902:	e01a      	b.n	800193a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff f9de 	bl	8000cc4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff f9da 	bl	8000cc4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d906      	bls.n	800192c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e15f      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	4baa      	ldr	r3, [pc, #680]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e8      	bne.n	800190c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4ba5      	ldr	r3, [pc, #660]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4aa4      	ldr	r2, [pc, #656]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01c      	beq.n	800199a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001960:	4b9d      	ldr	r3, [pc, #628]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001966:	4a9c      	ldr	r2, [pc, #624]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f9a8 	bl	8000cc4 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001978:	f7ff f9a4 	bl	8000cc4 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e12b      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198a:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 800198c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ef      	beq.n	8001978 <HAL_RCC_OscConfig+0x5cc>
 8001998:	e01b      	b.n	80019d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800199a:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 800199c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a0:	4a8d      	ldr	r2, [pc, #564]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff f98b 	bl	8000cc4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b2:	f7ff f987 	bl	8000cc4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10e      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c4:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 80019c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ef      	bne.n	80019b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8102 	beq.w	8001be0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	f040 80c5 	bne.w	8001b70 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019e6:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d12c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	3b01      	subs	r3, #1
 8001a06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d123      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d11b      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d113      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d109      	bne.n	8001a54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	085b      	lsrs	r3, r3, #1
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d067      	beq.n	8001b24 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d062      	beq.n	8001b20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0bb      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5a      	ldr	r2, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a76:	f7ff f925 	bl	8000cc4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f921 	bl	8000cc4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0a8      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	4b51      	ldr	r3, [pc, #324]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <HAL_RCC_OscConfig+0x830>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aac:	3a01      	subs	r2, #1
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab6:	0212      	lsls	r2, r2, #8
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0552      	lsls	r2, r2, #21
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aca:	0852      	lsrs	r2, r2, #1
 8001acc:	3a01      	subs	r2, #1
 8001ace:	0652      	lsls	r2, r2, #25
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad6:	06d2      	lsls	r2, r2, #27
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	493f      	ldr	r1, [pc, #252]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001af8:	f7ff f8e4 	bl	8000cc4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f8e0 	bl	8000cc4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e067      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1e:	e05f      	b.n	8001be0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e05e      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b24:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d157      	bne.n	8001be0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b48:	f7ff f8bc 	bl	8000cc4 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f8b8 	bl	8000cc4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e03f      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x7a4>
 8001b6e:	e037      	b.n	8001be0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d02d      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b80:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b94:	f023 0303 	bic.w	r3, r3, #3
 8001b98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001ba0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f88b 	bl	8000cc4 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7ff f887 	bl	8000cc4 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e00e      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x806>
 8001bd0:	e006      	b.n	8001be0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e005      	b.n	8001be2 <HAL_RCC_OscConfig+0x836>
 8001bd6:	bf00      	nop
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0c8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4961      	ldr	r1, [pc, #388]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b0      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d04c      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e09e      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e092      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e086      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e07e      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 0203 	bic.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	493f      	ldr	r1, [pc, #252]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca6:	f7ff f80d 	bl	8000cc4 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7ff f809 	bl	8000cc4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e066      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 020c 	and.w	r2, r3, #12
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d1eb      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4924      	ldr	r1, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e036      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4918      	ldr	r1, [pc, #96]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4910      	ldr	r1, [pc, #64]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d62:	f000 f825 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe ff4c 	bl	8000c24 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08004304 	.word	0x08004304
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d11e      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e004      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d133      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e52:	e005      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e56:	617b      	str	r3, [r7, #20]
      break;
 8001e58:	e005      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5c:	617b      	str	r3, [r7, #20]
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	617b      	str	r3, [r7, #20]
      break;
 8001e64:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	3301      	adds	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	fb02 f203 	mul.w	r2, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0e5b      	lsrs	r3, r3, #25
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	0800431c 	.word	0x0800431c
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08004314 	.word	0x08004314

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f0c:	f7ff ffda 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08004314 	.word	0x08004314

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f4c:	f7ff f9ca 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f50:	6178      	str	r0, [r7, #20]
 8001f52:	e014      	b.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f9ba 	bl	80012e4 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d10b      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d919      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f90:	d902      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f92:	2302      	movs	r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e013      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e010      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d902      	bls.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e00a      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d102      	bne.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e004      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d101      	bne.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002000:	2300      	movs	r3, #0
 8002002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d02f      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002018:	d005      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800201a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800201e:	d015      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002024:	e00f      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002026:	4bac      	ldr	r3, [pc, #688]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4aab      	ldr	r2, [pc, #684]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9dc 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4ba0      	ldr	r3, [pc, #640]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	499d      	ldr	r1, [pc, #628]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8099 	beq.w	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002082:	4b95      	ldr	r3, [pc, #596]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a8e      	ldr	r2, [pc, #568]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a88      	ldr	r2, [pc, #544]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fe00 	bl	8000cc4 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c6:	e009      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fdfc 	bl	8000cc4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d902      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	74fb      	strb	r3, [r7, #19]
        break;
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020dc:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d155      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ee:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01e      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	d019      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002116:	4b70      	ldr	r3, [pc, #448]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002136:	4a68      	ldr	r2, [pc, #416]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fdbc 	bl	8000cc4 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	e00b      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fdb8 	bl	8000cc4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d902      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	74fb      	strb	r3, [r7, #19]
            break;
 8002166:	e006      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002168:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ec      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217c:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	4953      	ldr	r1, [pc, #332]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002192:	e004      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
 8002198:	e001      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219a:	7cfb      	ldrb	r3, [r7, #19]
 800219c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219e:	7c7b      	ldrb	r3, [r7, #17]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4943      	ldr	r1, [pc, #268]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f023 020c 	bic.w	r2, r3, #12
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	493a      	ldr	r1, [pc, #232]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	4932      	ldr	r1, [pc, #200]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4921      	ldr	r1, [pc, #132]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4918      	ldr	r1, [pc, #96]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4910      	ldr	r1, [pc, #64]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02c      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c8:	d10a      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ca:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4a02      	ldr	r2, [pc, #8]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d4:	60d3      	str	r3, [r2, #12]
 80022d6:	e015      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2101      	movs	r1, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f881 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d028      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	492d      	ldr	r1, [pc, #180]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232e:	d106      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	e011      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002346:	d10c      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	2101      	movs	r1, #1
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f852 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01c      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002374:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	4915      	ldr	r1, [pc, #84]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f82f 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002412:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0203 	and.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d10d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
       ||
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242a:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	091b      	lsrs	r3, r3, #4
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
       ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d044      	beq.n	80024c8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e041      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d00c      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0x6e>
 800244c:	2b03      	cmp	r3, #3
 800244e:	d013      	beq.n	8002478 <RCCEx_PLLSAI1_Config+0x80>
 8002450:	2b01      	cmp	r3, #1
 8002452:	d120      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002454:	4b5f      	ldr	r3, [pc, #380]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11d      	bne.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e01a      	b.n	800249c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002466:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002476:	e013      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10f      	bne.n	80024a4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002494:	e006      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      break;
 800249a:	e004      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800249c:	bf00      	nop
 800249e:	e002      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024a0:	bf00      	nop
 80024a2:	e000      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6819      	ldr	r1, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	3b01      	subs	r3, #1
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	430b      	orrs	r3, r1
 80024c2:	4944      	ldr	r1, [pc, #272]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d17c      	bne.n	80025c8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a40      	ldr	r2, [pc, #256]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fe fbf3 	bl	8000cc4 <HAL_GetTick>
 80024de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e0:	e009      	b.n	80024f6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024e2:	f7fe fbef 	bl	8000cc4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d902      	bls.n	80024f6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	73fb      	strb	r3, [r7, #15]
        break;
 80024f4:	e005      	b.n	8002502 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f6:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ef      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d15f      	bne.n	80025c8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d110      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800250e:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	0211      	lsls	r1, r2, #8
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68d2      	ldr	r2, [r2, #12]
 8002524:	06d2      	lsls	r2, r2, #27
 8002526:	430a      	orrs	r2, r1
 8002528:	492a      	ldr	r1, [pc, #168]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	610b      	str	r3, [r1, #16]
 800252e:	e027      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d112      	bne.n	800255c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800253e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	0211      	lsls	r1, r2, #8
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6912      	ldr	r2, [r2, #16]
 800254c:	0852      	lsrs	r2, r2, #1
 800254e:	3a01      	subs	r2, #1
 8002550:	0552      	lsls	r2, r2, #21
 8002552:	430a      	orrs	r2, r1
 8002554:	491f      	ldr	r1, [pc, #124]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002556:	4313      	orrs	r3, r2
 8002558:	610b      	str	r3, [r1, #16]
 800255a:	e011      	b.n	8002580 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	0211      	lsls	r1, r2, #8
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6952      	ldr	r2, [r2, #20]
 8002572:	0852      	lsrs	r2, r2, #1
 8002574:	3a01      	subs	r2, #1
 8002576:	0652      	lsls	r2, r2, #25
 8002578:	430a      	orrs	r2, r1
 800257a:	4916      	ldr	r1, [pc, #88]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800258a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fb9a 	bl	8000cc4 <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002592:	e009      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002594:	f7fe fb96 	bl	8000cc4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d902      	bls.n	80025a8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	73fb      	strb	r3, [r7, #15]
          break;
 80025a6:	e005      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4904      	ldr	r1, [pc, #16]	; (80025d4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e095      	b.n	8002716 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025fa:	d009      	beq.n	8002610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
 8002602:	e005      	b.n	8002610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f001 fc96 	bl	8003f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002650:	d902      	bls.n	8002658 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e002      	b.n	800265e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002666:	d007      	beq.n	8002678 <HAL_SPI_Init+0xa0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	f003 0204 	and.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b08a      	sub	sp, #40	; 0x28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_SPI_TransmitReceive+0x26>
 8002740:	2302      	movs	r3, #2
 8002742:	e1fb      	b.n	8002b3c <HAL_SPI_TransmitReceive+0x41e>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800274c:	f7fe faba 	bl	8000cc4 <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002758:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002768:	7efb      	ldrb	r3, [r7, #27]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d00e      	beq.n	800278c <HAL_SPI_TransmitReceive+0x6e>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002774:	d106      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_SPI_TransmitReceive+0x66>
 800277e:	7efb      	ldrb	r3, [r7, #27]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d003      	beq.n	800278c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800278a:	e1cd      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_SPI_TransmitReceive+0x80>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_SPI_TransmitReceive+0x80>
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80027a4:	e1c0      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2205      	movs	r2, #5
 80027b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	887a      	ldrh	r2, [r7, #2]
 80027e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027fc:	d802      	bhi.n	8002804 <HAL_SPI_TransmitReceive+0xe6>
 80027fe:	8a3b      	ldrh	r3, [r7, #16]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d908      	bls.n	8002816 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e007      	b.n	8002826 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d007      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800284c:	d97c      	bls.n	8002948 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SPI_TransmitReceive+0x13e>
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d169      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	1c9a      	adds	r2, r3, #2
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002880:	e056      	b.n	8002930 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d11b      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	2b01      	cmp	r3, #1
 800289e:	d113      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b0:	1c9a      	adds	r2, r3, #2
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d11c      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x1f2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	b292      	uxth	r2, r2
 80028ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	1c9a      	adds	r2, r3, #2
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002910:	f7fe f9d8 	bl	8000cc4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291c:	429a      	cmp	r2, r3
 800291e:	d807      	bhi.n	8002930 <HAL_SPI_TransmitReceive+0x212>
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d003      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800292e:	e0fb      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1a3      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x164>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d19d      	bne.n	8002882 <HAL_SPI_TransmitReceive+0x164>
 8002946:	e0df      	b.n	8002b08 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_SPI_TransmitReceive+0x23a>
 8002950:	8a7b      	ldrh	r3, [r7, #18]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 80cb 	bne.w	8002aee <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d912      	bls.n	8002988 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	881a      	ldrh	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b02      	subs	r3, #2
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002986:	e0b2      	b.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029ae:	e09e      	b.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d134      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02f      	beq.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d12c      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d912      	bls.n	80029fe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b02      	subs	r3, #2
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029fc:	e012      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d148      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x3aa>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d042      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d923      	bls.n	8002a96 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b02      	subs	r3, #2
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d81f      	bhi.n	8002ac4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	e016      	b.n	8002ac4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f103 020c 	add.w	r2, r3, #12
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ac8:	f7fe f8fc 	bl	8000cc4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d803      	bhi.n	8002ae0 <HAL_SPI_TransmitReceive+0x3c2>
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d102      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x3c8>
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002aec:	e01c      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f af5b 	bne.w	80029b0 <HAL_SPI_TransmitReceive+0x292>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f af54 	bne.w	80029b0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f92f 	bl	8002d70 <SPI_EndRxTxTransaction>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	661a      	str	r2, [r3, #96]	; 0x60
 8002b24:	e000      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002b26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3728      	adds	r7, #40	; 0x28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b54:	f7fe f8b6 	bl	8000cc4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b64:	f7fe f8ae 	bl	8000cc4 <HAL_GetTick>
 8002b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b6a:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	015b      	lsls	r3, r3, #5
 8002b70:	0d1b      	lsrs	r3, r3, #20
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	e054      	b.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d050      	beq.n	8002c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b84:	f7fe f89e 	bl	8000cc4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d902      	bls.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d13d      	bne.n	8002c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb2:	d111      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bbc:	d004      	beq.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d107      	bne.n	8002bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be0:	d10f      	bne.n	8002c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e017      	b.n	8002c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d19b      	bne.n	8002b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008

08002c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c62:	f7fe f82f 	bl	8000cc4 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c72:	f7fe f827 	bl	8000cc4 <HAL_GetTick>
 8002c76:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	00da      	lsls	r2, r3, #3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	0d1b      	lsrs	r3, r3, #20
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c90:	e05f      	b.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c98:	d106      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d050      	beq.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002cb0:	f7fe f808 	bl	8000cc4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13d      	bne.n	8002d42 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cde:	d111      	bne.n	8002d04 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce8:	d004      	beq.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d107      	bne.n	8002d04 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0c:	d10f      	bne.n	8002d2e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e010      	b.n	8002d64 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d197      	bne.n	8002c92 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000008 	.word	0x20000008

08002d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff ff63 	bl	8002c54 <SPI_WaitFifoStateUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d98:	f043 0220 	orr.w	r2, r3, #32
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e027      	b.n	8002df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f7ff fec8 	bl	8002b44 <SPI_WaitFlagStateUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e014      	b.n	8002df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff ff3c 	bl	8002c54 <SPI_WaitFifoStateUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e000      	b.n	8002df4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002e08:	e00c      	b.n	8002e24 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8002e18:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d101      	bne.n	8002e24 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e007      	b.n	8002e34 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1eb      	bne.n	8002e0a <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e040      	b.n	8002ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f001 f8bc 	bl	8003fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0201 	bic.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8c0 	bl	8003004 <UART_SetConfig>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e022      	b.n	8002ed4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fac4 	bl	8003424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fb4b 	bl	8003568 <UART_CheckIdleState>
 8002ed2:	4603      	mov	r3, r0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	f040 8081 	bne.w	8002ff8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <HAL_UART_Transmit+0x26>
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e079      	b.n	8002ffa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Transmit+0x38>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e072      	b.n	8002ffa <HAL_UART_Transmit+0x11e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2221      	movs	r2, #33	; 0x21
 8002f26:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002f28:	f7fd fecc 	bl	8000cc4 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d108      	bne.n	8002f5a <HAL_UART_Transmit+0x7e>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e003      	b.n	8002f62 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002f6a:	e02d      	b.n	8002fc8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fb3b 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e039      	b.n	8002ffa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	e008      	b.n	8002fb6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b292      	uxth	r2, r2
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1cb      	bne.n	8002f6c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2140      	movs	r1, #64	; 0x40
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb07 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e005      	b.n	8002ffa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003004:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003008:	b088      	sub	sp, #32
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4313      	orrs	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4bb0      	ldr	r3, [pc, #704]	; (80032f4 <UART_SetConfig+0x2f0>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	69f9      	ldr	r1, [r7, #28]
 800303a:	430b      	orrs	r3, r1
 800303c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4aa6      	ldr	r2, [pc, #664]	; (80032f8 <UART_SetConfig+0x2f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	4313      	orrs	r3, r2
 800306c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a9d      	ldr	r2, [pc, #628]	; (80032fc <UART_SetConfig+0x2f8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d121      	bne.n	80030d0 <UART_SetConfig+0xcc>
 800308c:	4b9c      	ldr	r3, [pc, #624]	; (8003300 <UART_SetConfig+0x2fc>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d816      	bhi.n	80030c8 <UART_SetConfig+0xc4>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <UART_SetConfig+0x9c>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030b7 	.word	0x080030b7
 80030ac:	080030c3 	.word	0x080030c3
 80030b0:	2301      	movs	r3, #1
 80030b2:	76fb      	strb	r3, [r7, #27]
 80030b4:	e072      	b.n	800319c <UART_SetConfig+0x198>
 80030b6:	2302      	movs	r3, #2
 80030b8:	76fb      	strb	r3, [r7, #27]
 80030ba:	e06f      	b.n	800319c <UART_SetConfig+0x198>
 80030bc:	2304      	movs	r3, #4
 80030be:	76fb      	strb	r3, [r7, #27]
 80030c0:	e06c      	b.n	800319c <UART_SetConfig+0x198>
 80030c2:	2308      	movs	r3, #8
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e069      	b.n	800319c <UART_SetConfig+0x198>
 80030c8:	2310      	movs	r3, #16
 80030ca:	76fb      	strb	r3, [r7, #27]
 80030cc:	bf00      	nop
 80030ce:	e065      	b.n	800319c <UART_SetConfig+0x198>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a8b      	ldr	r2, [pc, #556]	; (8003304 <UART_SetConfig+0x300>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d134      	bne.n	8003144 <UART_SetConfig+0x140>
 80030da:	4b89      	ldr	r3, [pc, #548]	; (8003300 <UART_SetConfig+0x2fc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d829      	bhi.n	800313c <UART_SetConfig+0x138>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0xec>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003125 	.word	0x08003125
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800313d 	.word	0x0800313d
 8003100:	08003131 	.word	0x08003131
 8003104:	0800313d 	.word	0x0800313d
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800312b 	.word	0x0800312b
 8003114:	0800313d 	.word	0x0800313d
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800313d 	.word	0x0800313d
 8003120:	08003137 	.word	0x08003137
 8003124:	2300      	movs	r3, #0
 8003126:	76fb      	strb	r3, [r7, #27]
 8003128:	e038      	b.n	800319c <UART_SetConfig+0x198>
 800312a:	2302      	movs	r3, #2
 800312c:	76fb      	strb	r3, [r7, #27]
 800312e:	e035      	b.n	800319c <UART_SetConfig+0x198>
 8003130:	2304      	movs	r3, #4
 8003132:	76fb      	strb	r3, [r7, #27]
 8003134:	e032      	b.n	800319c <UART_SetConfig+0x198>
 8003136:	2308      	movs	r3, #8
 8003138:	76fb      	strb	r3, [r7, #27]
 800313a:	e02f      	b.n	800319c <UART_SetConfig+0x198>
 800313c:	2310      	movs	r3, #16
 800313e:	76fb      	strb	r3, [r7, #27]
 8003140:	bf00      	nop
 8003142:	e02b      	b.n	800319c <UART_SetConfig+0x198>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a6b      	ldr	r2, [pc, #428]	; (80032f8 <UART_SetConfig+0x2f4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d124      	bne.n	8003198 <UART_SetConfig+0x194>
 800314e:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <UART_SetConfig+0x2fc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d012      	beq.n	8003184 <UART_SetConfig+0x180>
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d802      	bhi.n	800316a <UART_SetConfig+0x166>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <UART_SetConfig+0x174>
 8003168:	e012      	b.n	8003190 <UART_SetConfig+0x18c>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d006      	beq.n	800317e <UART_SetConfig+0x17a>
 8003170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003174:	d009      	beq.n	800318a <UART_SetConfig+0x186>
 8003176:	e00b      	b.n	8003190 <UART_SetConfig+0x18c>
 8003178:	2300      	movs	r3, #0
 800317a:	76fb      	strb	r3, [r7, #27]
 800317c:	e00e      	b.n	800319c <UART_SetConfig+0x198>
 800317e:	2302      	movs	r3, #2
 8003180:	76fb      	strb	r3, [r7, #27]
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x198>
 8003184:	2304      	movs	r3, #4
 8003186:	76fb      	strb	r3, [r7, #27]
 8003188:	e008      	b.n	800319c <UART_SetConfig+0x198>
 800318a:	2308      	movs	r3, #8
 800318c:	76fb      	strb	r3, [r7, #27]
 800318e:	e005      	b.n	800319c <UART_SetConfig+0x198>
 8003190:	2310      	movs	r3, #16
 8003192:	76fb      	strb	r3, [r7, #27]
 8003194:	bf00      	nop
 8003196:	e001      	b.n	800319c <UART_SetConfig+0x198>
 8003198:	2310      	movs	r3, #16
 800319a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <UART_SetConfig+0x2f4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d174      	bne.n	8003290 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031a6:	7efb      	ldrb	r3, [r7, #27]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d824      	bhi.n	80031f6 <UART_SetConfig+0x1f2>
 80031ac:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0x1b0>)
 80031ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b2:	bf00      	nop
 80031b4:	080031d9 	.word	0x080031d9
 80031b8:	080031f7 	.word	0x080031f7
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031f7 	.word	0x080031f7
 80031c4:	080031e7 	.word	0x080031e7
 80031c8:	080031f7 	.word	0x080031f7
 80031cc:	080031f7 	.word	0x080031f7
 80031d0:	080031f7 	.word	0x080031f7
 80031d4:	080031ef 	.word	0x080031ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7fe fe80 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80031dc:	6178      	str	r0, [r7, #20]
        break;
 80031de:	e00f      	b.n	8003200 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e0:	4b49      	ldr	r3, [pc, #292]	; (8003308 <UART_SetConfig+0x304>)
 80031e2:	617b      	str	r3, [r7, #20]
        break;
 80031e4:	e00c      	b.n	8003200 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e6:	f7fe fde3 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80031ea:	6178      	str	r0, [r7, #20]
        break;
 80031ec:	e008      	b.n	8003200 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f2:	617b      	str	r3, [r7, #20]
        break;
 80031f4:	e004      	b.n	8003200 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	76bb      	strb	r3, [r7, #26]
        break;
 80031fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 8100 	beq.w	8003408 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	d305      	bcc.n	8003224 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	d902      	bls.n	800322a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	76bb      	strb	r3, [r7, #26]
 8003228:	e0ee      	b.n	8003408 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	0214      	lsls	r4, r2, #8
 800323c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003240:	020b      	lsls	r3, r1, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6852      	ldr	r2, [r2, #4]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	4611      	mov	r1, r2
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	eb13 0b01 	adds.w	fp, r3, r1
 8003252:	eb44 0c02 	adc.w	ip, r4, r2
 8003256:	4658      	mov	r0, fp
 8003258:	4661      	mov	r1, ip
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f04f 0400 	mov.w	r4, #0
 8003262:	461a      	mov	r2, r3
 8003264:	4623      	mov	r3, r4
 8003266:	f7fc ffb9 	bl	80001dc <__aeabi_uldivmod>
 800326a:	4603      	mov	r3, r0
 800326c:	460c      	mov	r4, r1
 800326e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003276:	d308      	bcc.n	800328a <UART_SetConfig+0x286>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327e:	d204      	bcs.n	800328a <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	e0be      	b.n	8003408 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	76bb      	strb	r3, [r7, #26]
 800328e:	e0bb      	b.n	8003408 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003298:	d169      	bne.n	800336e <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 800329a:	7efb      	ldrb	r3, [r7, #27]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d835      	bhi.n	800330c <UART_SetConfig+0x308>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x2a4>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032d5 	.word	0x080032d5
 80032b0:	080032dd 	.word	0x080032dd
 80032b4:	0800330d 	.word	0x0800330d
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032eb 	.word	0x080032eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7fe fe06 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80032d0:	6178      	str	r0, [r7, #20]
        break;
 80032d2:	e020      	b.n	8003316 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d4:	f7fe fe18 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80032d8:	6178      	str	r0, [r7, #20]
        break;
 80032da:	e01c      	b.n	8003316 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <UART_SetConfig+0x304>)
 80032de:	617b      	str	r3, [r7, #20]
        break;
 80032e0:	e019      	b.n	8003316 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e2:	f7fe fd65 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80032e6:	6178      	str	r0, [r7, #20]
        break;
 80032e8:	e015      	b.n	8003316 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ee:	617b      	str	r3, [r7, #20]
        break;
 80032f0:	e011      	b.n	8003316 <UART_SetConfig+0x312>
 80032f2:	bf00      	nop
 80032f4:	efff69f3 	.word	0xefff69f3
 80032f8:	40008000 	.word	0x40008000
 80032fc:	40013800 	.word	0x40013800
 8003300:	40021000 	.word	0x40021000
 8003304:	40004400 	.word	0x40004400
 8003308:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	76bb      	strb	r3, [r7, #26]
        break;
 8003314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d075      	beq.n	8003408 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005a      	lsls	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	d916      	bls.n	8003368 <UART_SetConfig+0x364>
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d212      	bcs.n	8003368 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f023 030f 	bic.w	r3, r3, #15
 800334a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	b29b      	uxth	r3, r3
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	b29a      	uxth	r2, r3
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	4313      	orrs	r3, r2
 800335c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	89fa      	ldrh	r2, [r7, #14]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e04f      	b.n	8003408 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	76bb      	strb	r3, [r7, #26]
 800336c:	e04c      	b.n	8003408 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 800336e:	7efb      	ldrb	r3, [r7, #27]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d828      	bhi.n	80033c6 <UART_SetConfig+0x3c2>
 8003374:	a201      	add	r2, pc, #4	; (adr r2, 800337c <UART_SetConfig+0x378>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033a9 	.word	0x080033a9
 8003384:	080033b1 	.word	0x080033b1
 8003388:	080033c7 	.word	0x080033c7
 800338c:	080033b7 	.word	0x080033b7
 8003390:	080033c7 	.word	0x080033c7
 8003394:	080033c7 	.word	0x080033c7
 8003398:	080033c7 	.word	0x080033c7
 800339c:	080033bf 	.word	0x080033bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a0:	f7fe fd9c 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80033a4:	6178      	str	r0, [r7, #20]
        break;
 80033a6:	e013      	b.n	80033d0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7fe fdae 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80033ac:	6178      	str	r0, [r7, #20]
        break;
 80033ae:	e00f      	b.n	80033d0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <UART_SetConfig+0x41c>)
 80033b2:	617b      	str	r3, [r7, #20]
        break;
 80033b4:	e00c      	b.n	80033d0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b6:	f7fe fcfb 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80033ba:	6178      	str	r0, [r7, #20]
        break;
 80033bc:	e008      	b.n	80033d0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c2:	617b      	str	r3, [r7, #20]
        break;
 80033c4:	e004      	b.n	80033d0 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	76bb      	strb	r3, [r7, #26]
        break;
 80033ce:	bf00      	nop
    }

    if (pclk != 0U)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d018      	beq.n	8003408 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	085a      	lsrs	r2, r3, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	441a      	add	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d908      	bls.n	8003404 <UART_SetConfig+0x400>
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d204      	bcs.n	8003404 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	e001      	b.n	8003408 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003414:	7ebb      	ldrb	r3, [r7, #26]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003420:	00f42400 	.word	0x00f42400

08003424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01a      	beq.n	800353a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003522:	d10a      	bne.n	800353a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af02      	add	r7, sp, #8
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003576:	f7fd fba5 	bl	8000cc4 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d10e      	bne.n	80035a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f82a 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e020      	b.n	80035ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d10e      	bne.n	80035d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f814 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e00a      	b.n	80035ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	e05d      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d059      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fd fb5a 	bl	8000cc4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <UART_WaitOnFlagUntilTimeout+0x30>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11b      	bne.n	800365a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003630:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e042      	b.n	80036e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d02b      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003676:	d123      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003690:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e00f      	b.n	80036e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d092      	beq.n	8003604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ec:	f7fd fa81 	bl	8000bf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f0:	f000 f816 	bl	8003720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f4:	f000 f904 	bl	8003900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80036f8:	f000 f8d2 	bl	80038a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80036fc:	f000 f892 	bl	8003824 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_SPIEx_FlushRxFifo(&hspi1) != HAL_OK){
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <main+0x34>)
 8003702:	f7ff fb7b 	bl	8002dfc <HAL_SPIEx_FlushRxFifo>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <main+0x28>
	  Error_Handler();
 800370c:	f000 f9a8 	bl	8003a60 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  runRadio();
 8003710:	f000 fae0 	bl	8003cd4 <runRadio>
 8003714:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8003716:	4618      	mov	r0, r3
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	2000002c 	.word	0x2000002c

08003720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ac      	sub	sp, #176	; 0xb0
 8003724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800372a:	2244      	movs	r2, #68	; 0x44
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fd64 	bl	80041fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003734:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2254      	movs	r2, #84	; 0x54
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd56 	bl	80041fc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003750:	f7fd fdb8 	bl	80012c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003754:	4b32      	ldr	r3, [pc, #200]	; (8003820 <SystemClock_Config+0x100>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a31      	ldr	r2, [pc, #196]	; (8003820 <SystemClock_Config+0x100>)
 800375c:	f023 0318 	bic.w	r3, r3, #24
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003764:	2314      	movs	r3, #20
 8003766:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003768:	2301      	movs	r3, #1
 800376a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800376c:	2301      	movs	r3, #1
 800376e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003784:	2301      	movs	r3, #1
 8003786:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003790:	230a      	movs	r3, #10
 8003792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003796:	2307      	movs	r3, #7
 8003798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800379c:	2302      	movs	r3, #2
 800379e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037a2:	2302      	movs	r3, #2
 80037a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fdfd 	bl	80013ac <HAL_RCC_OscConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80037b8:	f000 f952 	bl	8003a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037bc:	230f      	movs	r3, #15
 80037be:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037c0:	2303      	movs	r3, #3
 80037c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037c8:	2300      	movs	r3, #0
 80037ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037cc:	2300      	movs	r3, #0
 80037ce:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80037d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037d4:	2104      	movs	r1, #4
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fa08 	bl	8001bec <HAL_RCC_ClockConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80037e2:	f000 f93d 	bl	8003a60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037e6:	2302      	movs	r3, #2
 80037e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fbff 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80037fc:	f000 f930 	bl	8003a60 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003800:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003804:	f7fd fd7c 	bl	8001300 <HAL_PWREx_ControlVoltageScaling>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800380e:	f000 f927 	bl	8003a60 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003812:	f7fe fde1 	bl	80023d8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003816:	bf00      	nop
 8003818:	37b0      	adds	r7, #176	; 0xb0
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <MX_SPI1_Init+0x74>)
 800382a:	4a1c      	ldr	r2, [pc, #112]	; (800389c <MX_SPI1_Init+0x78>)
 800382c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_SPI1_Init+0x74>)
 8003830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003836:	4b18      	ldr	r3, [pc, #96]	; (8003898 <MX_SPI1_Init+0x74>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800383c:	4b16      	ldr	r3, [pc, #88]	; (8003898 <MX_SPI1_Init+0x74>)
 800383e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <MX_SPI1_Init+0x74>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <MX_SPI1_Init+0x74>)
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_SPI1_Init+0x74>)
 8003852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <MX_SPI1_Init+0x74>)
 800385a:	2218      	movs	r2, #24
 800385c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <MX_SPI1_Init+0x74>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <MX_SPI1_Init+0x74>)
 8003866:	2200      	movs	r2, #0
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <MX_SPI1_Init+0x74>)
 800386c:	2200      	movs	r2, #0
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <MX_SPI1_Init+0x74>)
 8003872:	2207      	movs	r2, #7
 8003874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <MX_SPI1_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <MX_SPI1_Init+0x74>)
 800387e:	2200      	movs	r2, #0
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003882:	4805      	ldr	r0, [pc, #20]	; (8003898 <MX_SPI1_Init+0x74>)
 8003884:	f7fe fea8 	bl	80025d8 <HAL_SPI_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800388e:	f000 f8e7 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	2000002c 	.word	0x2000002c
 800389c:	40013000 	.word	0x40013000

080038a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038a4:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <MX_USART2_UART_Init+0x5c>)
 80038a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038c6:	220c      	movs	r2, #12
 80038c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d0:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MX_USART2_UART_Init+0x58>)
 80038e4:	f7ff faac 	bl	8002e40 <HAL_UART_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038ee:	f000 f8b7 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000090 	.word	0x20000090
 80038fc:	40004400 	.word	0x40004400

08003900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003916:	4b4e      	ldr	r3, [pc, #312]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <MX_GPIO_Init+0x150>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800392e:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a47      	ldr	r2, [pc, #284]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800393a:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <MX_GPIO_Init+0x150>)
 800393c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a41      	ldr	r2, [pc, #260]	; (8003a50 <MX_GPIO_Init+0x150>)
 800394c:	f043 0302 	orr.w	r3, r3, #2
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003952:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <MX_GPIO_Init+0x150>)
 8003964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <MX_GPIO_Init+0x150>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003976:	2200      	movs	r2, #0
 8003978:	2108      	movs	r1, #8
 800397a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800397e:	f7fd fc4b 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8003982:	2201      	movs	r2, #1
 8003984:	2110      	movs	r1, #16
 8003986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398a:	f7fd fc45 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2108      	movs	r1, #8
 8003992:	4830      	ldr	r0, [pc, #192]	; (8003a54 <MX_GPIO_Init+0x154>)
 8003994:	f7fd fc40 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003998:	f641 7302 	movw	r3, #7938	; 0x1f02
 800399c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800399e:	2303      	movs	r3, #3
 80039a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b0:	f7fd fac8 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80039b4:	2318      	movs	r3, #24
 80039b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ce:	f7fd fab9 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <MX_GPIO_Init+0x158>)
 80039d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039da:	2301      	movs	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	4619      	mov	r1, r3
 80039e4:	481b      	ldr	r0, [pc, #108]	; (8003a54 <MX_GPIO_Init+0x154>)
 80039e6:	f7fd faad 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80039ea:	23f2      	movs	r3, #242	; 0xf2
 80039ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ee:	2303      	movs	r3, #3
 80039f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	4619      	mov	r1, r3
 80039fc:	4815      	ldr	r0, [pc, #84]	; (8003a54 <MX_GPIO_Init+0x154>)
 80039fe:	f7fd faa1 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003a02:	2308      	movs	r3, #8
 8003a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003a12:	f107 0314 	add.w	r3, r7, #20
 8003a16:	4619      	mov	r1, r3
 8003a18:	480e      	ldr	r0, [pc, #56]	; (8003a54 <MX_GPIO_Init+0x154>)
 8003a1a:	f7fd fa93 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a22:	2303      	movs	r3, #3
 8003a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <MX_GPIO_Init+0x15c>)
 8003a32:	f7fd fa87 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003a36:	2200      	movs	r2, #0
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2006      	movs	r0, #6
 8003a3c:	f7fd fa4b 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a40:	2006      	movs	r0, #6
 8003a42:	f7fd fa64 	bl	8000f0e <HAL_NVIC_EnableIRQ>

}
 8003a46:	bf00      	nop
 8003a48:	3728      	adds	r7, #40	; 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	48000400 	.word	0x48000400
 8003a58:	10210000 	.word	0x10210000
 8003a5c:	48001c00 	.word	0x48001c00

08003a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2108      	movs	r1, #8
 8003a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7a:	f7fd fbcd 	bl	8001218 <HAL_GPIO_WritePin>
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <nRF24_CE_H>:
static inline void nRF24_CE_H() {
 8003a82:	b580      	push	{r7, lr}
 8003a84:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8003a86:	2201      	movs	r2, #1
 8003a88:	2108      	movs	r1, #8
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f7fd fbc3 	bl	8001218 <HAL_GPIO_WritePin>
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <Delay_ms>:


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f91c 	bl	8000cdc <HAL_Delay>
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart2;

void UART_SendChar(char b) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
 8003ab6:	1df9      	adds	r1, r7, #7
 8003ab8:	23c8      	movs	r3, #200	; 0xc8
 8003aba:	2201      	movs	r2, #1
 8003abc:	4803      	ldr	r0, [pc, #12]	; (8003acc <UART_SendChar+0x20>)
 8003abe:	f7ff fa0d 	bl	8002edc <HAL_UART_Transmit>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000090 	.word	0x20000090

08003ad0 <UART_SendStr>:

void UART_SendStr(char *string) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fc fb77 	bl	80001cc <strlen>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	23c8      	movs	r3, #200	; 0xc8
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4803      	ldr	r0, [pc, #12]	; (8003af4 <UART_SendStr+0x24>)
 8003ae8:	f7ff f9f8 	bl	8002edc <HAL_UART_Transmit>
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000090 	.word	0x20000090

08003af8 <Toggle_LED>:

void Toggle_LED() {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8003afc:	2108      	movs	r1, #8
 8003afe:	4802      	ldr	r0, [pc, #8]	; (8003b08 <Toggle_LED+0x10>)
 8003b00:	f7fd fba2 	bl	8001248 <HAL_GPIO_TogglePin>
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	48000400 	.word	0x48000400

08003b0c <UART_SendBufHex>:
	LL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
	uint16_t i;
	char ch;
	for (i = 0; i < bufsize; i++) {
 8003b18:	2300      	movs	r3, #0
 8003b1a:	81fb      	strh	r3, [r7, #14]
 8003b1c:	e018      	b.n	8003b50 <UART_SendBufHex+0x44>
		ch = *buf++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	737b      	strb	r3, [r7, #13]
		UART_SendChar(HEX_CHARS[(ch >> 4)   % 0x10]);
 8003b28:	7b7b      	ldrb	r3, [r7, #13]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <UART_SendBufHex+0x54>)
 8003b32:	5c9b      	ldrb	r3, [r3, r2]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ffb9 	bl	8003aac <UART_SendChar>
		UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8003b3a:	7b7b      	ldrb	r3, [r7, #13]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <UART_SendBufHex+0x54>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ffb1 	bl	8003aac <UART_SendChar>
	for (i = 0; i < bufsize; i++) {
 8003b4a:	89fb      	ldrh	r3, [r7, #14]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	81fb      	strh	r3, [r7, #14]
 8003b50:	89fa      	ldrh	r2, [r7, #14]
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3e2      	bcc.n	8003b1e <UART_SendBufHex+0x12>
	}
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	0800422c 	.word	0x0800422c

08003b64 <UART_SendHex8>:
void UART_SendHex8(uint16_t num) {
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
	UART_SendChar(HEX_CHARS[(num >> 4)   % 0x10]);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <UART_SendHex8+0x38>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff95 	bl	8003aac <UART_SendChar>
	UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <UART_SendHex8+0x38>)
 8003b8a:	5cd3      	ldrb	r3, [r2, r3]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff ff8d 	bl	8003aac <UART_SendChar>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	0800422c 	.word	0x0800422c

08003ba0 <UART_SendInt>:

void UART_SendInt(int32_t num) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	char str[10]; // 10 chars max for INT32_MAX
	int i = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
	if (num < 0) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da05      	bge.n	8003bbe <UART_SendInt+0x1e>
		UART_SendChar('-');
 8003bb2:	202d      	movs	r0, #45	; 0x2d
 8003bb4:	f7ff ff7a 	bl	8003aac <UART_SendChar>
		num *= -1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	425b      	negs	r3, r3
 8003bbc:	607b      	str	r3, [r7, #4]
	}
	do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <UART_SendInt+0x90>)
 8003bc2:	fb83 1302 	smull	r1, r3, r3, r2
 8003bc6:	1099      	asrs	r1, r3, #2
 8003bc8:	17d3      	asrs	r3, r2, #31
 8003bca:	1ac9      	subs	r1, r1, r3
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	1ad1      	subs	r1, r2, r3
 8003bd6:	b2ca      	uxtb	r2, r1
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1c59      	adds	r1, r3, #1
 8003bdc:	6179      	str	r1, [r7, #20]
 8003bde:	3230      	adds	r2, #48	; 0x30
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f107 0118 	add.w	r1, r7, #24
 8003be6:	440b      	add	r3, r1
 8003be8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <UART_SendInt+0x90>)
 8003bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8003bf4:	1092      	asrs	r2, r2, #2
 8003bf6:	17db      	asrs	r3, r3, #31
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	dcdd      	bgt.n	8003bbe <UART_SendInt+0x1e>
	for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e00a      	b.n	8003c20 <UART_SendInt+0x80>
 8003c0a:	f107 0208 	add.w	r2, r7, #8
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff49 	bl	8003aac <UART_SendChar>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	daf1      	bge.n	8003c0a <UART_SendInt+0x6a>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	66666667 	.word	0x66666667

08003c34 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <nRF24_TransmitPacket+0x94>)
 8003c42:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8003c44:	f7ff ff13 	bl	8003a6e <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fc ff54 	bl	8000afa <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8003c52:	f7ff ff16 	bl	8003a82 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8003c56:	f7fc ff0a 	bl	8000a6e <nRF24_GetStatus>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	1e5a      	subs	r2, r3, #1
 8003c6c:	60ba      	str	r2, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f1      	bne.n	8003c56 <nRF24_TransmitPacket+0x22>
 8003c72:	e000      	b.n	8003c76 <nRF24_TransmitPacket+0x42>
			break;
 8003c74:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8003c76:	f7ff fefa 	bl	8003a6e <nRF24_CE_L>

	if (!wait) {
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8003c80:	2302      	movs	r3, #2
 8003c82:	e01d      	b.n	8003cc0 <nRF24_TransmitPacket+0x8c>
	}

	// Check the flags in STATUS register
	UART_SendStr("[");
 8003c84:	4811      	ldr	r0, [pc, #68]	; (8003ccc <nRF24_TransmitPacket+0x98>)
 8003c86:	f7ff ff23 	bl	8003ad0 <UART_SendStr>
	UART_SendHex8(status);
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ff68 	bl	8003b64 <UART_SendHex8>
	UART_SendStr("] ");
 8003c94:	480e      	ldr	r0, [pc, #56]	; (8003cd0 <nRF24_TransmitPacket+0x9c>)
 8003c96:	f7ff ff1b 	bl	8003ad0 <UART_SendStr>

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8003c9a:	f7fc ff19 	bl	8000ad0 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <nRF24_TransmitPacket+0x78>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e009      	b.n	8003cc0 <nRF24_TransmitPacket+0x8c>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <nRF24_TransmitPacket+0x86>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e002      	b.n	8003cc0 <nRF24_TransmitPacket+0x8c>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8003cba:	f7fc fef9 	bl	8000ab0 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	000fffff 	.word	0x000fffff
 8003ccc:	08004240 	.word	0x08004240
 8003cd0:	08004244 	.word	0x08004244

08003cd4 <runRadio>:

#endif // DEMO_TX_



int runRadio(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
	UART_SendStr("\r\nSTM32L432KC is online.\r\n");
 8003cda:	4878      	ldr	r0, [pc, #480]	; (8003ebc <runRadio+0x1e8>)
 8003cdc:	f7ff fef8 	bl	8003ad0 <UART_SendStr>

	// RX/TX disabled
	nRF24_CE_L();
 8003ce0:	f7ff fec5 	bl	8003a6e <nRF24_CE_L>
	HAL_Delay(1000);
 8003ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce8:	f7fc fff8 	bl	8000cdc <HAL_Delay>

	// Configure the nRF24L01+
	UART_SendStr("nRF24L01+ check: ");
 8003cec:	4874      	ldr	r0, [pc, #464]	; (8003ec0 <runRadio+0x1ec>)
 8003cee:	f7ff feef 	bl	8003ad0 <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
	if (!nRF24_Check()) {
 8003cf2:	f7fc fd05 	bl	8000700 <nRF24_Check>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d108      	bne.n	8003d0e <runRadio+0x3a>
		UART_SendStr("FAIL\r\n");
 8003cfc:	4871      	ldr	r0, [pc, #452]	; (8003ec4 <runRadio+0x1f0>)
 8003cfe:	f7ff fee7 	bl	8003ad0 <UART_SendStr>
		while (1) {
			Toggle_LED();
 8003d02:	f7ff fef9 	bl	8003af8 <Toggle_LED>
			Delay_ms(50);
 8003d06:	2032      	movs	r0, #50	; 0x32
 8003d08:	f7ff fec5 	bl	8003a96 <Delay_ms>
			Toggle_LED();
 8003d0c:	e7f9      	b.n	8003d02 <runRadio+0x2e>
		}
	}
// #pragma clang diagnostic pop
	UART_SendStr("OK\r\n");
 8003d0e:	486e      	ldr	r0, [pc, #440]	; (8003ec8 <runRadio+0x1f4>)
 8003d10:	f7ff fede 	bl	8003ad0 <UART_SendStr>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8003d14:	f7fc fca7 	bl	8000666 <nRF24_Init>
	//   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8003d18:	2028      	movs	r0, #40	; 0x28
 8003d1a:	f7fc fdcc 	bl	80008b6 <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8003d1e:	2008      	movs	r0, #8
 8003d20:	f7fc fe6d 	bl	80009fe <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8003d24:	200c      	movs	r0, #12
 8003d26:	f7fc fda5 	bl	8000874 <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8003d2a:	2003      	movs	r0, #3
 8003d2c:	f7fc fdec 	bl	8000908 <nRF24_SetAddrWidth>

    // Configure TX PIPE
    static const uint8_t nRF24_ADDR[] = { 'E', 'S', 'B' };
    nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR); // program TX address
 8003d30:	4966      	ldr	r1, [pc, #408]	; (8003ecc <runRadio+0x1f8>)
 8003d32:	2006      	movs	r0, #6
 8003d34:	f7fc fdf8 	bl	8000928 <nRF24_SetAddr>
    nRF24_SetAddr(nRF24_PIPE0, nRF24_ADDR); // program address for pipe#0, must be same as TX (for Auto-ACK)
 8003d38:	4964      	ldr	r1, [pc, #400]	; (8003ecc <runRadio+0x1f8>)
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7fc fdf4 	bl	8000928 <nRF24_SetAddr>

    // Set TX power (maximum)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8003d40:	2006      	movs	r0, #6
 8003d42:	f7fc fe41 	bl	80009c8 <nRF24_SetTXPower>

    // Configure auto retransmit: 10 retransmissions with pause of 2500s in between
    nRF24_SetAutoRetr(nRF24_ARD_2500us, 10);
 8003d46:	210a      	movs	r1, #10
 8003d48:	2009      	movs	r0, #9
 8003d4a:	f7fc fdc2 	bl	80008d2 <nRF24_SetAutoRetr>

    // Enable Auto-ACK for pipe#0 (for ACK packets)
    nRF24_EnableAA(nRF24_PIPE0);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fc fe70 	bl	8000a34 <nRF24_EnableAA>

    // Set operational mode (PTX == transmitter)
    nRF24_SetOperationalMode(nRF24_MODE_TX);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fc fd20 	bl	800079a <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8003d5a:	f7fc feb9 	bl	8000ad0 <nRF24_ClearIRQFlags>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f7fc fd3c 	bl	80007dc <nRF24_SetDynamicPayloadLength>
	nRF24_SetPayloadWithAck(1);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fc fd63 	bl	8000830 <nRF24_SetPayloadWithAck>


	// Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8003d6a:	2002      	movs	r0, #2
 8003d6c:	f7fc fcf6 	bl	800075c <nRF24_SetPowerMode>


    // Some variables
    uint32_t packets_lost = 0; // global counter of lost packets
 8003d70:	2300      	movs	r3, #0
 8003d72:	607b      	str	r3, [r7, #4]
    uint8_t otx_plos_cnt; // lost packet count
	uint8_t otx_arc_cnt; // retransmit count


    // The main loop
    j = 0;
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <runRadio+0x1fc>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    while (1) {
// #pragma clang diagnostic pop

		payload_length = (uint8_t)(2 + (j + j /10)% 7);
 8003d7a:	4b55      	ldr	r3, [pc, #340]	; (8003ed0 <runRadio+0x1fc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a55      	ldr	r2, [pc, #340]	; (8003ed4 <runRadio+0x200>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <runRadio+0x1fc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	441a      	add	r2, r3
 8003d8c:	4b52      	ldr	r3, [pc, #328]	; (8003ed8 <runRadio+0x204>)
 8003d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d92:	1ad1      	subs	r1, r2, r3
 8003d94:	0849      	lsrs	r1, r1, #1
 8003d96:	440b      	add	r3, r1
 8003d98:	0899      	lsrs	r1, r3, #2
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a5b      	subs	r3, r3, r1
 8003da0:	1ad1      	subs	r1, r2, r3
 8003da2:	b2cb      	uxtb	r3, r1
 8003da4:	3302      	adds	r3, #2
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b4c      	ldr	r3, [pc, #304]	; (8003edc <runRadio+0x208>)
 8003daa:	701a      	strb	r2, [r3, #0]

		// Prepare data packet
    	for (i = 0; i < payload_length; i++) {
 8003dac:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <runRadio+0x20c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e015      	b.n	8003de0 <runRadio+0x10c>
    		nRF24_payload[i] = (uint8_t) j++;
 8003db4:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <runRadio+0x1fc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	4945      	ldr	r1, [pc, #276]	; (8003ed0 <runRadio+0x1fc>)
 8003dbc:	600a      	str	r2, [r1, #0]
 8003dbe:	4a48      	ldr	r2, [pc, #288]	; (8003ee0 <runRadio+0x20c>)
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <runRadio+0x210>)
 8003dc6:	5499      	strb	r1, [r3, r2]
    		if (j > 0x000000FF) j = 0;
 8003dc8:	4b41      	ldr	r3, [pc, #260]	; (8003ed0 <runRadio+0x1fc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2bff      	cmp	r3, #255	; 0xff
 8003dce:	d902      	bls.n	8003dd6 <runRadio+0x102>
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <runRadio+0x1fc>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
    	for (i = 0; i < payload_length; i++) {
 8003dd6:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <runRadio+0x20c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <runRadio+0x20c>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <runRadio+0x208>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <runRadio+0x20c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d8e2      	bhi.n	8003db4 <runRadio+0xe0>
    	}

    	// Print a payload
    	UART_SendStr("PAYLOAD:>");
 8003dee:	483e      	ldr	r0, [pc, #248]	; (8003ee8 <runRadio+0x214>)
 8003df0:	f7ff fe6e 	bl	8003ad0 <UART_SendStr>
    	UART_SendBufHex((char *)nRF24_payload, payload_length);
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <runRadio+0x208>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4839      	ldr	r0, [pc, #228]	; (8003ee4 <runRadio+0x210>)
 8003dfe:	f7ff fe85 	bl	8003b0c <UART_SendBufHex>
    	UART_SendStr("< ... TX: ");
 8003e02:	483a      	ldr	r0, [pc, #232]	; (8003eec <runRadio+0x218>)
 8003e04:	f7ff fe64 	bl	8003ad0 <UART_SendStr>

    	// Transmit a packet
    	tx_res = nRF24_TransmitPacket(nRF24_payload, payload_length);
 8003e08:	4b34      	ldr	r3, [pc, #208]	; (8003edc <runRadio+0x208>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4835      	ldr	r0, [pc, #212]	; (8003ee4 <runRadio+0x210>)
 8003e10:	f7ff ff10 	bl	8003c34 <nRF24_TransmitPacket>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <runRadio+0x21c>)
 8003e1a:	701a      	strb	r2, [r3, #0]
		otx = nRF24_GetRetransmitCounters();
 8003e1c:	f7fc fe2f 	bl	8000a7e <nRF24_GetRetransmitCounters>
 8003e20:	4603      	mov	r3, r0
 8003e22:	70fb      	strb	r3, [r7, #3]
		nRF24_ReadPayloadDpl(nRF24_payload, &payload_length );
 8003e24:	492d      	ldr	r1, [pc, #180]	; (8003edc <runRadio+0x208>)
 8003e26:	482f      	ldr	r0, [pc, #188]	; (8003ee4 <runRadio+0x210>)
 8003e28:	f7fc fed4 	bl	8000bd4 <nRF24_ReadPayloadDpl>
		otx_plos_cnt = (otx & nRF24_MASK_PLOS_CNT) >> 4; // packets lost counter
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	70bb      	strb	r3, [r7, #2]
		otx_arc_cnt  = (otx & nRF24_MASK_ARC_CNT); // auto retransmissions counter
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	707b      	strb	r3, [r7, #1]
    	switch (tx_res) {
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <runRadio+0x21c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d007      	beq.n	8003e52 <runRadio+0x17e>
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d009      	beq.n	8003e5a <runRadio+0x186>
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d111      	bne.n	8003e6e <runRadio+0x19a>
			case nRF24_TX_SUCCESS:
				UART_SendStr("OK");
 8003e4a:	482a      	ldr	r0, [pc, #168]	; (8003ef4 <runRadio+0x220>)
 8003e4c:	f7ff fe40 	bl	8003ad0 <UART_SendStr>
				break;
 8003e50:	e011      	b.n	8003e76 <runRadio+0x1a2>
			case nRF24_TX_TIMEOUT:
				UART_SendStr("TIMEOUT");
 8003e52:	4829      	ldr	r0, [pc, #164]	; (8003ef8 <runRadio+0x224>)
 8003e54:	f7ff fe3c 	bl	8003ad0 <UART_SendStr>
				break;
 8003e58:	e00d      	b.n	8003e76 <runRadio+0x1a2>
			case nRF24_TX_MAXRT:
				UART_SendStr("MAX RETRANSMIT");
 8003e5a:	4828      	ldr	r0, [pc, #160]	; (8003efc <runRadio+0x228>)
 8003e5c:	f7ff fe38 	bl	8003ad0 <UART_SendStr>
				packets_lost += otx_plos_cnt;
 8003e60:	78bb      	ldrb	r3, [r7, #2]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	607b      	str	r3, [r7, #4]
				nRF24_ResetPLOS();
 8003e68:	f7fc fe11 	bl	8000a8e <nRF24_ResetPLOS>
				break;
 8003e6c:	e003      	b.n	8003e76 <runRadio+0x1a2>
			default:
				UART_SendStr("ERROR");
 8003e6e:	4824      	ldr	r0, [pc, #144]	; (8003f00 <runRadio+0x22c>)
 8003e70:	f7ff fe2e 	bl	8003ad0 <UART_SendStr>
				break;
 8003e74:	bf00      	nop
		}
		UART_SendStr("   ACK_PAYLOAD=>");
 8003e76:	4823      	ldr	r0, [pc, #140]	; (8003f04 <runRadio+0x230>)
 8003e78:	f7ff fe2a 	bl	8003ad0 <UART_SendStr>
    	UART_SendBufHex((char *) nRF24_payload, payload_length);
 8003e7c:	4b17      	ldr	r3, [pc, #92]	; (8003edc <runRadio+0x208>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	4817      	ldr	r0, [pc, #92]	; (8003ee4 <runRadio+0x210>)
 8003e86:	f7ff fe41 	bl	8003b0c <UART_SendBufHex>
    	UART_SendStr("<   ARC=");
 8003e8a:	481f      	ldr	r0, [pc, #124]	; (8003f08 <runRadio+0x234>)
 8003e8c:	f7ff fe20 	bl	8003ad0 <UART_SendStr>
		UART_SendInt(otx_arc_cnt);
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fe84 	bl	8003ba0 <UART_SendInt>
		UART_SendStr(" LOST=");
 8003e98:	481c      	ldr	r0, [pc, #112]	; (8003f0c <runRadio+0x238>)
 8003e9a:	f7ff fe19 	bl	8003ad0 <UART_SendStr>
		UART_SendInt(packets_lost);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fe7d 	bl	8003ba0 <UART_SendInt>
		UART_SendStr("\r\n");
 8003ea6:	481a      	ldr	r0, [pc, #104]	; (8003f10 <runRadio+0x23c>)
 8003ea8:	f7ff fe12 	bl	8003ad0 <UART_SendStr>

    	// Wait ~0.5s
    	Delay_ms(500);
 8003eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eb0:	f7ff fdf1 	bl	8003a96 <Delay_ms>
		Toggle_LED();
 8003eb4:	f7ff fe20 	bl	8003af8 <Toggle_LED>
		payload_length = (uint8_t)(2 + (j + j /10)% 7);
 8003eb8:	e75f      	b.n	8003d7a <runRadio+0xa6>
 8003eba:	bf00      	nop
 8003ebc:	08004248 	.word	0x08004248
 8003ec0:	08004264 	.word	0x08004264
 8003ec4:	08004278 	.word	0x08004278
 8003ec8:	08004280 	.word	0x08004280
 8003ecc:	08004300 	.word	0x08004300
 8003ed0:	20000114 	.word	0x20000114
 8003ed4:	cccccccd 	.word	0xcccccccd
 8003ed8:	24924925 	.word	0x24924925
 8003edc:	20000111 	.word	0x20000111
 8003ee0:	20000120 	.word	0x20000120
 8003ee4:	20000124 	.word	0x20000124
 8003ee8:	08004288 	.word	0x08004288
 8003eec:	08004294 	.word	0x08004294
 8003ef0:	20000110 	.word	0x20000110
 8003ef4:	080042a0 	.word	0x080042a0
 8003ef8:	080042a4 	.word	0x080042a4
 8003efc:	080042ac 	.word	0x080042ac
 8003f00:	080042bc 	.word	0x080042bc
 8003f04:	080042c4 	.word	0x080042c4
 8003f08:	080042d8 	.word	0x080042d8
 8003f0c:	080042e4 	.word	0x080042e4
 8003f10:	080042ec 	.word	0x080042ec

08003f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_MspInit+0x44>)
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_MspInit+0x44>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6613      	str	r3, [r2, #96]	; 0x60
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_MspInit+0x44>)
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_MspInit+0x44>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_MspInit+0x44>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x44>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_SPI_MspInit+0x7c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d128      	bne.n	8003fd0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f88:	6613      	str	r3, [r2, #96]	; 0x60
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_SPI_MspInit+0x80>)
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fae:	23e0      	movs	r3, #224	; 0xe0
 8003fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fcc:	f7fc ffba 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fd0:	bf00      	nop
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40013000 	.word	0x40013000
 8003fdc:	40021000 	.word	0x40021000

08003fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a20      	ldr	r2, [pc, #128]	; (8004080 <HAL_UART_MspInit+0xa0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d13a      	bne.n	8004078 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_UART_MspInit+0xa4>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <HAL_UART_MspInit+0xa4>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	6593      	str	r3, [r2, #88]	; 0x58
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_UART_MspInit+0xa4>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_UART_MspInit+0xa4>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401e:	4a19      	ldr	r2, [pc, #100]	; (8004084 <HAL_UART_MspInit+0xa4>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004026:	4b17      	ldr	r3, [pc, #92]	; (8004084 <HAL_UART_MspInit+0xa4>)
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004032:	2304      	movs	r3, #4
 8004034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004036:	2302      	movs	r3, #2
 8004038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403e:	2303      	movs	r3, #3
 8004040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004042:	2307      	movs	r3, #7
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004046:	f107 0314 	add.w	r3, r7, #20
 800404a:	4619      	mov	r1, r3
 800404c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004050:	f7fc ff78 	bl	8000f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405a:	2302      	movs	r3, #2
 800405c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004062:	2303      	movs	r3, #3
 8004064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004066:	2303      	movs	r3, #3
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800406a:	f107 0314 	add.w	r3, r7, #20
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004074:	f7fc ff66 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	; 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40004400 	.word	0x40004400
 8004084:	40021000 	.word	0x40021000

08004088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004096:	b480      	push	{r7}
 8004098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409a:	e7fe      	b.n	800409a <HardFault_Handler+0x4>

0800409c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a0:	e7fe      	b.n	80040a0 <MemManage_Handler+0x4>

080040a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040a6:	e7fe      	b.n	80040a6 <BusFault_Handler+0x4>

080040a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040ac:	e7fe      	b.n	80040ac <UsageFault_Handler+0x4>

080040ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040dc:	f7fc fdde 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7fd f8c7 	bl	800127c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <SystemInit+0x64>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <SystemInit+0x64>)
 8004100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004108:	4b14      	ldr	r3, [pc, #80]	; (800415c <SystemInit+0x68>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a13      	ldr	r2, [pc, #76]	; (800415c <SystemInit+0x68>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <SystemInit+0x68>)
 8004116:	2200      	movs	r2, #0
 8004118:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <SystemInit+0x68>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a0f      	ldr	r2, [pc, #60]	; (800415c <SystemInit+0x68>)
 8004120:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004124:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004128:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800412a:	4b0c      	ldr	r3, [pc, #48]	; (800415c <SystemInit+0x68>)
 800412c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004130:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <SystemInit+0x68>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <SystemInit+0x68>)
 8004138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <SystemInit+0x68>)
 8004140:	2200      	movs	r2, #0
 8004142:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SystemInit+0x64>)
 8004146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800414a:	609a      	str	r2, [r3, #8]
#endif
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000ed00 	.word	0xe000ed00
 800415c:	40021000 	.word	0x40021000

08004160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004164:	f7ff ffc6 	bl	80040f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004168:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800416a:	e003      	b.n	8004174 <LoopCopyDataInit>

0800416c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800416e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004170:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004172:	3104      	adds	r1, #4

08004174 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004174:	480a      	ldr	r0, [pc, #40]	; (80041a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004178:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800417a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800417c:	d3f6      	bcc.n	800416c <CopyDataInit>
	ldr	r2, =_sbss
 800417e:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004180:	e002      	b.n	8004188 <LoopFillZerobss>

08004182 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004182:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004184:	f842 3b04 	str.w	r3, [r2], #4

08004188 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <LoopForever+0x16>)
	cmp	r2, r3
 800418a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800418c:	d3f9      	bcc.n	8004182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800418e:	f000 f811 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004192:	f7ff faa9 	bl	80036e8 <main>

08004196 <LoopForever>:

LoopForever:
    b LoopForever
 8004196:	e7fe      	b.n	8004196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004198:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800419c:	0800435c 	.word	0x0800435c
	ldr	r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80041a4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80041a8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80041ac:	20000144 	.word	0x20000144

080041b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041b0:	e7fe      	b.n	80041b0 <ADC1_IRQHandler>
	...

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4e0d      	ldr	r6, [pc, #52]	; (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1ba4      	subs	r4, r4, r6
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2500      	movs	r5, #0
 80041c0:	42a5      	cmp	r5, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4e0b      	ldr	r6, [pc, #44]	; (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	; (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 f820 	bl	800420c <_init>
 80041cc:	1ba4      	subs	r4, r4, r6
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2500      	movs	r5, #0
 80041d2:	42a5      	cmp	r5, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041dc:	4798      	blx	r3
 80041de:	3501      	adds	r5, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041e6:	4798      	blx	r3
 80041e8:	3501      	adds	r5, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	08004354 	.word	0x08004354
 80041f0:	08004354 	.word	0x08004354
 80041f4:	08004354 	.word	0x08004354
 80041f8:	08004358 	.word	0x08004358

080041fc <memset>:
 80041fc:	4402      	add	r2, r0
 80041fe:	4603      	mov	r3, r0
 8004200:	4293      	cmp	r3, r2
 8004202:	d100      	bne.n	8004206 <memset+0xa>
 8004204:	4770      	bx	lr
 8004206:	f803 1b01 	strb.w	r1, [r3], #1
 800420a:	e7f9      	b.n	8004200 <memset+0x4>

0800420c <_init>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr

08004218 <_fini>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	bf00      	nop
 800421c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421e:	bc08      	pop	{r3}
 8004220:	469e      	mov	lr, r3
 8004222:	4770      	bx	lr
