
Nucleo_F411RE_NRF24L01_TFT_Receiver_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000486c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000230c  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d18  08006d18  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000068  08006d88  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08006d88  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea99  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ed  00000000  00000000  0002eb31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00030c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001755f  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bec  00000000  00000000  000498b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000899b4  00000000  00000000  000534a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dce57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  000dced4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080049ec 	.word	0x080049ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080049ec 	.word	0x080049ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f002 f9ed 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f817 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f8df 	bl	80006b8 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004fa:	f000 f87d 	bl	80005f8 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f8b1 	bl	8000664 <MX_USART2_UART_Init>

  /* Check the availability of adafruit 1.8" TFT shield on top of STM32NUCLEO
       board. This is done by reading the state of IO PB.00 pin (mapped to JoyStick
       available on adafruit 1.8" TFT shield). If the state of PB.00 is high then
       the adafruit 1.8" TFT shield is available. */
    if(TFT_ShieldDetect() == SHIELD_DETECTED)
 8000502:	f000 f9e5 	bl	80008d0 <TFT_ShieldDetect>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d106      	bne.n	800051a <main+0x32>
    {
      /* Initialize the LCD */
    	uint8_t ret = BSP_LCD_Init();
 800050c:	f000 fd68 	bl	8000fe0 <BSP_LCD_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]

      TFT_DisplayMenu();
 8000514:	f000 fa0a 	bl	800092c <TFT_DisplayMenu>
 8000518:	e001      	b.n	800051e <main+0x36>

    }
    else /* Shield not mounted */
    {
      Error_Handler();
 800051a:	f000 fa23 	bl	8000964 <Error_Handler>
    }

  runRadio();
 800051e:	f000 faf1 	bl	8000b04 <runRadio>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x3a>

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fa52 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000594:	2310      	movs	r3, #16
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 8000598:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059e:	2308      	movs	r3, #8
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fdfc 	bl	80031a8 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9d5 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f856 	bl	8003688 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 f9bf 	bl	8000964 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_SPI3_Init+0x64>)
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_SPI3_Init+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_SPI3_Init+0x64>)
 8000604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000608:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_SPI3_Init+0x64>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_SPI3_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_SPI3_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_SPI3_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_SPI3_Init+0x64>)
 8000624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000628:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_SPI3_Init+0x64>)
 800062c:	2208      	movs	r2, #8
 800062e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_SPI3_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SPI3_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_SPI3_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SPI3_Init+0x64>)
 8000644:	220a      	movs	r2, #10
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_SPI3_Init+0x64>)
 800064a:	f003 fa0f 	bl	8003a6c <HAL_SPI_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 f986 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200006cc 	.word	0x200006cc
 8000660:	40003c00 	.word	0x40003c00

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f003 fcce 	bl	800403c <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f95d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000724 	.word	0x20000724
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b53      	ldr	r3, [pc, #332]	; (8000820 <MX_GPIO_Init+0x168>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a52      	ldr	r2, [pc, #328]	; (8000820 <MX_GPIO_Init+0x168>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b50      	ldr	r3, [pc, #320]	; (8000820 <MX_GPIO_Init+0x168>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b4c      	ldr	r3, [pc, #304]	; (8000820 <MX_GPIO_Init+0x168>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a4b      	ldr	r2, [pc, #300]	; (8000820 <MX_GPIO_Init+0x168>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b49      	ldr	r3, [pc, #292]	; (8000820 <MX_GPIO_Init+0x168>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b45      	ldr	r3, [pc, #276]	; (8000820 <MX_GPIO_Init+0x168>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a44      	ldr	r2, [pc, #272]	; (8000820 <MX_GPIO_Init+0x168>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b42      	ldr	r3, [pc, #264]	; (8000820 <MX_GPIO_Init+0x168>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <MX_GPIO_Init+0x168>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a3d      	ldr	r2, [pc, #244]	; (8000820 <MX_GPIO_Init+0x168>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b3b      	ldr	r3, [pc, #236]	; (8000820 <MX_GPIO_Init+0x168>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2103      	movs	r1, #3
 8000742:	4838      	ldr	r0, [pc, #224]	; (8000824 <MX_GPIO_Init+0x16c>)
 8000744:	f002 fce4 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	4836      	ldr	r0, [pc, #216]	; (8000828 <MX_GPIO_Init+0x170>)
 8000750:	f002 fcde 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2160      	movs	r1, #96	; 0x60
 8000758:	4834      	ldr	r0, [pc, #208]	; (800082c <MX_GPIO_Init+0x174>)
 800075a:	f002 fcd9 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000764:	4b32      	ldr	r3, [pc, #200]	; (8000830 <MX_GPIO_Init+0x178>)
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	482c      	ldr	r0, [pc, #176]	; (8000824 <MX_GPIO_Init+0x16c>)
 8000774:	f002 fa50 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 8000778:	2303      	movs	r3, #3
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4825      	ldr	r0, [pc, #148]	; (8000824 <MX_GPIO_Init+0x16c>)
 8000790:	f002 fa42 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000794:	2304      	movs	r3, #4
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000798:	4b26      	ldr	r3, [pc, #152]	; (8000834 <MX_GPIO_Init+0x17c>)
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	481f      	ldr	r0, [pc, #124]	; (8000824 <MX_GPIO_Init+0x16c>)
 80007a8:	f002 fa36 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007bc:	2305      	movs	r3, #5
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_GPIO_Init+0x170>)
 80007c8:	f002 fa26 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80007cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <MX_GPIO_Init+0x170>)
 80007e6:	f002 fa17 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_CS_Pin;
 80007ea:	2360      	movs	r3, #96	; 0x60
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480a      	ldr	r0, [pc, #40]	; (800082c <MX_GPIO_Init+0x174>)
 8000802:	f002 fa09 	bl	8002c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2008      	movs	r0, #8
 800080c:	f002 f9cd 	bl	8002baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000810:	2008      	movs	r0, #8
 8000812:	f002 f9e6 	bl	8002be2 <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800
 8000828:	40020000 	.word	0x40020000
 800082c:	40020400 	.word	0x40020400
 8000830:	10210000 	.word	0x10210000
 8000834:	10110000 	.word	0x10110000

08000838 <LED2_Blink>:
  * @brief  Blinks LED2 with two frequencies depending on User press button.
  * @param  None
  * @retval None
  */
static void LED2_Blink(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 800083c:	2000      	movs	r0, #0
 800083e:	f001 fa5f 	bl	8001d00 <BSP_LED_Init>

  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000842:	2101      	movs	r1, #1
 8000844:	2000      	movs	r0, #0
 8000846:	f001 faa5 	bl	8001d94 <BSP_PB_Init>

  /* Initiate BlinkSpeed variable */
  BlinkSpeed = 0;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <LED2_Blink+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while(1)
  {
    /* Test on blink speed */
    if(BlinkSpeed == 0)
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <LED2_Blink+0x5c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d107      	bne.n	8000868 <LED2_Blink+0x30>
    {
      BSP_LED_Toggle(LED2);
 8000858:	2000      	movs	r0, #0
 800085a:	f001 fa87 	bl	8001d6c <BSP_LED_Toggle>
      /* Wait for 500ms */
      HAL_Delay(500);
 800085e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000862:	f002 f8a5 	bl	80029b0 <HAL_Delay>
 8000866:	e7f3      	b.n	8000850 <LED2_Blink+0x18>
    }
    else if(BlinkSpeed == 1)
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <LED2_Blink+0x5c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d106      	bne.n	800087e <LED2_Blink+0x46>
    {
      BSP_LED_Toggle(LED2);
 8000870:	2000      	movs	r0, #0
 8000872:	f001 fa7b 	bl	8001d6c <BSP_LED_Toggle>
      /* Wait for 100ms */
      HAL_Delay(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f002 f89a 	bl	80029b0 <HAL_Delay>
 800087c:	e7e8      	b.n	8000850 <LED2_Blink+0x18>
    }
    else if(BlinkSpeed == 2)
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <LED2_Blink+0x5c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d1e4      	bne.n	8000850 <LED2_Blink+0x18>
    {
      BSP_LED_Toggle(LED2);
 8000886:	2000      	movs	r0, #0
 8000888:	f001 fa70 	bl	8001d6c <BSP_LED_Toggle>
      /* Wait for 50ms */
      HAL_Delay(50);
 800088c:	2032      	movs	r0, #50	; 0x32
 800088e:	f002 f88f 	bl	80029b0 <HAL_Delay>
    if(BlinkSpeed == 0)
 8000892:	e7dd      	b.n	8000850 <LED2_Blink+0x18>
 8000894:	20000084 	.word	0x20000084

08000898 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
  if(BlinkSpeed == 2)
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_GPIO_EXTI_Callback+0x34>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d103      	bne.n	80008b2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    BlinkSpeed = 0;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_GPIO_EXTI_Callback+0x34>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    BlinkSpeed ++;
  }
}
 80008b0:	e005      	b.n	80008be <HAL_GPIO_EXTI_Callback+0x26>
    BlinkSpeed ++;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <HAL_GPIO_EXTI_Callback+0x34>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <HAL_GPIO_EXTI_Callback+0x34>)
 80008bc:	701a      	strb	r2, [r3, #0]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000084 	.word	0x20000084

080008d0 <TFT_ShieldDetect>:
  * @param  None
  * @retval SHIELD_DETECTED: 1.8" TFT shield is available
  *         SHIELD_NOT_DETECTED: 1.8" TFT shield is not available
  */
static ShieldStatus TFT_ShieldDetect(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable GPIO clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <TFT_ShieldDetect+0x54>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <TFT_ShieldDetect+0x54>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <TFT_ShieldDetect+0x54>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008f2:	2301      	movs	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <TFT_ShieldDetect+0x58>)
 8000904:	f002 f988 	bl	8002c18 <HAL_GPIO_Init>

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) != 0)
 8000908:	2101      	movs	r1, #1
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <TFT_ShieldDetect+0x58>)
 800090c:	f002 fbe8 	bl	80030e0 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <TFT_ShieldDetect+0x4a>
  {
    return SHIELD_DETECTED;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <TFT_ShieldDetect+0x4c>
  }
  else
  {
    return SHIELD_NOT_DETECTED;
 800091a:	2300      	movs	r3, #0
  }
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400

0800092c <TFT_DisplayMenu>:
  * @brief  Displays demonstration menu.
  * @param  None
  * @retval None
  */
static void TFT_DisplayMenu(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000930:	2000      	movs	r0, #0
 8000932:	f000 fbc7 	bl	80010c4 <BSP_LCD_Clear>

  /* Set Menu font */
  BSP_LCD_SetFont(&Font12);
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <TFT_DisplayMenu+0x2c>)
 8000938:	f000 fba8 	bl	800108c <BSP_LCD_SetFont>

  /* Set Text color */
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800093c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000940:	f000 fb94 	bl	800106c <BSP_LCD_SetTextColor>
  /* Display message */
  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"   NUCLEO-F411RE    ");
 8000944:	4905      	ldr	r1, [pc, #20]	; (800095c <TFT_DisplayMenu+0x30>)
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fca4 	bl	8001294 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)"       DEMO         ");
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <TFT_DisplayMenu+0x34>)
 800094e:	2002      	movs	r0, #2
 8000950:	f000 fca0 	bl	8001294 <BSP_LCD_DisplayStringAtLine>

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000000c 	.word	0x2000000c
 800095c:	08004a04 	.word	0x08004a04
 8000960:	08004a1c 	.word	0x08004a1c

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

    LED2_Blink();
 8000968:	f7ff ff66 	bl	8000838 <LED2_Blink>

  /* USER CODE END Error_Handler_Debug */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <nRF24_CE_L+0x14>)
 800097a:	f002 fbc9 	bl	8003110 <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020800 	.word	0x40020800

08000988 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2101      	movs	r1, #1
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <nRF24_CE_H+0x14>)
 8000992:	f002 fbbd 	bl	8003110 <HAL_GPIO_WritePin>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40020800 	.word	0x40020800

080009a0 <Delay_ms>:
    };
    return result;
}


static inline void Delay_ms(uint32_t ms) { HAL_Delay(ms); }
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f002 f801 	bl	80029b0 <HAL_Delay>
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <UART_SendChar>:

#ifdef USE_HAL_DRIVER

extern UART_HandleTypeDef huart2;

void UART_SendChar(char b) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart2, (uint8_t *) &b, 1, 200);
 80009c2:	1df9      	adds	r1, r7, #7
 80009c4:	23c8      	movs	r3, #200	; 0xc8
 80009c6:	2201      	movs	r2, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <UART_SendChar+0x20>)
 80009ca:	f003 fb84 	bl	80040d6 <HAL_UART_Transmit>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000724 	.word	0x20000724

080009dc <UART_SendStr>:

void UART_SendStr(char *string) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) string, (uint16_t) strlen(string), 200);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff fbf7 	bl	80001d8 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	23c8      	movs	r3, #200	; 0xc8
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <UART_SendStr+0x24>)
 80009f4:	f003 fb6f 	bl	80040d6 <HAL_UART_Transmit>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000724 	.word	0x20000724

08000a04 <Toggle_LED>:

void Toggle_LED() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4802      	ldr	r0, [pc, #8]	; (8000a14 <Toggle_LED+0x10>)
 8000a0c:	f002 fb99 	bl	8003142 <HAL_GPIO_TogglePin>
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40020000 	.word	0x40020000

08000a18 <UART_SendBufHex>:
    LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}

#endif

void UART_SendBufHex(char *buf, uint16_t bufsize) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    char ch;
    for (i = 0; i < bufsize; i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	e018      	b.n	8000a5c <UART_SendBufHex+0x44>
        ch = *buf++;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	737b      	strb	r3, [r7, #13]
        UART_SendChar(HEX_CHARS[(ch >> 4) % 0x10]);
 8000a34:	7b7b      	ldrb	r3, [r7, #13]
 8000a36:	091b      	lsrs	r3, r3, #4
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <UART_SendBufHex+0x54>)
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffb9 	bl	80009b8 <UART_SendChar>
        UART_SendChar(HEX_CHARS[(ch & 0x0f) % 0x10]);
 8000a46:	7b7b      	ldrb	r3, [r7, #13]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <UART_SendBufHex+0x54>)
 8000a4e:	5cd3      	ldrb	r3, [r2, r3]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffb1 	bl	80009b8 <UART_SendChar>
    for (i = 0; i < bufsize; i++) {
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	81fb      	strh	r3, [r7, #14]
 8000a5c:	89fa      	ldrh	r2, [r7, #14]
 8000a5e:	887b      	ldrh	r3, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3e2      	bcc.n	8000a2a <UART_SendBufHex+0x12>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08004a34 	.word	0x08004a34

08000a70 <UART_SendInt>:
void UART_SendHex8(uint16_t num) {
    UART_SendChar(HEX_CHARS[(num >> 4) % 0x10]);
    UART_SendChar(HEX_CHARS[(num & 0x0f) % 0x10]);
}

void UART_SendInt(int32_t num) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    char str[10]; // 10 chars max for INT32_MAX
    int i = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
    if (num < 0) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da05      	bge.n	8000a8e <UART_SendInt+0x1e>
        UART_SendChar('-');
 8000a82:	202d      	movs	r0, #45	; 0x2d
 8000a84:	f7ff ff98 	bl	80009b8 <UART_SendChar>
        num *= -1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	607b      	str	r3, [r7, #4]
    }
    do str[i++] = (char) (num % 10 + '0'); while ((num /= 10) > 0);
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <UART_SendInt+0x90>)
 8000a92:	fb83 1302 	smull	r1, r3, r3, r2
 8000a96:	1099      	asrs	r1, r3, #2
 8000a98:	17d3      	asrs	r3, r2, #31
 8000a9a:	1ac9      	subs	r1, r1, r3
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	1ad1      	subs	r1, r2, r3
 8000aa6:	b2ca      	uxtb	r2, r1
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	1c59      	adds	r1, r3, #1
 8000aac:	6179      	str	r1, [r7, #20]
 8000aae:	3230      	adds	r2, #48	; 0x30
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	f107 0118 	add.w	r1, r7, #24
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <UART_SendInt+0x90>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1092      	asrs	r2, r2, #2
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dcdd      	bgt.n	8000a8e <UART_SendInt+0x1e>
    for (i--; i >= 0; i--) UART_SendChar(str[i]);
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <UART_SendInt+0x80>
 8000ada:	f107 0208 	add.w	r2, r7, #8
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff67 	bl	80009b8 <UART_SendChar>
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	daf1      	bge.n	8000ada <UART_SendInt+0x6a>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	66666667 	.word	0x66666667

08000b04 <runRadio>:
}

#endif // DEMO_TX_


int runRadio(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
    UART_SendStr("\r\nSTM32F411RE Receiver is online.\r\n");
 8000b0a:	486b      	ldr	r0, [pc, #428]	; (8000cb8 <runRadio+0x1b4>)
 8000b0c:	f7ff ff66 	bl	80009dc <UART_SendStr>

    // RX/TX disabled
    nRF24_CE_L();
 8000b10:	f7ff ff2e 	bl	8000970 <nRF24_CE_L>
    HAL_Delay(1000);
 8000b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b18:	f001 ff4a 	bl	80029b0 <HAL_Delay>

    // Configure the nRF24L01+
    UART_SendStr("nRF24L01+ check: ");
 8000b1c:	4867      	ldr	r0, [pc, #412]	; (8000cbc <runRadio+0x1b8>)
 8000b1e:	f7ff ff5d 	bl	80009dc <UART_SendStr>
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    if (!nRF24_Check()) {
 8000b22:	f001 fc3f 	bl	80023a4 <nRF24_Check>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d108      	bne.n	8000b3e <runRadio+0x3a>
        UART_SendStr("FAIL\r\n");
 8000b2c:	4864      	ldr	r0, [pc, #400]	; (8000cc0 <runRadio+0x1bc>)
 8000b2e:	f7ff ff55 	bl	80009dc <UART_SendStr>
        while (1) {
            Toggle_LED();
 8000b32:	f7ff ff67 	bl	8000a04 <Toggle_LED>
            Delay_ms(50);
 8000b36:	2032      	movs	r0, #50	; 0x32
 8000b38:	f7ff ff32 	bl	80009a0 <Delay_ms>
            Toggle_LED();
 8000b3c:	e7f9      	b.n	8000b32 <runRadio+0x2e>
        }
    }
// #pragma clang diagnostic pop
    UART_SendStr("OK\r\n");
 8000b3e:	4861      	ldr	r0, [pc, #388]	; (8000cc4 <runRadio+0x1c0>)
 8000b40:	f7ff ff4c 	bl	80009dc <UART_SendStr>

    // Initialize the nRF24L01 to its default state
    nRF24_Init();
 8000b44:	f001 fbe1 	bl	800230a <nRF24_Init>
    //   - CRC scheme: 2 byte

    // The transmitter sends a 10-byte packets to the address 'ESB' with Auto-ACK (ShockBurst enabled)

    // Set RF channel
    nRF24_SetRFChannel(40);
 8000b48:	2028      	movs	r0, #40	; 0x28
 8000b4a:	f001 fd06 	bl	800255a <nRF24_SetRFChannel>

    // Set data rate
    nRF24_SetDataRate(nRF24_DR_2Mbps);
 8000b4e:	2008      	movs	r0, #8
 8000b50:	f001 fd8d 	bl	800266e <nRF24_SetDataRate>

    // Set CRC scheme
    nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000b54:	200c      	movs	r0, #12
 8000b56:	f001 fcdf 	bl	8002518 <nRF24_SetCRCScheme>

    // Set address width, its common for all pipes (RX and TX)
    nRF24_SetAddrWidth(3);
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f001 fd0b 	bl	8002576 <nRF24_SetAddrWidth>

    // Configure RX PIPE
    static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
    nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 8000b60:	4959      	ldr	r1, [pc, #356]	; (8000cc8 <runRadio+0x1c4>)
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 fd18 	bl	8002598 <nRF24_SetAddr>
    nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 8000b68:	220a      	movs	r2, #10
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f001 fd99 	bl	80026a4 <nRF24_SetRXPipe>

    // Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
    nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000b72:	2006      	movs	r0, #6
 8000b74:	f001 fd60 	bl	8002638 <nRF24_SetTXPower>

    // Set operational mode (PRX == receiver)
    nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f001 fc60 	bl	800243e <nRF24_SetOperationalMode>

    // Clear any pending IRQ flags
    nRF24_ClearIRQFlags();
 8000b7e:	f001 fe00 	bl	8002782 <nRF24_ClearIRQFlags>

    // Wake the transceiver
    nRF24_SetPowerMode(nRF24_PWR_UP);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f001 fc3c 	bl	8002400 <nRF24_SetPowerMode>

    // Enable DPL
    nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f001 fc79 	bl	8002480 <nRF24_SetDynamicPayloadLength>

    nRF24_SetPayloadWithAck(1);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f001 fca0 	bl	80024d4 <nRF24_SetPayloadWithAck>


        // Put the transceiver to the RX mode
    nRF24_CE_H();
 8000b94:	f7ff fef8 	bl	8000988 <nRF24_CE_H>


    // The main loop
// #pragma clang diagnostic push
// #pragma clang diagnostic ignored "-Wmissing-noreturn"
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 fa93 	bl	80010c4 <BSP_LCD_Clear>
    /* Set Menu font */
    BSP_LCD_SetFont(&Font8);
 8000b9e:	484b      	ldr	r0, [pc, #300]	; (8000ccc <runRadio+0x1c8>)
 8000ba0:	f000 fa74 	bl	800108c <BSP_LCD_SetFont>

    /* Set Text color */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ba4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000ba8:	f000 fa60 	bl	800106c <BSP_LCD_SetTextColor>
    uint8_t nrow=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        // Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
        //
        // This is far from best solution, but it's ok for testing purposes
        // More smart way is to use the IRQ pin :)
        //
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000bb2:	f001 fdcb 	bl	800274c <nRF24_GetStatus_RXFIFO>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d0fa      	beq.n	8000bb2 <runRadio+0xae>
            // Get a payload from the transceiver
            pipe = nRF24_ReadPayloadDpl(nRF24_payload, &payload_length);
 8000bbc:	4944      	ldr	r1, [pc, #272]	; (8000cd0 <runRadio+0x1cc>)
 8000bbe:	4845      	ldr	r0, [pc, #276]	; (8000cd4 <runRadio+0x1d0>)
 8000bc0:	f001 fe50 	bl	8002864 <nRF24_ReadPayloadDpl>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b43      	ldr	r3, [pc, #268]	; (8000cd8 <runRadio+0x1d4>)
 8000bca:	701a      	strb	r2, [r3, #0]
            if(payload_length > 0) {
 8000bcc:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <runRadio+0x1cc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <runRadio+0xde>
                nRF24_WriteAckPayload(pipe, "aCk PaYlOaD",11);
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <runRadio+0x1d4>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	220b      	movs	r2, #11
 8000bda:	4940      	ldr	r1, [pc, #256]	; (8000cdc <runRadio+0x1d8>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fe50 	bl	8002882 <nRF24_WriteAckPayload>
            }

            // Clear all pending IRQ flags
            nRF24_ClearIRQFlags();
 8000be2:	f001 fdce 	bl	8002782 <nRF24_ClearIRQFlags>

            // Print a payload contents to UART
            UART_SendStr("RCV PIPE#");
 8000be6:	483e      	ldr	r0, [pc, #248]	; (8000ce0 <runRadio+0x1dc>)
 8000be8:	f7ff fef8 	bl	80009dc <UART_SendStr>
            UART_SendInt(pipe);
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <runRadio+0x1d4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff3d 	bl	8000a70 <UART_SendInt>
            UART_SendStr(" PAYLOAD:>");
 8000bf6:	483b      	ldr	r0, [pc, #236]	; (8000ce4 <runRadio+0x1e0>)
 8000bf8:	f7ff fef0 	bl	80009dc <UART_SendStr>
            Toggle_LED();
 8000bfc:	f7ff ff02 	bl	8000a04 <Toggle_LED>
            UART_SendBufHex((char *) nRF24_payload, payload_length);
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <runRadio+0x1cc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	4832      	ldr	r0, [pc, #200]	; (8000cd4 <runRadio+0x1d0>)
 8000c0a:	f7ff ff05 	bl	8000a18 <UART_SendBufHex>
            UART_SendStr("<\r\n");
 8000c0e:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <runRadio+0x1e4>)
 8000c10:	f7ff fee4 	bl	80009dc <UART_SendStr>

            uint8_t *buf=nRF24_payload;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <runRadio+0x1d0>)
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t str[64]={0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2240      	movs	r2, #64	; 0x40
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fedc 	bl	80049dc <memset>
            for (i = 0; i < payload_length; i++) {
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <runRadio+0x1e8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e028      	b.n	8000c7e <runRadio+0x17a>
                uint8_t ch = *buf++;
 8000c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	64ba      	str	r2, [r7, #72]	; 0x48
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                str[2*i  ]=HEX_CHARS[(ch >> 4) % 0x10];
 8000c38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4619      	mov	r1, r3
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <runRadio+0x1e8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <runRadio+0x1ec>)
 8000c4a:	5c52      	ldrb	r2, [r2, r1]
 8000c4c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c50:	440b      	add	r3, r1
 8000c52:	f803 2c4c 	strb.w	r2, [r3, #-76]
                str[2*i+1]=HEX_CHARS[(ch & 0x0f) % 0x10];
 8000c56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c5a:	f003 020f 	and.w	r2, r3, #15
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <runRadio+0x1e8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	3301      	adds	r3, #1
 8000c66:	4922      	ldr	r1, [pc, #136]	; (8000cf0 <runRadio+0x1ec>)
 8000c68:	5c8a      	ldrb	r2, [r1, r2]
 8000c6a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c6e:	440b      	add	r3, r1
 8000c70:	f803 2c4c 	strb.w	r2, [r3, #-76]
            for (i = 0; i < payload_length; i++) {
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <runRadio+0x1e8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <runRadio+0x1e8>)
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <runRadio+0x1cc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <runRadio+0x1e8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8cf      	bhi.n	8000c2c <runRadio+0x128>
            }

            /* Display message */
            BSP_LCD_DisplayStringAtLine(nrow++, (uint8_t*)str);
 8000c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c90:	1c5a      	adds	r2, r3, #1
 8000c92:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	1d3a      	adds	r2, r7, #4
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 faf9 	bl	8001294 <BSP_LCD_DisplayStringAtLine>
            if (nrow>20) {
 8000ca2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ca6:	2b14      	cmp	r3, #20
 8000ca8:	d983      	bls.n	8000bb2 <runRadio+0xae>
            	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fa0a 	bl	80010c4 <BSP_LCD_Clear>
            	nrow=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000cb6:	e77c      	b.n	8000bb2 <runRadio+0xae>
 8000cb8:	08004a48 	.word	0x08004a48
 8000cbc:	08004a6c 	.word	0x08004a6c
 8000cc0:	08004a80 	.word	0x08004a80
 8000cc4:	08004a88 	.word	0x08004a88
 8000cc8:	08004ac0 	.word	0x08004ac0
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	20000778 	.word	0x20000778
 8000cd4:	2000078c 	.word	0x2000078c
 8000cd8:	20000784 	.word	0x20000784
 8000cdc:	08004a90 	.word	0x08004a90
 8000ce0:	08004a9c 	.word	0x08004a9c
 8000ce4:	08004aa8 	.word	0x08004aa8
 8000ce8:	08004ab4 	.word	0x08004ab4
 8000cec:	20000788 	.word	0x20000788
 8000cf0:	08004a34 	.word	0x08004a34

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f001 ff2e 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <HAL_SPI_MspInit+0xc4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d14b      	bne.n	8000dfe <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_SPI_MspInit+0xc8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <HAL_SPI_MspInit+0xcc>)
 8000dd8:	f001 ff1e 	bl	8002c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ddc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dee:	2306      	movs	r3, #6
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_SPI_MspInit+0xd0>)
 8000dfa:	f001 ff0d 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40003c00 	.word	0x40003c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020800 	.word	0x40020800

08000e18 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <HAL_SPI_MspDeInit+0x3c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10f      	bne.n	8000e4a <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_SPI_MspDeInit+0x40>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_SPI_MspDeInit+0x40>)
 8000e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <HAL_SPI_MspDeInit+0x44>)
 8000e3c:	f002 f86e 	bl	8002f1c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 8000e40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <HAL_SPI_MspDeInit+0x48>)
 8000e46:	f002 f869 	bl	8002f1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40003c00 	.word	0x40003c00
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12b      	bne.n	8000ede <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_UART_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_UART_MspInit+0x8c>)
 8000eda:	f001 fe9d 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40004400 	.word	0x40004400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f001 fd12 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f54:	2004      	movs	r0, #4
 8000f56:	f002 f90f 	bl	8003178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <SystemInit+0x28>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <SystemInit+0x28>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SystemInit+0x28>)
 8000f76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f92:	e003      	b.n	8000f9c <LoopCopyDataInit>

08000f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f9a:	3104      	adds	r1, #4

08000f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f9c:	480b      	ldr	r0, [pc, #44]	; (8000fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fa4:	d3f6      	bcc.n	8000f94 <CopyDataInit>
  ldr  r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fa8:	e002      	b.n	8000fb0 <LoopFillZerobss>

08000faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fac:	f842 3b04 	str.w	r3, [r2], #4

08000fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fb4:	d3f9      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd3 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f003 fceb 	bl	8004994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fa93 	bl	80004e8 <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fc8:	08006d20 	.word	0x08006d20
  ldr  r0, =_sdata
 8000fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8000fd4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8000fd8:	200007bc 	.word	0x200007bc

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>
	...

08000fe0 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <BSP_LCD_Init+0x48>)
 8000fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff0:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <BSP_LCD_Init+0x48>)
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <BSP_LCD_Init+0x4c>)
 8000ff6:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <BSP_LCD_Init+0x48>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
  
  lcd_drv = &st7735_drv;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <BSP_LCD_Init+0x50>)
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <BSP_LCD_Init+0x54>)
 8001002:	601a      	str	r2, [r3, #0]
  
  /* LCD Init */   
  lcd_drv->Init();
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <BSP_LCD_Init+0x50>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4798      	blx	r3
  
  /* Clear the LCD screen */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800100c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001010:	f000 f858 	bl	80010c4 <BSP_LCD_Clear>
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <BSP_LCD_Init+0x58>)
 8001016:	f000 f839 	bl	800108c <BSP_LCD_SetFont>
  
  ret = LCD_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200007ac 	.word	0x200007ac
 800102c:	20000004 	.word	0x20000004
 8001030:	20000088 	.word	0x20000088
 8001034:	2000001c 	.word	0x2000001c
 8001038:	20000014 	.word	0x20000014

0800103c <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <BSP_LCD_GetXSize+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	4798      	blx	r3
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000088 	.word	0x20000088

08001054 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <BSP_LCD_GetYSize+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	4798      	blx	r3
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000088 	.word	0x20000088

0800106c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	4a03      	ldr	r2, [pc, #12]	; (8001088 <BSP_LCD_SetTextColor+0x1c>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200007ac 	.word	0x200007ac

0800108c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <BSP_LCD_SetFont+0x1c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6093      	str	r3, [r2, #8]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200007ac 	.word	0x200007ac

080010ac <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <BSP_LCD_GetFont+0x14>)
 80010b2:	689b      	ldr	r3, [r3, #8]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200007ac 	.word	0x200007ac

080010c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  uint32_t color_backup = DrawProp.TextColor; 
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <BSP_LCD_Clear+0x64>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4a13      	ldr	r2, [pc, #76]	; (8001128 <BSP_LCD_Clear+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e00d      	b.n	8001100 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	b29c      	uxth	r4, r3
 80010e8:	f7ff ffa8 	bl	800103c <BSP_LCD_GetXSize>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	4621      	mov	r1, r4
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f901 	bl	80012fc <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	f7ff ffa8 	bl	8001054 <BSP_LCD_GetYSize>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4293      	cmp	r3, r2
 800110a:	d3eb      	bcc.n	80010e4 <BSP_LCD_Clear+0x20>
  }
  DrawProp.TextColor = color_backup; 
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <BSP_LCD_Clear+0x64>)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <BSP_LCD_Clear+0x64>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffa7 	bl	800106c <BSP_LCD_SetTextColor>
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bd90      	pop	{r4, r7, pc}
 8001126:	bf00      	nop
 8001128:	200007ac 	.word	0x200007ac

0800112c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	80bb      	strh	r3, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <BSP_LCD_DisplayChar+0x50>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <BSP_LCD_DisplayChar+0x50>)
 800114a:	6889      	ldr	r1, [r1, #8]
 800114c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800114e:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <BSP_LCD_DisplayChar+0x50>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	3307      	adds	r3, #7
 800115a:	2b00      	cmp	r3, #0
 800115c:	da00      	bge.n	8001160 <BSP_LCD_DisplayChar+0x34>
 800115e:	3307      	adds	r3, #7
 8001160:	10db      	asrs	r3, r3, #3
 8001162:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001166:	441a      	add	r2, r3
 8001168:	88b9      	ldrh	r1, [r7, #4]
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f96d 	bl	800144c <DrawChar>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200007ac 	.word	0x200007ac

08001180 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	461a      	mov	r2, r3
 800118a:	4603      	mov	r3, r0
 800118c:	81fb      	strh	r3, [r7, #14]
 800118e:	460b      	mov	r3, r1
 8001190:	81bb      	strh	r3, [r7, #12]
 8001192:	4613      	mov	r3, r2
 8001194:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001196:	2301      	movs	r3, #1
 8001198:	83fb      	strh	r3, [r7, #30]
 800119a:	2300      	movs	r3, #0
 800119c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80011aa:	e002      	b.n	80011b2 <BSP_LCD_DisplayStringAt+0x32>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	617a      	str	r2, [r7, #20]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f6      	bne.n	80011ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80011be:	f7ff ff3d 	bl	800103c <BSP_LCD_GetXSize>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b32      	ldr	r3, [pc, #200]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d014      	beq.n	8001200 <BSP_LCD_DisplayStringAt+0x80>
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d00f      	beq.n	80011fa <BSP_LCD_DisplayStringAt+0x7a>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d11e      	bne.n	800121c <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4a2a      	ldr	r2, [pc, #168]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 80011e6:	6892      	ldr	r2, [r2, #8]
 80011e8:	8892      	ldrh	r2, [r2, #4]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	085b      	lsrs	r3, r3, #1
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	4413      	add	r3, r2
 80011f6:	83fb      	strh	r3, [r7, #30]
      break;
 80011f8:	e013      	b.n	8001222 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	83fb      	strh	r3, [r7, #30]
      break;
 80011fe:	e010      	b.n	8001222 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b21      	ldr	r3, [pc, #132]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	fb12 f303 	smulbb	r3, r2, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	83fb      	strh	r3, [r7, #30]
      break;
 800121a:	e002      	b.n	8001222 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	83fb      	strh	r3, [r7, #30]
      break;
 8001220:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8001222:	e012      	b.n	800124a <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	89b9      	ldrh	r1, [r7, #12]
 800122a:	8bfb      	ldrh	r3, [r7, #30]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff7d 	bl	800112c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	889a      	ldrh	r2, [r3, #4]
 8001238:	8bfb      	ldrh	r3, [r7, #30]
 800123a:	4413      	add	r3, r2
 800123c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3301      	adds	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
    i++;
 8001244:	8bbb      	ldrh	r3, [r7, #28]
 8001246:	3301      	adds	r3, #1
 8001248:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2dc      	uxtb	r4, r3
 8001258:	f7ff fef0 	bl	800103c <BSP_LCD_GetXSize>
 800125c:	4601      	mov	r1, r0
 800125e:	8bbb      	ldrh	r3, [r7, #28]
 8001260:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 8001262:	6892      	ldr	r2, [r2, #8]
 8001264:	8892      	ldrh	r2, [r2, #4]
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	1acb      	subs	r3, r1, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <BSP_LCD_DisplayStringAt+0x110>)
 8001270:	6892      	ldr	r2, [r2, #8]
 8001272:	8892      	ldrh	r2, [r2, #4]
 8001274:	4293      	cmp	r3, r2
 8001276:	bf2c      	ite	cs
 8001278:	2301      	movcs	r3, #1
 800127a:	2300      	movcc	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4023      	ands	r3, r4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ce      	bne.n	8001224 <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 8001286:	bf00      	nop
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	200007ac 	.word	0x200007ac

08001294 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0...5: if the Current fonts is Font24
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80012a0:	f7ff ff04 	bl	80010ac <BSP_LCD_GetFont>
 80012a4:	4603      	mov	r3, r0
 80012a6:	88db      	ldrh	r3, [r3, #6]
 80012a8:	88fa      	ldrh	r2, [r7, #6]
 80012aa:	fb12 f303 	smulbb	r3, r2, r3
 80012ae:	b299      	uxth	r1, r3
 80012b0:	2303      	movs	r3, #3
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff63 	bl	8001180 <BSP_LCD_DisplayStringAt>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	460b      	mov	r3, r1
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <BSP_LCD_DrawPixel+0x34>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <BSP_LCD_DrawPixel+0x34>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	88b9      	ldrh	r1, [r7, #4]
 80012ea:	88f8      	ldrh	r0, [r7, #6]
 80012ec:	4798      	blx	r3
  }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000088 	.word	0x20000088

080012fc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <BSP_LCD_DrawHLine+0x6c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00a      	beq.n	8001332 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <BSP_LCD_DrawHLine+0x6c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a1c      	ldr	r4, [r3, #32]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <BSP_LCD_DrawHLine+0x70>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b298      	uxth	r0, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	88f9      	ldrh	r1, [r7, #6]
 800132e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8001330:	e015      	b.n	800135e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e00e      	b.n	8001356 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	b29a      	uxth	r2, r3
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	b298      	uxth	r0, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <BSP_LCD_DrawHLine+0x70>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29a      	uxth	r2, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff ffba 	bl	80012c4 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3ec      	bcc.n	8001338 <BSP_LCD_DrawHLine+0x3c>
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000088 	.word	0x20000088
 800136c:	200007ac 	.word	0x200007ac

08001370 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	603a      	str	r2, [r7, #0]
 800137a:	80fb      	strh	r3, [r7, #6]
 800137c:	460b      	mov	r3, r1
 800137e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3312      	adds	r3, #18
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	3313      	adds	r3, #19
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	441a      	add	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3314      	adds	r3, #20
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	441a      	add	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3315      	adds	r3, #21
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	061b      	lsls	r3, r3, #24
 80013ac:	4413      	add	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3316      	adds	r3, #22
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	3317      	adds	r3, #23
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	441a      	add	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3318      	adds	r3, #24
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	441a      	add	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3319      	adds	r3, #25
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	4413      	add	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
  
  /* Remap Ypos, st7735 works with inverted X in case of bitmap */
  /* X = 0, cursor is on Top corner */
  if(lcd_drv == &st7735_drv)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <BSP_LCD_DrawBitmap+0xd4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <BSP_LCD_DrawBitmap+0xd8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10a      	bne.n	80013f8 <BSP_LCD_DrawBitmap+0x88>
  {
    Ypos = BSP_LCD_GetYSize() - Ypos - height;
 80013e2:	f7ff fe37 	bl	8001054 <BSP_LCD_GetYSize>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	80bb      	strh	r3, [r7, #4]
  }
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	88b9      	ldrh	r1, [r7, #4]
 8001402:	88f8      	ldrh	r0, [r7, #6]
 8001404:	f000 f914 	bl	8001630 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <BSP_LCD_DrawBitmap+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <BSP_LCD_DrawBitmap+0xb0>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <BSP_LCD_DrawBitmap+0xd4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	88b9      	ldrh	r1, [r7, #4]
 800141a:	88f8      	ldrh	r0, [r7, #6]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001420:	f7ff fe0c 	bl	800103c <BSP_LCD_GetXSize>
 8001424:	4603      	mov	r3, r0
 8001426:	b29c      	uxth	r4, r3
 8001428:	f7ff fe14 	bl	8001054 <BSP_LCD_GetYSize>
 800142c:	4603      	mov	r3, r0
 800142e:	b29b      	uxth	r3, r3
 8001430:	4622      	mov	r2, r4
 8001432:	2100      	movs	r1, #0
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f8fb 	bl	8001630 <SetDisplayWindow>
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	20000088 	.word	0x20000088
 8001448:	2000001c 	.word	0x2000001c

0800144c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	603a      	str	r2, [r7, #0]
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	460b      	mov	r3, r1
 800145a:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	82fb      	strh	r3, [r7, #22]
 800146c:	2300      	movs	r3, #0
 800146e:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 800147c:	4b63      	ldr	r3, [pc, #396]	; (800160c <DrawChar+0x1c0>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	88db      	ldrh	r3, [r3, #6]
 8001482:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <DrawChar+0x1c0>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	889b      	ldrh	r3, [r3, #4]
 800148a:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 800148c:	8afa      	ldrh	r2, [r7, #22]
 800148e:	8abb      	ldrh	r3, [r7, #20]
 8001490:	fb12 f303 	smulbb	r3, r2, r3
 8001494:	b29b      	uxth	r3, r3
 8001496:	331b      	adds	r3, #27
 8001498:	b29b      	uxth	r3, r3
 800149a:	4a5d      	ldr	r2, [pc, #372]	; (8001610 <DrawChar+0x1c4>)
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	b29b      	uxth	r3, r3
 80014a0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 80014a2:	8afb      	ldrh	r3, [r7, #22]
 80014a4:	8aba      	ldrh	r2, [r7, #20]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	331b      	adds	r3, #27
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	141a      	asrs	r2, r3, #16
 80014b0:	4b58      	ldr	r3, [pc, #352]	; (8001614 <DrawChar+0x1c8>)
 80014b2:	b292      	uxth	r2, r2
 80014b4:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 80014b6:	4b58      	ldr	r3, [pc, #352]	; (8001618 <DrawChar+0x1cc>)
 80014b8:	2236      	movs	r2, #54	; 0x36
 80014ba:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 80014bc:	4a57      	ldr	r2, [pc, #348]	; (800161c <DrawChar+0x1d0>)
 80014be:	8abb      	ldrh	r3, [r7, #20]
 80014c0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	141a      	asrs	r2, r3, #16
 80014c6:	4b56      	ldr	r3, [pc, #344]	; (8001620 <DrawChar+0x1d4>)
 80014c8:	b292      	uxth	r2, r2
 80014ca:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 80014cc:	4a55      	ldr	r2, [pc, #340]	; (8001624 <DrawChar+0x1d8>)
 80014ce:	8afb      	ldrh	r3, [r7, #22]
 80014d0:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 80014d2:	8afb      	ldrh	r3, [r7, #22]
 80014d4:	141a      	asrs	r2, r3, #16
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <DrawChar+0x1dc>)
 80014d8:	b292      	uxth	r2, r2
 80014da:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 80014dc:	8abb      	ldrh	r3, [r7, #20]
 80014de:	3307      	adds	r3, #7
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da00      	bge.n	80014e6 <DrawChar+0x9a>
 80014e4:	3307      	adds	r3, #7
 80014e6:	10db      	asrs	r3, r3, #3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	e078      	b.n	80015ee <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 80014fc:	8abb      	ldrh	r3, [r7, #20]
 80014fe:	3307      	adds	r3, #7
 8001500:	2b00      	cmp	r3, #0
 8001502:	da00      	bge.n	8001506 <DrawChar+0xba>
 8001504:	3307      	adds	r3, #7
 8001506:	10db      	asrs	r3, r3, #3
 8001508:	461a      	mov	r2, r3
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fb03 f302 	mul.w	r3, r3, r2
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8001516:	8abb      	ldrh	r3, [r7, #20]
 8001518:	3b11      	subs	r3, #17
 800151a:	2b07      	cmp	r3, #7
 800151c:	d80c      	bhi.n	8001538 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	041a      	lsls	r2, r3, #16
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3301      	adds	r3, #1
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4313      	orrs	r3, r2
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	3202      	adds	r2, #2
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	4313      	orrs	r3, r2
 8001536:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8001538:	8abb      	ldrh	r3, [r7, #20]
 800153a:	3b09      	subs	r3, #9
 800153c:	2b07      	cmp	r3, #7
 800153e:	d807      	bhi.n	8001550 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	3201      	adds	r2, #1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8001550:	8abb      	ldrh	r3, [r7, #20]
 8001552:	3b01      	subs	r3, #1
 8001554:	2b07      	cmp	r3, #7
 8001556:	d802      	bhi.n	800155e <DrawChar+0x112>
    {
      line =  pchar[0];
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	e03d      	b.n	80015e0 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8001564:	8afa      	ldrh	r2, [r7, #22]
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	3b01      	subs	r3, #1
 800156c:	8aba      	ldrh	r2, [r7, #20]
 800156e:	fb02 f203 	mul.w	r2, r2, r3
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	4413      	add	r3, r2
 8001576:	331b      	adds	r3, #27
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 800157c:	8aba      	ldrh	r2, [r7, #20]
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	1ad2      	subs	r2, r2, r3
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	4413      	add	r3, r2
 8001586:	3b01      	subs	r3, #1
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	461a      	mov	r2, r3
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4013      	ands	r3, r2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d010      	beq.n	80015ba <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <DrawChar+0x1c0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <DrawChar+0x1e0>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4413      	add	r3, r2
 80015a4:	460a      	mov	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <DrawChar+0x1c0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0a1a      	lsrs	r2, r3, #8
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2d1      	uxtb	r1, r2
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <DrawChar+0x1e0>)
 80015b6:	54d1      	strb	r1, [r2, r3]
 80015b8:	e00f      	b.n	80015da <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <DrawChar+0x1c0>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	b2d9      	uxtb	r1, r3
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <DrawChar+0x1e0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4413      	add	r3, r2
 80015c6:	460a      	mov	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <DrawChar+0x1c0>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	0a1a      	lsrs	r2, r3, #8
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2d1      	uxtb	r1, r2
 80015d6:	4a15      	ldr	r2, [pc, #84]	; (800162c <DrawChar+0x1e0>)
 80015d8:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	3301      	adds	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	6a3a      	ldr	r2, [r7, #32]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3bd      	bcc.n	8001564 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3301      	adds	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	8afb      	ldrh	r3, [r7, #22]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d382      	bcc.n	80014fc <DrawChar+0xb0>
      } 
    }
  }
  
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80015f6:	88b9      	ldrh	r1, [r7, #4]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	4a0c      	ldr	r2, [pc, #48]	; (800162c <DrawChar+0x1e0>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff feb7 	bl	8001370 <BSP_LCD_DrawBitmap>
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200007ac 	.word	0x200007ac
 8001610:	2000008e 	.word	0x2000008e
 8001614:	20000090 	.word	0x20000090
 8001618:	20000096 	.word	0x20000096
 800161c:	2000009e 	.word	0x2000009e
 8001620:	200000a0 	.word	0x200000a0
 8001624:	200000a2 	.word	0x200000a2
 8001628:	200000a4 	.word	0x200000a4
 800162c:	2000008c 	.word	0x2000008c

08001630 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	80fb      	strh	r3, [r7, #6]
 8001642:	4603      	mov	r3, r0
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	807b      	strh	r3, [r7, #2]
 800164a:	4613      	mov	r3, r2
 800164c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SetDisplayWindow+0x40>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SetDisplayWindow+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69dc      	ldr	r4, [r3, #28]
 800165e:	883b      	ldrh	r3, [r7, #0]
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	88b9      	ldrh	r1, [r7, #4]
 8001664:	88f8      	ldrh	r0, [r7, #6]
 8001666:	47a0      	blx	r4
  }  
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	20000088 	.word	0x20000088

08001674 <st7735_Init>:
  * @brief  Initialize the ST7735 LCD Component.
  * @param  None
  * @retval None
  */
void st7735_Init(void)
{    
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
  
  /* Initialize ST7735 low level bus layer -----------------------------------*/
  LCD_IO_Init();
 800167e:	f000 fca1 	bl	8001fc4 <LCD_IO_Init>
  /* Out of sleep mode, 0 args, no delay */
  st7735_WriteReg(LCD_REG_17, 0x00); 
 8001682:	2100      	movs	r1, #0
 8001684:	2011      	movs	r0, #17
 8001686:	f000 f9e6 	bl	8001a56 <st7735_WriteReg>
  /* Frame rate ctrl - normal mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D)*/
  LCD_IO_WriteReg(LCD_REG_177);
 800168a:	20b1      	movs	r0, #177	; 0xb1
 800168c:	f000 fce2 	bl	8002054 <LCD_IO_WriteReg>
  data = 0x01;
 8001690:	2301      	movs	r3, #1
 8001692:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001694:	1dfb      	adds	r3, r7, #7
 8001696:	2101      	movs	r1, #1
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fcfd 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = 0x2C;
 800169e:	232c      	movs	r3, #44	; 0x2c
 80016a0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fcf6 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = 0x2D;
 80016ac:	232d      	movs	r3, #45	; 0x2d
 80016ae:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fcef 	bl	8002098 <LCD_IO_WriteMultipleData>
  /* Frame rate control - idle mode, 3 args:Rate = fosc/(1x2+40) * (LINE+2C+2D) */    
  st7735_WriteReg(LCD_REG_178, 0x01);
 80016ba:	2101      	movs	r1, #1
 80016bc:	20b2      	movs	r0, #178	; 0xb2
 80016be:	f000 f9ca 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2C);
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	20b2      	movs	r0, #178	; 0xb2
 80016c6:	f000 f9c6 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_178, 0x2D);
 80016ca:	212d      	movs	r1, #45	; 0x2d
 80016cc:	20b2      	movs	r0, #178	; 0xb2
 80016ce:	f000 f9c2 	bl	8001a56 <st7735_WriteReg>
  /* Frame rate ctrl - partial mode, 6 args: Dot inversion mode, Line inversion mode */ 
  st7735_WriteReg(LCD_REG_179, 0x01);
 80016d2:	2101      	movs	r1, #1
 80016d4:	20b3      	movs	r0, #179	; 0xb3
 80016d6:	f000 f9be 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	20b3      	movs	r0, #179	; 0xb3
 80016de:	f000 f9ba 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 80016e2:	212d      	movs	r1, #45	; 0x2d
 80016e4:	20b3      	movs	r0, #179	; 0xb3
 80016e6:	f000 f9b6 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x01);
 80016ea:	2101      	movs	r1, #1
 80016ec:	20b3      	movs	r0, #179	; 0xb3
 80016ee:	f000 f9b2 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2C);
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	20b3      	movs	r0, #179	; 0xb3
 80016f6:	f000 f9ae 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_179, 0x2D);
 80016fa:	212d      	movs	r1, #45	; 0x2d
 80016fc:	20b3      	movs	r0, #179	; 0xb3
 80016fe:	f000 f9aa 	bl	8001a56 <st7735_WriteReg>
  /* Display inversion ctrl, 1 arg, no delay: No inversion */
  st7735_WriteReg(LCD_REG_180, 0x07);
 8001702:	2107      	movs	r1, #7
 8001704:	20b4      	movs	r0, #180	; 0xb4
 8001706:	f000 f9a6 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 3 args, no delay: -4.6V , AUTO mode */
  st7735_WriteReg(LCD_REG_192, 0xA2);
 800170a:	21a2      	movs	r1, #162	; 0xa2
 800170c:	20c0      	movs	r0, #192	; 0xc0
 800170e:	f000 f9a2 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x02);
 8001712:	2102      	movs	r1, #2
 8001714:	20c0      	movs	r0, #192	; 0xc0
 8001716:	f000 f99e 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_192, 0x84);
 800171a:	2184      	movs	r1, #132	; 0x84
 800171c:	20c0      	movs	r0, #192	; 0xc0
 800171e:	f000 f99a 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 1 arg, no delay: VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD */
  st7735_WriteReg(LCD_REG_193, 0xC5);
 8001722:	21c5      	movs	r1, #197	; 0xc5
 8001724:	20c1      	movs	r0, #193	; 0xc1
 8001726:	f000 f996 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 2 args, no delay: Opamp current small, Boost frequency */ 
  st7735_WriteReg(LCD_REG_194, 0x0A);
 800172a:	210a      	movs	r1, #10
 800172c:	20c2      	movs	r0, #194	; 0xc2
 800172e:	f000 f992 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_194, 0x00);
 8001732:	2100      	movs	r1, #0
 8001734:	20c2      	movs	r0, #194	; 0xc2
 8001736:	f000 f98e 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 2 args, no delay: BCLK/2, Opamp current small & Medium low */  
  st7735_WriteReg(LCD_REG_195, 0x8A);
 800173a:	218a      	movs	r1, #138	; 0x8a
 800173c:	20c3      	movs	r0, #195	; 0xc3
 800173e:	f000 f98a 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_195, 0x2A);
 8001742:	212a      	movs	r1, #42	; 0x2a
 8001744:	20c3      	movs	r0, #195	; 0xc3
 8001746:	f000 f986 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 2 args, no delay */
  st7735_WriteReg(LCD_REG_196, 0x8A);
 800174a:	218a      	movs	r1, #138	; 0x8a
 800174c:	20c4      	movs	r0, #196	; 0xc4
 800174e:	f000 f982 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_196, 0xEE);
 8001752:	21ee      	movs	r1, #238	; 0xee
 8001754:	20c4      	movs	r0, #196	; 0xc4
 8001756:	f000 f97e 	bl	8001a56 <st7735_WriteReg>
  /* Power control, 1 arg, no delay */
  st7735_WriteReg(LCD_REG_197, 0x0E);
 800175a:	210e      	movs	r1, #14
 800175c:	20c5      	movs	r0, #197	; 0xc5
 800175e:	f000 f97a 	bl	8001a56 <st7735_WriteReg>
  /* Don't invert display, no args, no delay */
  LCD_IO_WriteReg(LCD_REG_32);
 8001762:	2020      	movs	r0, #32
 8001764:	f000 fc76 	bl	8002054 <LCD_IO_WriteReg>
  /* Set color mode, 1 arg, no delay: 16-bit color */
  st7735_WriteReg(LCD_REG_58, 0x05);
 8001768:	2105      	movs	r1, #5
 800176a:	203a      	movs	r0, #58	; 0x3a
 800176c:	f000 f973 	bl	8001a56 <st7735_WriteReg>
  /* Column addr set, 4 args, no delay: XSTART = 0, XEND = 127 */
  LCD_IO_WriteReg(LCD_REG_42);
 8001770:	202a      	movs	r0, #42	; 0x2a
 8001772:	f000 fc6f 	bl	8002054 <LCD_IO_WriteReg>
  data = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	2101      	movs	r1, #1
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fc8a 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fc85 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	2101      	movs	r1, #1
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fc80 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = 0x7F;
 8001798:	237f      	movs	r3, #127	; 0x7f
 800179a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fc79 	bl	8002098 <LCD_IO_WriteMultipleData>
  /* Row addr set, 4 args, no delay: YSTART = 0, YEND = 159 */
  LCD_IO_WriteReg(LCD_REG_43);
 80017a6:	202b      	movs	r0, #43	; 0x2b
 80017a8:	f000 fc54 	bl	8002054 <LCD_IO_WriteReg>
  data = 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	2101      	movs	r1, #1
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fc6f 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	2101      	movs	r1, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fc6a 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteMultipleData(&data, 1);
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	2101      	movs	r1, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fc65 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = 0x9F;
 80017ce:	239f      	movs	r3, #159	; 0x9f
 80017d0:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	2101      	movs	r1, #1
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fc5e 	bl	8002098 <LCD_IO_WriteMultipleData>
  /* Magical unicorn dust, 16 args, no delay */
  st7735_WriteReg(LCD_REG_224, 0x02); 
 80017dc:	2102      	movs	r1, #2
 80017de:	20e0      	movs	r0, #224	; 0xe0
 80017e0:	f000 f939 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x1c);  
 80017e4:	211c      	movs	r1, #28
 80017e6:	20e0      	movs	r0, #224	; 0xe0
 80017e8:	f000 f935 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x07); 
 80017ec:	2107      	movs	r1, #7
 80017ee:	20e0      	movs	r0, #224	; 0xe0
 80017f0:	f000 f931 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x12);
 80017f4:	2112      	movs	r1, #18
 80017f6:	20e0      	movs	r0, #224	; 0xe0
 80017f8:	f000 f92d 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x37);  
 80017fc:	2137      	movs	r1, #55	; 0x37
 80017fe:	20e0      	movs	r0, #224	; 0xe0
 8001800:	f000 f929 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x32);  
 8001804:	2132      	movs	r1, #50	; 0x32
 8001806:	20e0      	movs	r0, #224	; 0xe0
 8001808:	f000 f925 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);  
 800180c:	2129      	movs	r1, #41	; 0x29
 800180e:	20e0      	movs	r0, #224	; 0xe0
 8001810:	f000 f921 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2d);
 8001814:	212d      	movs	r1, #45	; 0x2d
 8001816:	20e0      	movs	r0, #224	; 0xe0
 8001818:	f000 f91d 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x29);  
 800181c:	2129      	movs	r1, #41	; 0x29
 800181e:	20e0      	movs	r0, #224	; 0xe0
 8001820:	f000 f919 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x25);  
 8001824:	2125      	movs	r1, #37	; 0x25
 8001826:	20e0      	movs	r0, #224	; 0xe0
 8001828:	f000 f915 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x2B);  
 800182c:	212b      	movs	r1, #43	; 0x2b
 800182e:	20e0      	movs	r0, #224	; 0xe0
 8001830:	f000 f911 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x39);  
 8001834:	2139      	movs	r1, #57	; 0x39
 8001836:	20e0      	movs	r0, #224	; 0xe0
 8001838:	f000 f90d 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x00);  
 800183c:	2100      	movs	r1, #0
 800183e:	20e0      	movs	r0, #224	; 0xe0
 8001840:	f000 f909 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x01);  
 8001844:	2101      	movs	r1, #1
 8001846:	20e0      	movs	r0, #224	; 0xe0
 8001848:	f000 f905 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x03);  
 800184c:	2103      	movs	r1, #3
 800184e:	20e0      	movs	r0, #224	; 0xe0
 8001850:	f000 f901 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_224, 0x10);
 8001854:	2110      	movs	r1, #16
 8001856:	20e0      	movs	r0, #224	; 0xe0
 8001858:	f000 f8fd 	bl	8001a56 <st7735_WriteReg>
  /* Sparkles and rainbows, 16 args, no delay */
  st7735_WriteReg(LCD_REG_225, 0x03);
 800185c:	2103      	movs	r1, #3
 800185e:	20e1      	movs	r0, #225	; 0xe1
 8001860:	f000 f8f9 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x1d);  
 8001864:	211d      	movs	r1, #29
 8001866:	20e1      	movs	r0, #225	; 0xe1
 8001868:	f000 f8f5 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x07);  
 800186c:	2107      	movs	r1, #7
 800186e:	20e1      	movs	r0, #225	; 0xe1
 8001870:	f000 f8f1 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x06);
 8001874:	2106      	movs	r1, #6
 8001876:	20e1      	movs	r0, #225	; 0xe1
 8001878:	f000 f8ed 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 800187c:	212e      	movs	r1, #46	; 0x2e
 800187e:	20e1      	movs	r0, #225	; 0xe1
 8001880:	f000 f8e9 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2C);  
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	20e1      	movs	r0, #225	; 0xe1
 8001888:	f000 f8e5 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x29);  
 800188c:	2129      	movs	r1, #41	; 0x29
 800188e:	20e1      	movs	r0, #225	; 0xe1
 8001890:	f000 f8e1 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2D);
 8001894:	212d      	movs	r1, #45	; 0x2d
 8001896:	20e1      	movs	r0, #225	; 0xe1
 8001898:	f000 f8dd 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 800189c:	212e      	movs	r1, #46	; 0x2e
 800189e:	20e1      	movs	r0, #225	; 0xe1
 80018a0:	f000 f8d9 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x2E);  
 80018a4:	212e      	movs	r1, #46	; 0x2e
 80018a6:	20e1      	movs	r0, #225	; 0xe1
 80018a8:	f000 f8d5 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x37);  
 80018ac:	2137      	movs	r1, #55	; 0x37
 80018ae:	20e1      	movs	r0, #225	; 0xe1
 80018b0:	f000 f8d1 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x3F);  
 80018b4:	213f      	movs	r1, #63	; 0x3f
 80018b6:	20e1      	movs	r0, #225	; 0xe1
 80018b8:	f000 f8cd 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);  
 80018bc:	2100      	movs	r1, #0
 80018be:	20e1      	movs	r0, #225	; 0xe1
 80018c0:	f000 f8c9 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x00);  
 80018c4:	2100      	movs	r1, #0
 80018c6:	20e1      	movs	r0, #225	; 0xe1
 80018c8:	f000 f8c5 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x02);  
 80018cc:	2102      	movs	r1, #2
 80018ce:	20e1      	movs	r0, #225	; 0xe1
 80018d0:	f000 f8c1 	bl	8001a56 <st7735_WriteReg>
  st7735_WriteReg(LCD_REG_225, 0x10);
 80018d4:	2110      	movs	r1, #16
 80018d6:	20e1      	movs	r0, #225	; 0xe1
 80018d8:	f000 f8bd 	bl	8001a56 <st7735_WriteReg>
  /* Normal display on, no args, no delay */
  st7735_WriteReg(LCD_REG_19, 0x00);
 80018dc:	2100      	movs	r1, #0
 80018de:	2013      	movs	r0, #19
 80018e0:	f000 f8b9 	bl	8001a56 <st7735_WriteReg>
  /* Main screen turn on, no delay */
  st7735_WriteReg(LCD_REG_41, 0x00);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2029      	movs	r0, #41	; 0x29
 80018e8:	f000 f8b5 	bl	8001a56 <st7735_WriteReg>
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 80018ec:	21c0      	movs	r1, #192	; 0xc0
 80018ee:	2036      	movs	r0, #54	; 0x36
 80018f0:	f000 f8b1 	bl	8001a56 <st7735_WriteReg>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <st7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOn(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8001906:	2013      	movs	r0, #19
 8001908:	f000 fba4 	bl	8002054 <LCD_IO_WriteReg>
  LCD_Delay(10);
 800190c:	200a      	movs	r0, #10
 800190e:	f000 fc27 	bl	8002160 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_41);
 8001912:	2029      	movs	r0, #41	; 0x29
 8001914:	f000 fb9e 	bl	8002054 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f000 fc21 	bl	8002160 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 800191e:	2036      	movs	r0, #54	; 0x36
 8001920:	f000 fb98 	bl	8002054 <LCD_IO_WriteReg>
  data = 0xC0;
 8001924:	23c0      	movs	r3, #192	; 0xc0
 8001926:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fbb3 	bl	8002098 <LCD_IO_WriteMultipleData>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <st7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOff(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
  uint8_t data = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_REG_19);
 8001944:	2013      	movs	r0, #19
 8001946:	f000 fb85 	bl	8002054 <LCD_IO_WriteReg>
  LCD_Delay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f000 fc08 	bl	8002160 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_40);
 8001950:	2028      	movs	r0, #40	; 0x28
 8001952:	f000 fb7f 	bl	8002054 <LCD_IO_WriteReg>
  LCD_Delay(10);
 8001956:	200a      	movs	r0, #10
 8001958:	f000 fc02 	bl	8002160 <LCD_Delay>
  LCD_IO_WriteReg(LCD_REG_54);
 800195c:	2036      	movs	r0, #54	; 0x36
 800195e:	f000 fb79 	bl	8002054 <LCD_IO_WriteReg>
  data = 0xC0;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteMultipleData(&data, 1);
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	2101      	movs	r1, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fb94 	bl	8002098 <LCD_IO_WriteMultipleData>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <st7735_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void st7735_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	460a      	mov	r2, r1
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	4613      	mov	r3, r2
 8001986:	80bb      	strh	r3, [r7, #4]
  uint8_t data = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteReg(LCD_REG_42);
 800198c:	202a      	movs	r0, #42	; 0x2a
 800198e:	f000 fb61 	bl	8002054 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	b29b      	uxth	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 800199c:	f107 030f 	add.w	r3, r7, #15
 80019a0:	2101      	movs	r1, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fb78 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019ae:	f107 030f 	add.w	r3, r7, #15
 80019b2:	2101      	movs	r1, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fb6f 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_43); 
 80019ba:	202b      	movs	r0, #43	; 0x2b
 80019bc:	f000 fb4a 	bl	8002054 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019ca:	f107 030f 	add.w	r3, r7, #15
 80019ce:	2101      	movs	r1, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb61 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 80019dc:	f107 030f 	add.w	r3, r7, #15
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fb58 	bl	8002098 <LCD_IO_WriteMultipleData>
  LCD_IO_WriteReg(LCD_REG_44);
 80019e8:	202c      	movs	r0, #44	; 0x2c
 80019ea:	f000 fb33 	bl	8002054 <LCD_IO_WriteReg>
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <st7735_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void st7735_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	460b      	mov	r3, r1
 8001a02:	80bb      	strh	r3, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	807b      	strh	r3, [r7, #2]
  uint8_t data = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  if((Xpos >= ST7735_LCD_PIXEL_WIDTH) || (Ypos >= ST7735_LCD_PIXEL_HEIGHT)) 
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	d81d      	bhi.n	8001a4e <st7735_WritePixel+0x58>
 8001a12:	88bb      	ldrh	r3, [r7, #4]
 8001a14:	2b9f      	cmp	r3, #159	; 0x9f
 8001a16:	d81a      	bhi.n	8001a4e <st7735_WritePixel+0x58>
  {
    return;
  }
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 8001a18:	88ba      	ldrh	r2, [r7, #4]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ffaa 	bl	8001978 <st7735_SetCursor>
  
  data = RGBCode >> 8;
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001a2e:	f107 030f 	add.w	r3, r7, #15
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fb2f 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = RGBCode;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001a40:	f107 030f 	add.w	r3, r7, #15
 8001a44:	2101      	movs	r1, #1
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fb26 	bl	8002098 <LCD_IO_WriteMultipleData>
 8001a4c:	e000      	b.n	8001a50 <st7735_WritePixel+0x5a>
    return;
 8001a4e:	bf00      	nop
}  
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <st7735_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: value to write to the selected register.
  * @retval None
  */
void st7735_WriteReg(uint8_t LCDReg, uint8_t LCDRegValue)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	460a      	mov	r2, r1
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	4613      	mov	r3, r2
 8001a64:	71bb      	strb	r3, [r7, #6]
  LCD_IO_WriteReg(LCDReg);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 faf3 	bl	8002054 <LCD_IO_WriteReg>
  LCD_IO_WriteMultipleData(&LCDRegValue, 1);
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fb10 	bl	8002098 <LCD_IO_WriteMultipleData>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <st7735_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void st7735_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	4603      	mov	r3, r0
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	807b      	strh	r3, [r7, #2]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	803b      	strh	r3, [r7, #0]
  uint8_t data = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  LCD_IO_WriteReg(LCD_REG_42);
 8001aa2:	202a      	movs	r0, #42	; 0x2a
 8001aa4:	f000 fad6 	bl	8002054 <LCD_IO_WriteReg>
  data = (Xpos) >> 8;
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001ab2:	f107 030f 	add.w	r3, r7, #15
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 faed 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Xpos) & 0xFF;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001ac4:	f107 030f 	add.w	r3, r7, #15
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fae4 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) >> 8;
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	121b      	asrs	r3, r3, #8
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001ade:	f107 030f 	add.w	r3, r7, #15
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fad7 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Xpos + Width - 1) & 0xFF;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001afc:	f107 030f 	add.w	r3, r7, #15
 8001b00:	2101      	movs	r1, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fac8 	bl	8002098 <LCD_IO_WriteMultipleData>
  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  LCD_IO_WriteReg(LCD_REG_43);
 8001b08:	202b      	movs	r0, #43	; 0x2b
 8001b0a:	f000 faa3 	bl	8002054 <LCD_IO_WriteReg>
  data = (Ypos) >> 8;
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b18:	f107 030f 	add.w	r3, r7, #15
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 faba 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Ypos) & 0xFF;
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b2a:	f107 030f 	add.w	r3, r7, #15
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fab1 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) >> 8;
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	883b      	ldrh	r3, [r7, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	121b      	asrs	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b44:	f107 030f 	add.w	r3, r7, #15
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 faa4 	bl	8002098 <LCD_IO_WriteMultipleData>
  data = (Ypos + Height - 1) & 0xFF;
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	883b      	ldrh	r3, [r7, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	73fb      	strb	r3, [r7, #15]
  LCD_IO_WriteMultipleData(&data, 1);
 8001b62:	f107 030f 	add.w	r3, r7, #15
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fa95 	bl	8002098 <LCD_IO_WriteMultipleData>
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd90      	pop	{r4, r7, pc}
	...

08001b78 <st7735_DrawHLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	807b      	strh	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 8001b9a:	88ba      	ldrh	r2, [r7, #4]
 8001b9c:	883b      	ldrh	r3, [r7, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	dc1c      	bgt.n	8001bde <st7735_DrawHLine+0x66>
  
  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fee4 	bl	8001978 <st7735_SetCursor>
  
  for(counter = 0; counter < Length; counter++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e007      	b.n	8001bc6 <st7735_DrawHLine+0x4e>
  {
    ArrayRGB[counter] = RGBCode;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	490b      	ldr	r1, [pc, #44]	; (8001be8 <st7735_DrawHLine+0x70>)
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	883a      	ldrh	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f2      	bhi.n	8001bb6 <st7735_DrawHLine+0x3e>
  }
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8001bd0:	883b      	ldrh	r3, [r7, #0]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4804      	ldr	r0, [pc, #16]	; (8001be8 <st7735_DrawHLine+0x70>)
 8001bd8:	f000 fa5e 	bl	8002098 <LCD_IO_WriteMultipleData>
 8001bdc:	e000      	b.n	8001be0 <st7735_DrawHLine+0x68>
  if(Xpos + Length > ST7735_LCD_PIXEL_WIDTH) return;
 8001bde:	bf00      	nop
}
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200003f4 	.word	0x200003f4

08001bec <st7735_DrawVLine>:
  * @param  Ypos: specifies the Y position.
  * @param  Length: specifies the line length.  
  * @retval None
  */
void st7735_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	80fb      	strh	r3, [r7, #6]
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80bb      	strh	r3, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
 8001c06:	4613      	mov	r3, r2
 8001c08:	803b      	strh	r3, [r7, #0]
  uint8_t counter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	883b      	ldrh	r3, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	2ba0      	cmp	r3, #160	; 0xa0
 8001c16:	dc15      	bgt.n	8001c44 <st7735_DrawVLine+0x58>
  for(counter = 0; counter < Length; counter++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e00c      	b.n	8001c38 <st7735_DrawVLine+0x4c>
  {
    st7735_WritePixel(Xpos, Ypos + counter, RGBCode);
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	4413      	add	r3, r2
 8001c26:	b299      	uxth	r1, r3
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fee2 	bl	80019f6 <st7735_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	3301      	adds	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	883a      	ldrh	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d8ed      	bhi.n	8001c1e <st7735_DrawVLine+0x32>
 8001c42:	e000      	b.n	8001c46 <st7735_DrawVLine+0x5a>
  if(Ypos + Length > ST7735_LCD_PIXEL_HEIGHT) return;
 8001c44:	bf00      	nop
  }   
}
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}

08001c4c <st7735_GetLcdPixelWidth>:
  * @brief  Gets the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t st7735_GetLcdPixelWidth(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_WIDTH;
 8001c50:	2380      	movs	r3, #128	; 0x80
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <st7735_GetLcdPixelHeight>:
  * @brief  Gets the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t st7735_GetLcdPixelHeight(void)
{                          
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ST7735_LCD_PIXEL_HEIGHT;
 8001c60:	23a0      	movs	r3, #160	; 0xa0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <st7735_DrawBitmap>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void st7735_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	603a      	str	r2, [r7, #0]
 8001c76:	80fb      	strh	r3, [r7, #6]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3302      	adds	r3, #2
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3304      	adds	r3, #4
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	330c      	adds	r3, #12
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	603b      	str	r3, [r7, #0]
  
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 0, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0x40);
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	2036      	movs	r0, #54	; 0x36
 8001cd2:	f7ff fec0 	bl	8001a56 <st7735_WriteReg>

  /* Set Cursor */
  st7735_SetCursor(Xpos, Ypos);  
 8001cd6:	88ba      	ldrh	r2, [r7, #4]
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe4b 	bl	8001978 <st7735_SetCursor>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f000 f9d5 	bl	8002098 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 0 */
  /* Memory access control: MY = 1, MX = 1, MV = 0, ML = 0 */
  st7735_WriteReg(LCD_REG_54, 0xC0);
 8001cee:	21c0      	movs	r1, #192	; 0xc0
 8001cf0:	2036      	movs	r0, #54	; 0x36
 8001cf2:	f7ff feb0 	bl	8001a56 <st7735_WriteReg>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <BSP_LED_Init+0x64>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <BSP_LED_Init+0x64>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <BSP_LED_Init+0x64>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001d26:	2320      	movs	r3, #32
 8001d28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <BSP_LED_Init+0x68>)
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f000 ff67 	bl	8002c18 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <BSP_LED_Init+0x68>)
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	2120      	movs	r1, #32
 8001d54:	2200      	movs	r2, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 f9da 	bl	8003110 <HAL_GPIO_WritePin>
}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	20000054 	.word	0x20000054

08001d6c <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <BSP_LED_Toggle+0x24>)
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f9dd 	bl	8003142 <HAL_GPIO_TogglePin>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000054 	.word	0x20000054

08001d94 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <BSP_PB_Init+0xa0>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <BSP_PB_Init+0xa0>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <BSP_PB_Init+0xa0>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d112      	bne.n	8001dec <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <BSP_PB_Init+0xa4>)
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	f107 020c 	add.w	r2, r7, #12
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 ff16 	bl	8002c18 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d11c      	bne.n	8001e2c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001df2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <BSP_PB_Init+0xa8>)
 8001dfe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <BSP_PB_Init+0xa4>)
 8001e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e08:	f107 020c 	add.w	r2, r7, #12
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 ff02 	bl	8002c18 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001e14:	2328      	movs	r3, #40	; 0x28
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	2200      	movs	r2, #0
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fec4 	bl	8002baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001e22:	2328      	movs	r3, #40	; 0x28
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fedb 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	20000058 	.word	0x20000058
 8001e3c:	10210000 	.word	0x10210000

08001e40 <SPIx_MspInit>:

/**
  * @brief  Initializes SPI MSP.
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPI SCK */
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 8001e80:	2320      	movs	r3, #32
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 8001e90:	2305      	movs	r3, #5
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4816      	ldr	r0, [pc, #88]	; (8001ef4 <SPIx_MspInit+0xb4>)
 8001e9c:	f000 febc 	bl	8002c18 <HAL_GPIO_Init>

  /* Configure SPI MISO and MOSI */ 
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <SPIx_MspInit+0xb4>)
 8001eb4:	f000 feb0 	bl	8002c18 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 8001eb8:	2340      	movs	r3, #64	; 0x40
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <SPIx_MspInit+0xb4>)
 8001ec8:	f000 fea6 	bl	8002c18 <HAL_GPIO_Init>

  /*** Configure the SPI peripheral ***/ 
  /* Enable SPI clock */
  NUCLEO_SPIx_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001ed6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eda:	6453      	str	r3, [r2, #68]	; 0x44
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <SPIx_MspInit+0xb0>)
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <SPIx_Init>:

/**
  * @brief  Initializes SPI HAL.
  */
static void SPIx_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 8001efc:	4819      	ldr	r0, [pc, #100]	; (8001f64 <SPIx_Init+0x6c>)
 8001efe:	f001 ffe3 	bl	8003ec8 <HAL_SPI_GetState>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d12b      	bne.n	8001f60 <SPIx_Init+0x68>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <SPIx_Init+0x6c>)
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <SPIx_Init+0x70>)
 8001f0c:	601a      	str	r2, [r3, #0]
            Since the provided driver doesn't use read capability from LCD, only constraint 
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK2 max frequency is 100 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <SPIx_Init+0x6c>)
 8001f10:	2210      	movs	r2, #16
 8001f12:	61da      	str	r2, [r3, #28]
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <SPIx_Init+0x6c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <SPIx_Init+0x6c>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	615a      	str	r2, [r3, #20]
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <SPIx_Init+0x6c>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <SPIx_Init+0x6c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <SPIx_Init+0x6c>)
 8001f2e:	2207      	movs	r2, #7
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <SPIx_Init+0x6c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <SPIx_Init+0x6c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	621a      	str	r2, [r3, #32]
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <SPIx_Init+0x6c>)
 8001f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f44:	619a      	str	r2, [r3, #24]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLED;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <SPIx_Init+0x6c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SPIx_Init+0x6c>)
 8001f4e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f52:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&hnucleo_Spi);
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <SPIx_Init+0x6c>)
 8001f56:	f7ff ff73 	bl	8001e40 <SPIx_MspInit>
    HAL_SPI_Init(&hnucleo_Spi);
 8001f5a:	4802      	ldr	r0, [pc, #8]	; (8001f64 <SPIx_Init+0x6c>)
 8001f5c:	f001 fd86 	bl	8003a6c <HAL_SPI_Init>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000674 	.word	0x20000674
 8001f68:	40013000 	.word	0x40013000

08001f6c <SPIx_Write>:
/**
  * @brief  SPI Write a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint8_t Value)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) &Value, &data, 1, SpixTimeout);
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <SPIx_Write+0x38>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f107 020e 	add.w	r2, r7, #14
 8001f82:	1df9      	adds	r1, r7, #7
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	2301      	movs	r3, #1
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <SPIx_Write+0x3c>)
 8001f8a:	f001 fdfb 	bl	8003b84 <HAL_SPI_TransmitReceive>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]
    
  /* Check the communication status */
  if(status != HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SPIx_Write+0x30>
  {
    /* Execute user timeout callback */
    SPIx_Error();
 8001f98:	f000 f808 	bl	8001fac <SPIx_Error>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000005c 	.word	0x2000005c
 8001fa8:	20000674 	.word	0x20000674

08001fac <SPIx_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPIx_Error (void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <SPIx_Error+0x14>)
 8001fb2:	f001 fdbf 	bl	8003b34 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
 8001fb6:	f7ff ff9f 	bl	8001ef8 <SPIx_Init>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000674 	.word	0x20000674

08001fc4 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes the LCD.
  */
void LCD_IO_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
   
  /* LCD_CS_GPIO and LCD_DC_GPIO Periph clock enable */
  LCD_CS_GPIO_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <LCD_IO_Init+0x84>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <LCD_IO_Init+0x84>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <LCD_IO_Init+0x84>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  LCD_DC_GPIO_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <LCD_IO_Init+0x84>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <LCD_IO_Init+0x84>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <LCD_IO_Init+0x84>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  
  /* Configure LCD_CS_PIN pin: LCD Card CS pin */
  GPIO_InitStruct.Pin = LCD_CS_PIN;
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	4619      	mov	r1, r3
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <LCD_IO_Init+0x88>)
 800201a:	f000 fdfd 	bl	8002c18 <HAL_GPIO_Init>

  /* Configure LCD_DC_PIN pin: LCD Card DC pin */
  GPIO_InitStruct.Pin = LCD_DC_PIN;
 800201e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002022:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	4619      	mov	r1, r3
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <LCD_IO_Init+0x8c>)
 800202c:	f000 fdf4 	bl	8002c18 <HAL_GPIO_Init>
  
  /* LCD chip select high */
  LCD_CS_HIGH();
 8002030:	2201      	movs	r2, #1
 8002032:	2140      	movs	r1, #64	; 0x40
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <LCD_IO_Init+0x88>)
 8002036:	f001 f86b 	bl	8003110 <HAL_GPIO_WritePin>
  
  /* LCD SPI Config */
  SPIx_Init();
 800203a:	f7ff ff5d 	bl	8001ef8 <SPIx_Init>
}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400
 8002050:	40020000 	.word	0x40020000

08002054 <LCD_IO_WriteReg>:
/**
  * @brief  Writes command to select the LCD register.
  * @param  LCDReg: Address of the selected register.
  */
void LCD_IO_WriteReg(uint8_t LCDReg)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  /* Reset LCD control line CS */
  LCD_CS_LOW();
 800205e:	2200      	movs	r2, #0
 8002060:	2140      	movs	r1, #64	; 0x40
 8002062:	480b      	ldr	r0, [pc, #44]	; (8002090 <LCD_IO_WriteReg+0x3c>)
 8002064:	f001 f854 	bl	8003110 <HAL_GPIO_WritePin>
  
  /* Set LCD data/command line DC to Low */
  LCD_DC_LOW();
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	4809      	ldr	r0, [pc, #36]	; (8002094 <LCD_IO_WriteReg+0x40>)
 8002070:	f001 f84e 	bl	8003110 <HAL_GPIO_WritePin>
    
  /* Send Command */
  SPIx_Write(LCDReg);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff78 	bl	8001f6c <SPIx_Write>
  
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800207c:	2201      	movs	r2, #1
 800207e:	2140      	movs	r1, #64	; 0x40
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <LCD_IO_WriteReg+0x3c>)
 8002082:	f001 f845 	bl	8003110 <HAL_GPIO_WritePin>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40020400 	.word	0x40020400
 8002094:	40020000 	.word	0x40020000

08002098 <LCD_IO_WriteMultipleData>:
  * @brief  Writes register value.
  * @param  pData: Pointer on the register value
  * @param  Size: Size of byte to transmit to the register
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t data = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  
  /* Reset LCD control line CS */
  LCD_CS_LOW();
 80020aa:	2200      	movs	r2, #0
 80020ac:	2140      	movs	r1, #64	; 0x40
 80020ae:	4829      	ldr	r0, [pc, #164]	; (8002154 <LCD_IO_WriteMultipleData+0xbc>)
 80020b0:	f001 f82e 	bl	8003110 <HAL_GPIO_WritePin>
  
  /* Set LCD data/command line DC to High */
  LCD_DC_HIGH();
 80020b4:	2201      	movs	r2, #1
 80020b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ba:	4827      	ldr	r0, [pc, #156]	; (8002158 <LCD_IO_WriteMultipleData+0xc0>)
 80020bc:	f001 f828 	bl	8003110 <HAL_GPIO_WritePin>

  if (Size == 1)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <LCD_IO_WriteMultipleData+0x3a>
  {
    /* Only 1 byte to be sent to LCD - general interface can be used */
    /* Send Data */
    SPIx_Write(*pData);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff4e 	bl	8001f6c <SPIx_Write>
 80020d0:	e032      	b.n	8002138 <LCD_IO_WriteMultipleData+0xa0>
  }
  else
  {
    /* Several data should be sent in a raw */
    /* Direct SPI accesses for optimization */
    for (counter = Size; counter != 0; counter--)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e024      	b.n	8002122 <LCD_IO_WriteMultipleData+0x8a>
    {
      while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 80020d8:	bf00      	nop
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d1f8      	bne.n	80020da <LCD_IO_WriteMultipleData+0x42>
      {
      }
      /* Need to invert bytes for LCD*/
      *((__IO uint8_t*)&hnucleo_Spi.Instance->DR) = *(pData+1);
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7852      	ldrb	r2, [r2, #1]
 80020f2:	701a      	strb	r2, [r3, #0]
      
      while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_TXE) != SPI_FLAG_TXE)
 80020f4:	bf00      	nop
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d1f8      	bne.n	80020f6 <LCD_IO_WriteMultipleData+0x5e>
      {
      }
      *((__IO uint8_t*)&hnucleo_Spi.Instance->DR) = *pData;
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	701a      	strb	r2, [r3, #0]
      counter--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3b01      	subs	r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
      pData += 2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3302      	adds	r3, #2
 800211a:	607b      	str	r3, [r7, #4]
    for (counter = Size; counter != 0; counter--)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1d7      	bne.n	80020d8 <LCD_IO_WriteMultipleData+0x40>
      }
  
    /* Wait until the bus is ready before releasing Chip select */ 
    while(((hnucleo_Spi.Instance->SR) & SPI_FLAG_BSY) != RESET)
 8002128:	bf00      	nop
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f8      	bne.n	800212a <LCD_IO_WriteMultipleData+0x92>
    {
    } 
  } 

  /* Empty the Rx fifo */
  data = *(&hnucleo_Spi.Instance->DR);
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <LCD_IO_WriteMultipleData+0xc4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	60bb      	str	r3, [r7, #8]
  UNUSED(data);
 8002140:	68bb      	ldr	r3, [r7, #8]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8002142:	2201      	movs	r2, #1
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <LCD_IO_WriteMultipleData+0xbc>)
 8002148:	f000 ffe2 	bl	8003110 <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40020400 	.word	0x40020400
 8002158:	40020000 	.word	0x40020000
 800215c:	20000674 	.word	0x20000674

08002160 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fc21 	bl	80029b0 <HAL_Delay>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <nRF24_CSN_L>:
static inline void nRF24_CSN_L() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2102      	movs	r1, #2
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <nRF24_CSN_L+0x14>)
 8002182:	f000 ffc5 	bl	8003110 <HAL_GPIO_WritePin>
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40020800 	.word	0x40020800

08002190 <nRF24_CSN_H>:
static inline void nRF24_CSN_H() {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	2102      	movs	r1, #2
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <nRF24_CSN_H+0x14>)
 800219a:	f000 ffb9 	bl	8003110 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40020800 	.word	0x40020800

080021a8 <nRF24_LL_RW>:
static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 80021b2:	f107 020f 	add.w	r2, r7, #15
 80021b6:	1df9      	adds	r1, r7, #7
 80021b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2301      	movs	r3, #1
 80021c0:	4806      	ldr	r0, [pc, #24]	; (80021dc <nRF24_LL_RW+0x34>)
 80021c2:	f001 fcdf 	bl	8003b84 <HAL_SPI_TransmitReceive>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <nRF24_LL_RW+0x28>
        Error_Handler();
 80021cc:	f7fe fbca 	bl	8000964 <Error_Handler>
    return result;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200006cc 	.word	0x200006cc

080021e0 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80021ea:	f7ff ffc5 	bl	8002178 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ffd6 	bl	80021a8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80021fc:	20ff      	movs	r0, #255	; 0xff
 80021fe:	f7ff ffd3 	bl	80021a8 <nRF24_LL_RW>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8002206:	f7ff ffc3 	bl	8002190 <nRF24_CSN_H>

	return value;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002224:	f7ff ffa8 	bl	8002178 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b1f      	cmp	r3, #31
 800222c:	d810      	bhi.n	8002250 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	b25b      	sxtb	r3, r3
 8002238:	f043 0320 	orr.w	r3, r3, #32
 800223c:	b25b      	sxtb	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffb1 	bl	80021a8 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ffad 	bl	80021a8 <nRF24_LL_RW>
 800224e:	e013      	b.n	8002278 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ffa8 	bl	80021a8 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2be1      	cmp	r3, #225	; 0xe1
 800225c:	d00c      	beq.n	8002278 <nRF24_WriteReg+0x64>
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	2be2      	cmp	r3, #226	; 0xe2
 8002262:	d009      	beq.n	8002278 <nRF24_WriteReg+0x64>
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2be3      	cmp	r3, #227	; 0xe3
 8002268:	d006      	beq.n	8002278 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2bff      	cmp	r3, #255	; 0xff
 800226e:	d003      	beq.n	8002278 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8002270:	79bb      	ldrb	r3, [r7, #6]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff98 	bl	80021a8 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002278:	f7ff ff8a 	bl	8002190 <nRF24_CSN_H>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	4613      	mov	r3, r2
 8002292:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002294:	f7ff ff70 	bl	8002178 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff84 	bl	80021a8 <nRF24_LL_RW>
	while (count--) {
 80022a0:	e007      	b.n	80022b2 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80022a2:	683c      	ldr	r4, [r7, #0]
 80022a4:	1c63      	adds	r3, r4, #1
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	20ff      	movs	r0, #255	; 0xff
 80022aa:	f7ff ff7d 	bl	80021a8 <nRF24_LL_RW>
 80022ae:	4603      	mov	r3, r0
 80022b0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	71ba      	strb	r2, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f2      	bne.n	80022a2 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80022bc:	f7ff ff68 	bl	8002190 <nRF24_CSN_H>
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}

080022c8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80022d8:	f7ff ff4e 	bl	8002178 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff62 	bl	80021a8 <nRF24_LL_RW>
	while (count--) {
 80022e4:	e006      	b.n	80022f4 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	603a      	str	r2, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff5a 	bl	80021a8 <nRF24_LL_RW>
	while (count--) {
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	1e5a      	subs	r2, r3, #1
 80022f8:	71ba      	strb	r2, [r7, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f3      	bne.n	80022e6 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80022fe:	f7ff ff47 	bl	8002190 <nRF24_CSN_H>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800230e:	2108      	movs	r1, #8
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ff7f 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8002316:	213f      	movs	r1, #63	; 0x3f
 8002318:	2001      	movs	r0, #1
 800231a:	f7ff ff7b 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800231e:	2103      	movs	r1, #3
 8002320:	2002      	movs	r0, #2
 8002322:	f7ff ff77 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8002326:	2103      	movs	r1, #3
 8002328:	2003      	movs	r0, #3
 800232a:	f7ff ff73 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800232e:	2103      	movs	r1, #3
 8002330:	2004      	movs	r0, #4
 8002332:	f7ff ff6f 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8002336:	2102      	movs	r1, #2
 8002338:	2005      	movs	r0, #5
 800233a:	f7ff ff6b 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800233e:	210e      	movs	r1, #14
 8002340:	2006      	movs	r0, #6
 8002342:	f7ff ff67 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8002346:	2100      	movs	r1, #0
 8002348:	2007      	movs	r0, #7
 800234a:	f7ff ff63 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800234e:	2100      	movs	r1, #0
 8002350:	2011      	movs	r0, #17
 8002352:	f7ff ff5f 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8002356:	2100      	movs	r1, #0
 8002358:	2012      	movs	r0, #18
 800235a:	f7ff ff5b 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800235e:	2100      	movs	r1, #0
 8002360:	2013      	movs	r0, #19
 8002362:	f7ff ff57 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8002366:	2100      	movs	r1, #0
 8002368:	2014      	movs	r0, #20
 800236a:	f7ff ff53 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800236e:	2100      	movs	r1, #0
 8002370:	2015      	movs	r0, #21
 8002372:	f7ff ff4f 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002376:	2100      	movs	r1, #0
 8002378:	2016      	movs	r0, #22
 800237a:	f7ff ff4b 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800237e:	2100      	movs	r1, #0
 8002380:	201c      	movs	r0, #28
 8002382:	f7ff ff47 	bl	8002214 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002386:	2100      	movs	r1, #0
 8002388:	201d      	movs	r0, #29
 800238a:	f7ff ff43 	bl	8002214 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 800238e:	f000 f9f0 	bl	8002772 <nRF24_FlushRX>
	nRF24_FlushTX();
 8002392:	f000 f9e6 	bl	8002762 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8002396:	f000 f9f4 	bl	8002782 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 800239a:	f7ff fef9 	bl	8002190 <nRF24_CSN_H>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <nRF24_Check+0x58>)
 80023ac:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80023ae:	2205      	movs	r2, #5
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	f7ff ff88 	bl	80022c8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80023b8:	463b      	mov	r3, r7
 80023ba:	2205      	movs	r2, #5
 80023bc:	4619      	mov	r1, r3
 80023be:	2010      	movs	r0, #16
 80023c0:	f7ff ff60 	bl	8002284 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e010      	b.n	80023ec <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	f107 0210 	add.w	r2, r7, #16
 80023d0:	4413      	add	r3, r2
 80023d2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1c59      	adds	r1, r3, #1
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d001      	beq.n	80023e6 <nRF24_Check+0x42>
 80023e2:	2300      	movs	r3, #0
 80023e4:	e006      	b.n	80023f4 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3301      	adds	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d9eb      	bls.n	80023ca <nRF24_Check+0x26>
	}

	return 1;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	08004ab8 	.word	0x08004ab8

08002400 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fee8 	bl	80021e0 <nRF24_ReadReg>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d104      	bne.n	8002424 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e003      	b.n	800242c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	f023 0302 	bic.w	r3, r3, #2
 800242a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4619      	mov	r1, r3
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff feef 	bl	8002214 <nRF24_WriteReg>
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff fec9 	bl	80021e0 <nRF24_ReadReg>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	b25a      	sxtb	r2, r3
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002468:	4313      	orrs	r3, r2
 800246a:	b25b      	sxtb	r3, r3
 800246c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4619      	mov	r1, r3
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff fece 	bl	8002214 <nRF24_WriteReg>
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800248a:	201d      	movs	r0, #29
 800248c:	f7ff fea8 	bl	80021e0 <nRF24_ReadReg>
 8002490:	4603      	mov	r3, r0
 8002492:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00c      	beq.n	80024b4 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	201d      	movs	r0, #29
 80024a6:	f7ff feb5 	bl	8002214 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 80024aa:	211f      	movs	r1, #31
 80024ac:	201c      	movs	r0, #28
 80024ae:	f7ff feb1 	bl	8002214 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 80024b2:	e00b      	b.n	80024cc <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	201d      	movs	r0, #29
 80024c0:	f7ff fea8 	bl	8002214 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 80024c4:	2100      	movs	r1, #0
 80024c6:	201c      	movs	r0, #28
 80024c8:	f7ff fea4 	bl	8002214 <nRF24_WriteReg>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80024de:	201d      	movs	r0, #29
 80024e0:	f7ff fe7e 	bl	80021e0 <nRF24_ReadReg>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	201d      	movs	r0, #29
 80024fa:	f7ff fe8b 	bl	8002214 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 80024fe:	e007      	b.n	8002510 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	201d      	movs	r0, #29
 800250c:	f7ff fe82 	bl	8002214 <nRF24_WriteReg>
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fe5c 	bl	80021e0 <nRF24_ReadReg>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	f023 030c 	bic.w	r3, r3, #12
 8002532:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	b25a      	sxtb	r2, r3
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4313      	orrs	r3, r2
 8002544:	b25b      	sxtb	r3, r3
 8002546:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	4619      	mov	r1, r3
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff fe61 	bl	8002214 <nRF24_WriteReg>
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4619      	mov	r1, r3
 8002568:	2005      	movs	r0, #5
 800256a:	f7ff fe53 	bl	8002214 <nRF24_WriteReg>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	3b02      	subs	r3, #2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4619      	mov	r1, r3
 8002588:	2003      	movs	r0, #3
 800258a:	f7ff fe43 	bl	8002214 <nRF24_WriteReg>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d83e      	bhi.n	8002628 <nRF24_SetAddr+0x90>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <nRF24_SetAddr+0x18>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025cd 	.word	0x080025cd
 80025b4:	080025cd 	.word	0x080025cd
 80025b8:	08002615 	.word	0x08002615
 80025bc:	08002615 	.word	0x08002615
 80025c0:	08002615 	.word	0x08002615
 80025c4:	08002615 	.word	0x08002615
 80025c8:	080025cd 	.word	0x080025cd
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff fe07 	bl	80021e0 <nRF24_ReadReg>
 80025d2:	4603      	mov	r3, r0
 80025d4:	3301      	adds	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80025e0:	f7ff fdca 	bl	8002178 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	4a13      	ldr	r2, [pc, #76]	; (8002634 <nRF24_SetAddr+0x9c>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	f043 0320 	orr.w	r3, r3, #32
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fdd9 	bl	80021a8 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	603a      	str	r2, [r7, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fdd2 	bl	80021a8 <nRF24_LL_RW>
			} while (addr_width--);
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	73fa      	strb	r2, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f3      	bne.n	80025f6 <nRF24_SetAddr+0x5e>
			nRF24_CSN_H();
 800260e:	f7ff fdbf 	bl	8002190 <nRF24_CSN_H>
			break;
 8002612:	e00a      	b.n	800262a <nRF24_SetAddr+0x92>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4a07      	ldr	r2, [pc, #28]	; (8002634 <nRF24_SetAddr+0x9c>)
 8002618:	5cd2      	ldrb	r2, [r2, r3]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff fdf7 	bl	8002214 <nRF24_WriteReg>
			break;
 8002626:	e000      	b.n	800262a <nRF24_SetAddr+0x92>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002628:	bf00      	nop
	}
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	08006d08 	.word	0x08006d08

08002638 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002642:	2006      	movs	r0, #6
 8002644:	f7ff fdcc 	bl	80021e0 <nRF24_ReadReg>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	f023 0306 	bic.w	r3, r3, #6
 8002652:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	4313      	orrs	r3, r2
 800265a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	4619      	mov	r1, r3
 8002660:	2006      	movs	r0, #6
 8002662:	f7ff fdd7 	bl	8002214 <nRF24_WriteReg>
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002678:	2006      	movs	r0, #6
 800267a:	f7ff fdb1 	bl	80021e0 <nRF24_ReadReg>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002688:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4313      	orrs	r3, r2
 8002690:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	4619      	mov	r1, r3
 8002696:	2006      	movs	r0, #6
 8002698:	f7ff fdbc 	bl	8002214 <nRF24_WriteReg>
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	460b      	mov	r3, r1
 80026b0:	71bb      	strb	r3, [r7, #6]
 80026b2:	4613      	mov	r3, r2
 80026b4:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff fd92 	bl	80021e0 <nRF24_ReadReg>
 80026bc:	4603      	mov	r3, r0
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2101      	movs	r1, #1
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b25b      	sxtb	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	4619      	mov	r1, r3
 80026da:	2002      	movs	r0, #2
 80026dc:	f7ff fd9a 	bl	8002214 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4a19      	ldr	r2, [pc, #100]	; (8002748 <nRF24_SetRXPipe+0xa4>)
 80026e4:	5cd2      	ldrb	r2, [r2, r3]
 80026e6:	797b      	ldrb	r3, [r7, #5]
 80026e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7ff fd8f 	bl	8002214 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f7ff fd72 	bl	80021e0 <nRF24_ReadReg>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002700:	79bb      	ldrb	r3, [r7, #6]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10a      	bne.n	800271c <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	b25a      	sxtb	r2, r3
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002714:	4313      	orrs	r3, r2
 8002716:	b25b      	sxtb	r3, r3
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e00b      	b.n	8002734 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2201      	movs	r2, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	b25b      	sxtb	r3, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4013      	ands	r3, r2
 8002730:	b25b      	sxtb	r3, r3
 8002732:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	4619      	mov	r1, r3
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff fd6b 	bl	8002214 <nRF24_WriteReg>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	08006d00 	.word	0x08006d00

0800274c <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002750:	2017      	movs	r0, #23
 8002752:	f7ff fd45 	bl	80021e0 <nRF24_ReadReg>
 8002756:	4603      	mov	r3, r0
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	b2db      	uxtb	r3, r3
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}

08002762 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8002762:	b580      	push	{r7, lr}
 8002764:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8002766:	21ff      	movs	r1, #255	; 0xff
 8002768:	20e1      	movs	r0, #225	; 0xe1
 800276a:	f7ff fd53 	bl	8002214 <nRF24_WriteReg>
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}

08002772 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8002776:	21ff      	movs	r1, #255	; 0xff
 8002778:	20e2      	movs	r0, #226	; 0xe2
 800277a:	f7ff fd4b 	bl	8002214 <nRF24_WriteReg>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}

08002782 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002788:	2007      	movs	r0, #7
 800278a:	f7ff fd29 	bl	80021e0 <nRF24_ReadReg>
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002798:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	4619      	mov	r1, r3
 800279e:	2007      	movs	r0, #7
 80027a0:	f7ff fd38 	bl	8002214 <nRF24_WriteReg>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 80027b2:	f7ff fce1 	bl	8002178 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 80027b6:	2060      	movs	r0, #96	; 0x60
 80027b8:	f7ff fcf6 	bl	80021a8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80027bc:	20ff      	movs	r0, #255	; 0xff
 80027be:	f7ff fcf3 	bl	80021a8 <nRF24_LL_RW>
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 80027c6:	f7ff fce3 	bl	8002190 <nRF24_CSN_H>

	return value;
 80027ca:	79fb      	ldrb	r3, [r7, #7]

}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80027e2:	2007      	movs	r0, #7
 80027e4:	f7ff fcfc 	bl	80021e0 <nRF24_ReadReg>
 80027e8:	4603      	mov	r3, r0
 80027ea:	105b      	asrs	r3, r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 80027f4:	7dfb      	ldrb	r3, [r7, #23]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d829      	bhi.n	800284e <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00f      	beq.n	8002820 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8002800:	f7ff ffd4 	bl	80027ac <nRF24_GetRxDplPayloadWidth>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b20      	cmp	r3, #32
 8002812:	d90f      	bls.n	8002834 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 800281a:	f7ff ffaa 	bl	8002772 <nRF24_FlushRX>
 800281e:	e009      	b.n	8002834 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <nRF24_ReadPayloadGeneric+0x8c>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fcda 	bl	80021e0 <nRF24_ReadReg>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68f9      	ldr	r1, [r7, #12]
 8002844:	2061      	movs	r0, #97	; 0x61
 8002846:	f7ff fd1d 	bl	8002284 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	e003      	b.n	8002856 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8002854:	23ff      	movs	r3, #255	; 0xff
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	08006d00 	.word	0x08006d00

08002864 <nRF24_ReadPayloadDpl>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,1);
 800286e:	2201      	movs	r2, #1
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffae 	bl	80027d4 <nRF24_ReadPayloadGeneric>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <nRF24_WriteAckPayload>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, char *payload, uint8_t length) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	6039      	str	r1, [r7, #0]
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	4613      	mov	r3, r2
 8002890:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002892:	f7ff fc71 	bl	8002178 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f063 0357 	orn	r3, r3, #87	; 0x57
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fc82 	bl	80021a8 <nRF24_LL_RW>
	while (length--) {
 80028a4:	e006      	b.n	80028b4 <nRF24_WriteAckPayload+0x32>
		nRF24_LL_RW((uint8_t) *payload++);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	603a      	str	r2, [r7, #0]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fc7a 	bl	80021a8 <nRF24_LL_RW>
	while (length--) {
 80028b4:	79bb      	ldrb	r3, [r7, #6]
 80028b6:	1e5a      	subs	r2, r3, #1
 80028b8:	71ba      	strb	r2, [r7, #6]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f3      	bne.n	80028a6 <nRF24_WriteAckPayload+0x24>
	}
	nRF24_CSN_H();
 80028be:	f7ff fc67 	bl	8002190 <nRF24_CSN_H>

}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_Init+0x40>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_Init+0x40>)
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_Init+0x40>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f000 f94d 	bl	8002b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 f808 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002900:	f7fe f9f8 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f965 	bl	8002bfe <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f000 f92d 	bl	8002baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000000 	.word	0x20000000
 8002968:	20000064 	.word	0x20000064
 800296c:	20000060 	.word	0x20000060

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000064 	.word	0x20000064
 8002994:	200007b8 	.word	0x200007b8

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200007b8 	.word	0x200007b8

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_Delay+0x40>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000064 	.word	0x20000064

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db0b      	blt.n	8002a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <__NVIC_EnableIRQ+0x38>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2001      	movs	r0, #1
 8002a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b60:	d301      	bcc.n	8002b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00f      	b.n	8002b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <SysTick_Config+0x40>)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6e:	210f      	movs	r1, #15
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295
 8002b74:	f7ff ff8e 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <SysTick_Config+0x40>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7e:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <SysTick_Config+0x40>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000e010 	.word	0xe000e010

08002b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff29 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff3e 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff8e 	bl	8002ae8 <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5d 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff31 	bl	8002a58 <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa2 	bl	8002b50 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b089      	sub	sp, #36	; 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	e159      	b.n	8002ee8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4013      	ands	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 8148 	bne.w	8002ee2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d00b      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c66:	2b11      	cmp	r3, #17
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b12      	cmp	r3, #18
 8002c70:	d130      	bne.n	8002cd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0201 	and.w	r2, r3, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0xfc>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d123      	bne.n	8002d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	08da      	lsrs	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3208      	adds	r2, #8
 8002d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	08da      	lsrs	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3208      	adds	r2, #8
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0203 	and.w	r2, r3, #3
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a2 	beq.w	8002ee2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b56      	ldr	r3, [pc, #344]	; (8002efc <HAL_GPIO_Init+0x2e4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x2e4>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_GPIO_Init+0x2e4>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dba:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a48      	ldr	r2, [pc, #288]	; (8002f04 <HAL_GPIO_Init+0x2ec>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x202>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x1fe>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a46      	ldr	r2, [pc, #280]	; (8002f0c <HAL_GPIO_Init+0x2f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x1fa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	; (8002f10 <HAL_GPIO_Init+0x2f8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x1f6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a44      	ldr	r2, [pc, #272]	; (8002f14 <HAL_GPIO_Init+0x2fc>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x1f2>
 8002e06:	2304      	movs	r3, #4
 8002e08:	e008      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	e006      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e004      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e002      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_GPIO_Init+0x204>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	0092      	lsls	r2, r2, #2
 8002e24:	4093      	lsls	r3, r2
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2c:	4934      	ldr	r1, [pc, #208]	; (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3a:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5e:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e64:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_GPIO_Init+0x300>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b0f      	cmp	r3, #15
 8002eec:	f67f aea2 	bls.w	8002c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3724      	adds	r7, #36	; 0x24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e0bb      	b.n	80030b0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	f040 80ab 	bne.w	80030aa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f54:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <HAL_GPIO_DeInit+0x1a8>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a53      	ldr	r2, [pc, #332]	; (80030c8 <HAL_GPIO_DeInit+0x1ac>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_DeInit+0x96>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_GPIO_DeInit+0x1b0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_DeInit+0x92>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a51      	ldr	r2, [pc, #324]	; (80030d0 <HAL_GPIO_DeInit+0x1b4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_DeInit+0x8e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <HAL_GPIO_DeInit+0x1b8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_DeInit+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	; (80030d8 <HAL_GPIO_DeInit+0x1bc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_DeInit+0x86>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e008      	b.n	8002fb4 <HAL_GPIO_DeInit+0x98>
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_DeInit+0x98>
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e004      	b.n	8002fb4 <HAL_GPIO_DeInit+0x98>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e002      	b.n	8002fb4 <HAL_GPIO_DeInit+0x98>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_GPIO_DeInit+0x98>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	f002 0203 	and.w	r2, r2, #3
 8002fba:	0092      	lsls	r2, r2, #2
 8002fbc:	4093      	lsls	r3, r2
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d132      	bne.n	800302a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002fc4:	4b45      	ldr	r3, [pc, #276]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	4943      	ldr	r1, [pc, #268]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fd2:	4b42      	ldr	r3, [pc, #264]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	4940      	ldr	r1, [pc, #256]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fe0:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	493c      	ldr	r1, [pc, #240]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_GPIO_DeInit+0x1c0>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_GPIO_DeInit+0x1a8>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	43da      	mvns	r2, r3
 800301c:	4829      	ldr	r0, [pc, #164]	; (80030c4 <HAL_GPIO_DeInit+0x1a8>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	400a      	ands	r2, r1
 8003024:	3302      	adds	r3, #2
 8003026:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2103      	movs	r1, #3
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	08d2      	lsrs	r2, r2, #3
 8003060:	4019      	ands	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2103      	movs	r1, #3
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	2101      	movs	r1, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2103      	movs	r1, #3
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f af40 	bls.w	8002f38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40013800 	.word	0x40013800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e001      	b.n	8003102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	887b      	ldrh	r3, [r7, #2]
 8003154:	401a      	ands	r2, r3
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	429a      	cmp	r2, r3
 800315a:	d104      	bne.n	8003166 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	041a      	lsls	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003164:	e002      	b.n	800316c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	619a      	str	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fb7e 	bl	8000898 <HAL_GPIO_EXTI_Callback>
  }
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e25b      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c6:	4ba3      	ldr	r3, [pc, #652]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b9d      	ldr	r3, [pc, #628]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b99      	ldr	r3, [pc, #612]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e236      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b91      	ldr	r3, [pc, #580]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a90      	ldr	r2, [pc, #576]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8a      	ldr	r2, [pc, #552]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a87      	ldr	r2, [pc, #540]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b84      	ldr	r3, [pc, #528]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a83      	ldr	r2, [pc, #524]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a80      	ldr	r2, [pc, #512]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fb9a 	bl	8002998 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7ff fb96 	bl	8002998 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1fb      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b76      	ldr	r3, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7ff fb86 	bl	8002998 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7ff fb82 	bl	8002998 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1e7      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1bb      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4952      	ldr	r1, [pc, #328]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_OscConfig+0x2b0>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7ff fb3b 	bl	8002998 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003326:	f7ff fb37 	bl	8002998 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e19c      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b46      	ldr	r3, [pc, #280]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4940      	ldr	r1, [pc, #256]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x2b0>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7ff fb1a 	bl	8002998 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7ff fb16 	bl	8002998 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e17b      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b36      	ldr	r3, [pc, #216]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d030      	beq.n	80033f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b30      	ldr	r3, [pc, #192]	; (800345c <HAL_RCC_OscConfig+0x2b4>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7ff fafa 	bl	8002998 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7ff faf6 	bl	8002998 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e15b      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e015      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x2b4>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7ff fae3 	bl	8002998 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d6:	f7ff fadf 	bl	8002998 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e144      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80a0 	beq.w	8003542 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a07      	ldr	r2, [pc, #28]	; (8003460 <HAL_RCC_OscConfig+0x2b8>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7ff faa5 	bl	8002998 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e011      	b.n	8003476 <HAL_RCC_OscConfig+0x2ce>
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	42470000 	.word	0x42470000
 800345c:	42470e80 	.word	0x42470e80
 8003460:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7ff fa98 	bl	8002998 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0fd      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b81      	ldr	r3, [pc, #516]	; (800367c <HAL_RCC_OscConfig+0x4d4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x2f0>
 800348a:	4b7d      	ldr	r3, [pc, #500]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a7c      	ldr	r2, [pc, #496]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e01c      	b.n	80034d2 <HAL_RCC_OscConfig+0x32a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d10c      	bne.n	80034ba <HAL_RCC_OscConfig+0x312>
 80034a0:	4b77      	ldr	r3, [pc, #476]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a76      	ldr	r2, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	4b74      	ldr	r3, [pc, #464]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a73      	ldr	r2, [pc, #460]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0x32a>
 80034ba:	4b71      	ldr	r3, [pc, #452]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a70      	ldr	r2, [pc, #448]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	4b6e      	ldr	r3, [pc, #440]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a6d      	ldr	r2, [pc, #436]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d015      	beq.n	8003506 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7ff fa5d 	bl	8002998 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7ff fa59 	bl	8002998 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0bc      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4b61      	ldr	r3, [pc, #388]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ee      	beq.n	80034e2 <HAL_RCC_OscConfig+0x33a>
 8003504:	e014      	b.n	8003530 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7ff fa47 	bl	8002998 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350c:	e00a      	b.n	8003524 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350e:	f7ff fa43 	bl	8002998 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	4293      	cmp	r3, r2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e0a6      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ee      	bne.n	800350e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003536:	4b52      	ldr	r3, [pc, #328]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a51      	ldr	r2, [pc, #324]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 800353c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8092 	beq.w	8003670 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d05c      	beq.n	8003612 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d141      	bne.n	80035e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_RCC_OscConfig+0x4dc>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7ff fa17 	bl	8002998 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356e:	f7ff fa13 	bl	8002998 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e078      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003580:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	019b      	lsls	r3, r3, #6
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	4933      	ldr	r1, [pc, #204]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4dc>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7ff f9ec 	bl	8002998 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c4:	f7ff f9e8 	bl	8002998 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e04d      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b2a      	ldr	r3, [pc, #168]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x41c>
 80035e2:	e045      	b.n	8003670 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e4:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_RCC_OscConfig+0x4dc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7ff f9d5 	bl	8002998 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f2:	f7ff f9d1 	bl	8002998 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e036      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003604:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x44a>
 8003610:	e02e      	b.n	8003670 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e029      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800361e:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_RCC_OscConfig+0x4d8>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	429a      	cmp	r2, r3
 8003630:	d11c      	bne.n	800366c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d115      	bne.n	800366c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003646:	4013      	ands	r3, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800364c:	4293      	cmp	r3, r2
 800364e:	d10d      	bne.n	800366c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d106      	bne.n	800366c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40007000 	.word	0x40007000
 8003680:	40023800 	.word	0x40023800
 8003684:	42470060 	.word	0x42470060

08003688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0cc      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b68      	ldr	r3, [pc, #416]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d90c      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b2:	4b63      	ldr	r3, [pc, #396]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d001      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0b8      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d020      	beq.n	8003712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	494d      	ldr	r1, [pc, #308]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d044      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d119      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d003      	beq.n	8003746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003742:	2b03      	cmp	r3, #3
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e067      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b37      	ldr	r3, [pc, #220]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4934      	ldr	r1, [pc, #208]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7ff f90e 	bl	8002998 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7ff f90a 	bl	8002998 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e04f      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d20c      	bcs.n	80037d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037be:	4b20      	ldr	r3, [pc, #128]	; (8003840 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e032      	b.n	8003836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4916      	ldr	r1, [pc, #88]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	490e      	ldr	r1, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380e:	f000 f821 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003812:	4601      	mov	r1, r0
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	fa21 f303 	lsr.w	r3, r1, r3
 8003826:	4a09      	ldr	r2, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff f86e 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023c00 	.word	0x40023c00
 8003844:	40023800 	.word	0x40023800
 8003848:	08004ac4 	.word	0x08004ac4
 800384c:	20000000 	.word	0x20000000
 8003850:	20000060 	.word	0x20000060

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386a:	4b63      	ldr	r3, [pc, #396]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b04      	cmp	r3, #4
 8003874:	d007      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x32>
 8003876:	2b08      	cmp	r3, #8
 8003878:	d008      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x38>
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 80b4 	bne.w	80039e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003880:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003882:	60bb      	str	r3, [r7, #8]
       break;
 8003884:	e0b3      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003886:	4b5e      	ldr	r3, [pc, #376]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003888:	60bb      	str	r3, [r7, #8]
      break;
 800388a:	e0b0      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800388c:	4b5a      	ldr	r3, [pc, #360]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003894:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d04a      	beq.n	8003938 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	ea03 0501 	and.w	r5, r3, r1
 80038b8:	ea04 0602 	and.w	r6, r4, r2
 80038bc:	4629      	mov	r1, r5
 80038be:	4632      	mov	r2, r6
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	0154      	lsls	r4, r2, #5
 80038ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ce:	014b      	lsls	r3, r1, #5
 80038d0:	4619      	mov	r1, r3
 80038d2:	4622      	mov	r2, r4
 80038d4:	1b49      	subs	r1, r1, r5
 80038d6:	eb62 0206 	sbc.w	r2, r2, r6
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	0194      	lsls	r4, r2, #6
 80038e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038e8:	018b      	lsls	r3, r1, #6
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	eb64 0402 	sbc.w	r4, r4, r2
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	00e2      	lsls	r2, r4, #3
 80038fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038fe:	00d9      	lsls	r1, r3, #3
 8003900:	460b      	mov	r3, r1
 8003902:	4614      	mov	r4, r2
 8003904:	195b      	adds	r3, r3, r5
 8003906:	eb44 0406 	adc.w	r4, r4, r6
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	0262      	lsls	r2, r4, #9
 8003914:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003918:	0259      	lsls	r1, r3, #9
 800391a:	460b      	mov	r3, r1
 800391c:	4614      	mov	r4, r2
 800391e:	4618      	mov	r0, r3
 8003920:	4621      	mov	r1, r4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	f7fc fc5c 	bl	80001e8 <__aeabi_uldivmod>
 8003930:	4603      	mov	r3, r0
 8003932:	460c      	mov	r4, r1
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e049      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	f04f 0400 	mov.w	r4, #0
 8003942:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	ea03 0501 	and.w	r5, r3, r1
 800394e:	ea04 0602 	and.w	r6, r4, r2
 8003952:	4629      	mov	r1, r5
 8003954:	4632      	mov	r2, r6
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	f04f 0400 	mov.w	r4, #0
 800395e:	0154      	lsls	r4, r2, #5
 8003960:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003964:	014b      	lsls	r3, r1, #5
 8003966:	4619      	mov	r1, r3
 8003968:	4622      	mov	r2, r4
 800396a:	1b49      	subs	r1, r1, r5
 800396c:	eb62 0206 	sbc.w	r2, r2, r6
 8003970:	f04f 0300 	mov.w	r3, #0
 8003974:	f04f 0400 	mov.w	r4, #0
 8003978:	0194      	lsls	r4, r2, #6
 800397a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800397e:	018b      	lsls	r3, r1, #6
 8003980:	1a5b      	subs	r3, r3, r1
 8003982:	eb64 0402 	sbc.w	r4, r4, r2
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	00e2      	lsls	r2, r4, #3
 8003990:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003994:	00d9      	lsls	r1, r3, #3
 8003996:	460b      	mov	r3, r1
 8003998:	4614      	mov	r4, r2
 800399a:	195b      	adds	r3, r3, r5
 800399c:	eb44 0406 	adc.w	r4, r4, r6
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	02a2      	lsls	r2, r4, #10
 80039aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039ae:	0299      	lsls	r1, r3, #10
 80039b0:	460b      	mov	r3, r1
 80039b2:	4614      	mov	r4, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	4621      	mov	r1, r4
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f04f 0400 	mov.w	r4, #0
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	f7fc fc11 	bl	80001e8 <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	60bb      	str	r3, [r7, #8]
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ea:	60bb      	str	r3, [r7, #8]
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	68bb      	ldr	r3, [r7, #8]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	007a1200 	.word	0x007a1200

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4601      	mov	r1, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	08004ad4 	.word	0x08004ad4

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a48:	f7ff ffdc 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4601      	mov	r1, r0
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4a03      	ldr	r2, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5a:	5cd3      	ldrb	r3, [r2, r3]
 8003a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08004ad4 	.word	0x08004ad4

08003a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e056      	b.n	8003b2c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7fd f953 	bl	8000d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	ea42 0103 	orr.w	r1, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	f003 0104 	and.w	r1, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69da      	ldr	r2, [r3, #28]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e01a      	b.n	8003b7c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f95a 	bl	8000e18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b92:	2301      	movs	r3, #1
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x26>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e18a      	b.n	8003ec0 <HAL_SPI_TransmitReceive+0x33c>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bb2:	f7fe fef1 	bl	8002998 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d00f      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x70>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d107      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d103      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x68>
 8003be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d003      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bf2:	e15b      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x82>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_SPI_TransmitReceive+0x82>
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c0c:	e14e      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	887a      	ldrh	r2, [r7, #2]
 8003c4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d007      	beq.n	8003c76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d178      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x10a>
 8003c88:	8b7b      	ldrh	r3, [r7, #26]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d166      	bne.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb2:	e053      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d11b      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d113      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	1c9a      	adds	r2, r3, #2
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d119      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x1b8>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d3c:	f7fe fe2c 	bl	8002998 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d807      	bhi.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d003      	beq.n	8003d5c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d5a:	e0a7      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1a6      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x130>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1a1      	bne.n	8003cb4 <HAL_SPI_TransmitReceive+0x130>
 8003d70:	e07c      	b.n	8003e6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x1fc>
 8003d7a:	8b7b      	ldrh	r3, [r7, #26]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d16b      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	7812      	ldrb	r2, [r2, #0]
 8003d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da6:	e057      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d11c      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d114      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d119      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x2ae>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d014      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e32:	f7fe fdb1 	bl	8002998 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d803      	bhi.n	8003e4a <HAL_SPI_TransmitReceive+0x2c6>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d102      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x2cc>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e56:	e029      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1a2      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x224>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d19d      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f8a1 	bl	8003fb8 <SPI_EndRxTxTransaction>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e88:	e010      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	e000      	b.n	8003eac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3730      	adds	r7, #48	; 0x30
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed6:	b2db      	uxtb	r3, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ef4:	e04c      	b.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d048      	beq.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003efe:	f7fe fd4b 	bl	8002998 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d902      	bls.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13d      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2c:	d111      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f36:	d004      	beq.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d107      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f5a:	d10f      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e00f      	b.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d1a3      	bne.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <SPI_EndRxTxTransaction+0x7c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <SPI_EndRxTxTransaction+0x80>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	0d5b      	lsrs	r3, r3, #21
 8003fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe2:	d112      	bne.n	800400a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	; 0x80
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff ff78 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00f      	b.n	800402a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	3b01      	subs	r3, #1
 8004014:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d0f2      	beq.n	800400a <SPI_EndRxTxTransaction+0x52>
 8004024:	e000      	b.n	8004028 <SPI_EndRxTxTransaction+0x70>
        break;
 8004026:	bf00      	nop
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000000 	.word	0x20000000
 8004038:	165e9f81 	.word	0x165e9f81

0800403c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03f      	b.n	80040ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fefe 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f90b 	bl	800429c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b088      	sub	sp, #32
 80040da:	af02      	add	r7, sp, #8
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	f040 8083 	bne.w	80041fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Transmit+0x2e>
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e07b      	b.n	8004200 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_UART_Transmit+0x40>
 8004112:	2302      	movs	r3, #2
 8004114:	e074      	b.n	8004200 <HAL_UART_Transmit+0x12a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2221      	movs	r2, #33	; 0x21
 8004128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800412c:	f7fe fc34 	bl	8002998 <HAL_GetTick>
 8004130:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	88fa      	ldrh	r2, [r7, #6]
 8004136:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004146:	e042      	b.n	80041ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	d122      	bne.n	80041a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2200      	movs	r2, #0
 8004168:	2180      	movs	r1, #128	; 0x80
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f84c 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e042      	b.n	8004200 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800418c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3302      	adds	r3, #2
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	e017      	b.n	80041ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	e013      	b.n	80041ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f829 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e01f      	b.n	8004200 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	60ba      	str	r2, [r7, #8]
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1b7      	bne.n	8004148 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f810 	bl	8004208 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e006      	b.n	8004200 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004218:	e02c      	b.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d028      	beq.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x30>
 8004228:	f7fe fbb6 	bl	8002998 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d21d      	bcs.n	8004274 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004246:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e00f      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4013      	ands	r3, r2
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	429a      	cmp	r2, r3
 8004290:	d0c3      	beq.n	800421a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042de:	f023 030c 	bic.w	r3, r3, #12
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	430b      	orrs	r3, r1
 80042ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	f040 818b 	bne.w	8004624 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4ac1      	ldr	r2, [pc, #772]	; (8004618 <UART_SetConfig+0x37c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d005      	beq.n	8004324 <UART_SetConfig+0x88>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4abf      	ldr	r2, [pc, #764]	; (800461c <UART_SetConfig+0x380>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f040 80bd 	bne.w	800449e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004324:	f7ff fb8e 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8004328:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	461d      	mov	r5, r3
 800432e:	f04f 0600 	mov.w	r6, #0
 8004332:	46a8      	mov	r8, r5
 8004334:	46b1      	mov	r9, r6
 8004336:	eb18 0308 	adds.w	r3, r8, r8
 800433a:	eb49 0409 	adc.w	r4, r9, r9
 800433e:	4698      	mov	r8, r3
 8004340:	46a1      	mov	r9, r4
 8004342:	eb18 0805 	adds.w	r8, r8, r5
 8004346:	eb49 0906 	adc.w	r9, r9, r6
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004356:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800435a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800435e:	4688      	mov	r8, r1
 8004360:	4691      	mov	r9, r2
 8004362:	eb18 0005 	adds.w	r0, r8, r5
 8004366:	eb49 0106 	adc.w	r1, r9, r6
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	461d      	mov	r5, r3
 8004370:	f04f 0600 	mov.w	r6, #0
 8004374:	196b      	adds	r3, r5, r5
 8004376:	eb46 0406 	adc.w	r4, r6, r6
 800437a:	461a      	mov	r2, r3
 800437c:	4623      	mov	r3, r4
 800437e:	f7fb ff33 	bl	80001e8 <__aeabi_uldivmod>
 8004382:	4603      	mov	r3, r0
 8004384:	460c      	mov	r4, r1
 8004386:	461a      	mov	r2, r3
 8004388:	4ba5      	ldr	r3, [pc, #660]	; (8004620 <UART_SetConfig+0x384>)
 800438a:	fba3 2302 	umull	r2, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	461d      	mov	r5, r3
 8004398:	f04f 0600 	mov.w	r6, #0
 800439c:	46a9      	mov	r9, r5
 800439e:	46b2      	mov	sl, r6
 80043a0:	eb19 0309 	adds.w	r3, r9, r9
 80043a4:	eb4a 040a 	adc.w	r4, sl, sl
 80043a8:	4699      	mov	r9, r3
 80043aa:	46a2      	mov	sl, r4
 80043ac:	eb19 0905 	adds.w	r9, r9, r5
 80043b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c8:	4689      	mov	r9, r1
 80043ca:	4692      	mov	sl, r2
 80043cc:	eb19 0005 	adds.w	r0, r9, r5
 80043d0:	eb4a 0106 	adc.w	r1, sl, r6
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	461d      	mov	r5, r3
 80043da:	f04f 0600 	mov.w	r6, #0
 80043de:	196b      	adds	r3, r5, r5
 80043e0:	eb46 0406 	adc.w	r4, r6, r6
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	f7fb fefe 	bl	80001e8 <__aeabi_uldivmod>
 80043ec:	4603      	mov	r3, r0
 80043ee:	460c      	mov	r4, r1
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <UART_SetConfig+0x384>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a86      	ldr	r2, [pc, #536]	; (8004620 <UART_SetConfig+0x384>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004414:	4498      	add	r8, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	461d      	mov	r5, r3
 800441a:	f04f 0600 	mov.w	r6, #0
 800441e:	46a9      	mov	r9, r5
 8004420:	46b2      	mov	sl, r6
 8004422:	eb19 0309 	adds.w	r3, r9, r9
 8004426:	eb4a 040a 	adc.w	r4, sl, sl
 800442a:	4699      	mov	r9, r3
 800442c:	46a2      	mov	sl, r4
 800442e:	eb19 0905 	adds.w	r9, r9, r5
 8004432:	eb4a 0a06 	adc.w	sl, sl, r6
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800444a:	4689      	mov	r9, r1
 800444c:	4692      	mov	sl, r2
 800444e:	eb19 0005 	adds.w	r0, r9, r5
 8004452:	eb4a 0106 	adc.w	r1, sl, r6
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	461d      	mov	r5, r3
 800445c:	f04f 0600 	mov.w	r6, #0
 8004460:	196b      	adds	r3, r5, r5
 8004462:	eb46 0406 	adc.w	r4, r6, r6
 8004466:	461a      	mov	r2, r3
 8004468:	4623      	mov	r3, r4
 800446a:	f7fb febd 	bl	80001e8 <__aeabi_uldivmod>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	461a      	mov	r2, r3
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <UART_SetConfig+0x384>)
 8004476:	fba3 1302 	umull	r1, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2164      	movs	r1, #100	; 0x64
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a65      	ldr	r2, [pc, #404]	; (8004620 <UART_SetConfig+0x384>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 0207 	and.w	r2, r3, #7
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4442      	add	r2, r8
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e26f      	b.n	800497e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449e:	f7ff fabd 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80044a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	461d      	mov	r5, r3
 80044a8:	f04f 0600 	mov.w	r6, #0
 80044ac:	46a8      	mov	r8, r5
 80044ae:	46b1      	mov	r9, r6
 80044b0:	eb18 0308 	adds.w	r3, r8, r8
 80044b4:	eb49 0409 	adc.w	r4, r9, r9
 80044b8:	4698      	mov	r8, r3
 80044ba:	46a1      	mov	r9, r4
 80044bc:	eb18 0805 	adds.w	r8, r8, r5
 80044c0:	eb49 0906 	adc.w	r9, r9, r6
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044d8:	4688      	mov	r8, r1
 80044da:	4691      	mov	r9, r2
 80044dc:	eb18 0005 	adds.w	r0, r8, r5
 80044e0:	eb49 0106 	adc.w	r1, r9, r6
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	461d      	mov	r5, r3
 80044ea:	f04f 0600 	mov.w	r6, #0
 80044ee:	196b      	adds	r3, r5, r5
 80044f0:	eb46 0406 	adc.w	r4, r6, r6
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	f7fb fe76 	bl	80001e8 <__aeabi_uldivmod>
 80044fc:	4603      	mov	r3, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	461a      	mov	r2, r3
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <UART_SetConfig+0x384>)
 8004504:	fba3 2302 	umull	r2, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	461d      	mov	r5, r3
 8004512:	f04f 0600 	mov.w	r6, #0
 8004516:	46a9      	mov	r9, r5
 8004518:	46b2      	mov	sl, r6
 800451a:	eb19 0309 	adds.w	r3, r9, r9
 800451e:	eb4a 040a 	adc.w	r4, sl, sl
 8004522:	4699      	mov	r9, r3
 8004524:	46a2      	mov	sl, r4
 8004526:	eb19 0905 	adds.w	r9, r9, r5
 800452a:	eb4a 0a06 	adc.w	sl, sl, r6
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800453e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004542:	4689      	mov	r9, r1
 8004544:	4692      	mov	sl, r2
 8004546:	eb19 0005 	adds.w	r0, r9, r5
 800454a:	eb4a 0106 	adc.w	r1, sl, r6
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	461d      	mov	r5, r3
 8004554:	f04f 0600 	mov.w	r6, #0
 8004558:	196b      	adds	r3, r5, r5
 800455a:	eb46 0406 	adc.w	r4, r6, r6
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fb fe41 	bl	80001e8 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	461a      	mov	r2, r3
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <UART_SetConfig+0x384>)
 800456e:	fba3 1302 	umull	r1, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2164      	movs	r1, #100	; 0x64
 8004576:	fb01 f303 	mul.w	r3, r1, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <UART_SetConfig+0x384>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800458e:	4498      	add	r8, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	461d      	mov	r5, r3
 8004594:	f04f 0600 	mov.w	r6, #0
 8004598:	46a9      	mov	r9, r5
 800459a:	46b2      	mov	sl, r6
 800459c:	eb19 0309 	adds.w	r3, r9, r9
 80045a0:	eb4a 040a 	adc.w	r4, sl, sl
 80045a4:	4699      	mov	r9, r3
 80045a6:	46a2      	mov	sl, r4
 80045a8:	eb19 0905 	adds.w	r9, r9, r5
 80045ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80045b0:	f04f 0100 	mov.w	r1, #0
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045c4:	4689      	mov	r9, r1
 80045c6:	4692      	mov	sl, r2
 80045c8:	eb19 0005 	adds.w	r0, r9, r5
 80045cc:	eb4a 0106 	adc.w	r1, sl, r6
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	461d      	mov	r5, r3
 80045d6:	f04f 0600 	mov.w	r6, #0
 80045da:	196b      	adds	r3, r5, r5
 80045dc:	eb46 0406 	adc.w	r4, r6, r6
 80045e0:	461a      	mov	r2, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	f7fb fe00 	bl	80001e8 <__aeabi_uldivmod>
 80045e8:	4603      	mov	r3, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <UART_SetConfig+0x384>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <UART_SetConfig+0x384>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 0207 	and.w	r2, r3, #7
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4442      	add	r2, r8
 8004614:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004616:	e1b2      	b.n	800497e <UART_SetConfig+0x6e2>
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4ad7      	ldr	r2, [pc, #860]	; (8004988 <UART_SetConfig+0x6ec>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d005      	beq.n	800463a <UART_SetConfig+0x39e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4ad6      	ldr	r2, [pc, #856]	; (800498c <UART_SetConfig+0x6f0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	f040 80d1 	bne.w	80047dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800463a:	f7ff fa03 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 800463e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	469a      	mov	sl, r3
 8004644:	f04f 0b00 	mov.w	fp, #0
 8004648:	46d0      	mov	r8, sl
 800464a:	46d9      	mov	r9, fp
 800464c:	eb18 0308 	adds.w	r3, r8, r8
 8004650:	eb49 0409 	adc.w	r4, r9, r9
 8004654:	4698      	mov	r8, r3
 8004656:	46a1      	mov	r9, r4
 8004658:	eb18 080a 	adds.w	r8, r8, sl
 800465c:	eb49 090b 	adc.w	r9, r9, fp
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800466c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004670:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004674:	4688      	mov	r8, r1
 8004676:	4691      	mov	r9, r2
 8004678:	eb1a 0508 	adds.w	r5, sl, r8
 800467c:	eb4b 0609 	adc.w	r6, fp, r9
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	f04f 0400 	mov.w	r4, #0
 8004692:	0094      	lsls	r4, r2, #2
 8004694:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004698:	008b      	lsls	r3, r1, #2
 800469a:	461a      	mov	r2, r3
 800469c:	4623      	mov	r3, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	4631      	mov	r1, r6
 80046a2:	f7fb fda1 	bl	80001e8 <__aeabi_uldivmod>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	461a      	mov	r2, r3
 80046ac:	4bb8      	ldr	r3, [pc, #736]	; (8004990 <UART_SetConfig+0x6f4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	469b      	mov	fp, r3
 80046bc:	f04f 0c00 	mov.w	ip, #0
 80046c0:	46d9      	mov	r9, fp
 80046c2:	46e2      	mov	sl, ip
 80046c4:	eb19 0309 	adds.w	r3, r9, r9
 80046c8:	eb4a 040a 	adc.w	r4, sl, sl
 80046cc:	4699      	mov	r9, r3
 80046ce:	46a2      	mov	sl, r4
 80046d0:	eb19 090b 	adds.w	r9, r9, fp
 80046d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046ec:	4689      	mov	r9, r1
 80046ee:	4692      	mov	sl, r2
 80046f0:	eb1b 0509 	adds.w	r5, fp, r9
 80046f4:	eb4c 060a 	adc.w	r6, ip, sl
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	0094      	lsls	r4, r2, #2
 800470c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004710:	008b      	lsls	r3, r1, #2
 8004712:	461a      	mov	r2, r3
 8004714:	4623      	mov	r3, r4
 8004716:	4628      	mov	r0, r5
 8004718:	4631      	mov	r1, r6
 800471a:	f7fb fd65 	bl	80001e8 <__aeabi_uldivmod>
 800471e:	4603      	mov	r3, r0
 8004720:	460c      	mov	r4, r1
 8004722:	461a      	mov	r2, r3
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <UART_SetConfig+0x6f4>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2164      	movs	r1, #100	; 0x64
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a95      	ldr	r2, [pc, #596]	; (8004990 <UART_SetConfig+0x6f4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004744:	4498      	add	r8, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	469b      	mov	fp, r3
 800474a:	f04f 0c00 	mov.w	ip, #0
 800474e:	46d9      	mov	r9, fp
 8004750:	46e2      	mov	sl, ip
 8004752:	eb19 0309 	adds.w	r3, r9, r9
 8004756:	eb4a 040a 	adc.w	r4, sl, sl
 800475a:	4699      	mov	r9, r3
 800475c:	46a2      	mov	sl, r4
 800475e:	eb19 090b 	adds.w	r9, r9, fp
 8004762:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004772:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004776:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800477a:	4689      	mov	r9, r1
 800477c:	4692      	mov	sl, r2
 800477e:	eb1b 0509 	adds.w	r5, fp, r9
 8004782:	eb4c 060a 	adc.w	r6, ip, sl
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4619      	mov	r1, r3
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f04f 0400 	mov.w	r4, #0
 8004798:	0094      	lsls	r4, r2, #2
 800479a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800479e:	008b      	lsls	r3, r1, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	4628      	mov	r0, r5
 80047a6:	4631      	mov	r1, r6
 80047a8:	f7fb fd1e 	bl	80001e8 <__aeabi_uldivmod>
 80047ac:	4603      	mov	r3, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	461a      	mov	r2, r3
 80047b2:	4b77      	ldr	r3, [pc, #476]	; (8004990 <UART_SetConfig+0x6f4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	; 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	3332      	adds	r3, #50	; 0x32
 80047c6:	4a72      	ldr	r2, [pc, #456]	; (8004990 <UART_SetConfig+0x6f4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4442      	add	r2, r8
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	e0d0      	b.n	800497e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047dc:	f7ff f91e 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 80047e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	469a      	mov	sl, r3
 80047e6:	f04f 0b00 	mov.w	fp, #0
 80047ea:	46d0      	mov	r8, sl
 80047ec:	46d9      	mov	r9, fp
 80047ee:	eb18 0308 	adds.w	r3, r8, r8
 80047f2:	eb49 0409 	adc.w	r4, r9, r9
 80047f6:	4698      	mov	r8, r3
 80047f8:	46a1      	mov	r9, r4
 80047fa:	eb18 080a 	adds.w	r8, r8, sl
 80047fe:	eb49 090b 	adc.w	r9, r9, fp
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800480e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004816:	4688      	mov	r8, r1
 8004818:	4691      	mov	r9, r2
 800481a:	eb1a 0508 	adds.w	r5, sl, r8
 800481e:	eb4b 0609 	adc.w	r6, fp, r9
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	f04f 0400 	mov.w	r4, #0
 8004834:	0094      	lsls	r4, r2, #2
 8004836:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800483a:	008b      	lsls	r3, r1, #2
 800483c:	461a      	mov	r2, r3
 800483e:	4623      	mov	r3, r4
 8004840:	4628      	mov	r0, r5
 8004842:	4631      	mov	r1, r6
 8004844:	f7fb fcd0 	bl	80001e8 <__aeabi_uldivmod>
 8004848:	4603      	mov	r3, r0
 800484a:	460c      	mov	r4, r1
 800484c:	461a      	mov	r2, r3
 800484e:	4b50      	ldr	r3, [pc, #320]	; (8004990 <UART_SetConfig+0x6f4>)
 8004850:	fba3 2302 	umull	r2, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	469b      	mov	fp, r3
 800485e:	f04f 0c00 	mov.w	ip, #0
 8004862:	46d9      	mov	r9, fp
 8004864:	46e2      	mov	sl, ip
 8004866:	eb19 0309 	adds.w	r3, r9, r9
 800486a:	eb4a 040a 	adc.w	r4, sl, sl
 800486e:	4699      	mov	r9, r3
 8004870:	46a2      	mov	sl, r4
 8004872:	eb19 090b 	adds.w	r9, r9, fp
 8004876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800487a:	f04f 0100 	mov.w	r1, #0
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800488a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800488e:	4689      	mov	r9, r1
 8004890:	4692      	mov	sl, r2
 8004892:	eb1b 0509 	adds.w	r5, fp, r9
 8004896:	eb4c 060a 	adc.w	r6, ip, sl
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4619      	mov	r1, r3
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	f04f 0400 	mov.w	r4, #0
 80048ac:	0094      	lsls	r4, r2, #2
 80048ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048b2:	008b      	lsls	r3, r1, #2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	4631      	mov	r1, r6
 80048bc:	f7fb fc94 	bl	80001e8 <__aeabi_uldivmod>
 80048c0:	4603      	mov	r3, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	461a      	mov	r2, r3
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <UART_SetConfig+0x6f4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2164      	movs	r1, #100	; 0x64
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	3332      	adds	r3, #50	; 0x32
 80048da:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <UART_SetConfig+0x6f4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e6:	4498      	add	r8, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	469b      	mov	fp, r3
 80048ec:	f04f 0c00 	mov.w	ip, #0
 80048f0:	46d9      	mov	r9, fp
 80048f2:	46e2      	mov	sl, ip
 80048f4:	eb19 0309 	adds.w	r3, r9, r9
 80048f8:	eb4a 040a 	adc.w	r4, sl, sl
 80048fc:	4699      	mov	r9, r3
 80048fe:	46a2      	mov	sl, r4
 8004900:	eb19 090b 	adds.w	r9, r9, fp
 8004904:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004914:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004918:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800491c:	4689      	mov	r9, r1
 800491e:	4692      	mov	sl, r2
 8004920:	eb1b 0509 	adds.w	r5, fp, r9
 8004924:	eb4c 060a 	adc.w	r6, ip, sl
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4619      	mov	r1, r3
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	0094      	lsls	r4, r2, #2
 800493c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004940:	008b      	lsls	r3, r1, #2
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	4628      	mov	r0, r5
 8004948:	4631      	mov	r1, r6
 800494a:	f7fb fc4d 	bl	80001e8 <__aeabi_uldivmod>
 800494e:	4603      	mov	r3, r0
 8004950:	460c      	mov	r4, r1
 8004952:	461a      	mov	r2, r3
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <UART_SetConfig+0x6f4>)
 8004956:	fba3 1302 	umull	r1, r3, r3, r2
 800495a:	095b      	lsrs	r3, r3, #5
 800495c:	2164      	movs	r1, #100	; 0x64
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	3332      	adds	r3, #50	; 0x32
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <UART_SetConfig+0x6f4>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	f003 020f 	and.w	r2, r3, #15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4442      	add	r2, r8
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	e7ff      	b.n	800497e <UART_SetConfig+0x6e2>
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004988:	40011000 	.word	0x40011000
 800498c:	40011400 	.word	0x40011400
 8004990:	51eb851f 	.word	0x51eb851f

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4e0d      	ldr	r6, [pc, #52]	; (80049cc <__libc_init_array+0x38>)
 8004998:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <__libc_init_array+0x3c>)
 800499a:	1ba4      	subs	r4, r4, r6
 800499c:	10a4      	asrs	r4, r4, #2
 800499e:	2500      	movs	r5, #0
 80049a0:	42a5      	cmp	r5, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	4e0b      	ldr	r6, [pc, #44]	; (80049d4 <__libc_init_array+0x40>)
 80049a6:	4c0c      	ldr	r4, [pc, #48]	; (80049d8 <__libc_init_array+0x44>)
 80049a8:	f000 f820 	bl	80049ec <_init>
 80049ac:	1ba4      	subs	r4, r4, r6
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	2500      	movs	r5, #0
 80049b2:	42a5      	cmp	r5, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049bc:	4798      	blx	r3
 80049be:	3501      	adds	r5, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c6:	4798      	blx	r3
 80049c8:	3501      	adds	r5, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	08006d18 	.word	0x08006d18
 80049d0:	08006d18 	.word	0x08006d18
 80049d4:	08006d18 	.word	0x08006d18
 80049d8:	08006d1c 	.word	0x08006d1c

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <_init>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	bf00      	nop
 80049f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f2:	bc08      	pop	{r3}
 80049f4:	469e      	mov	lr, r3
 80049f6:	4770      	bx	lr

080049f8 <_fini>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	bf00      	nop
 80049fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fe:	bc08      	pop	{r3}
 8004a00:	469e      	mov	lr, r3
 8004a02:	4770      	bx	lr
